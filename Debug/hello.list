
hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  08005dcc  08005dcc  00015dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006590  08006590  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08006590  08006590  00016590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006598  08006598  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006598  08006598  00016598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800659c  0800659c  0001659c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080065a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  200000b4  08006654  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08006654  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c36  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002733  00000000  00000000  00030d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00033450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  000342c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022387  00000000  00000000  00035058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe9b  00000000  00000000  000573df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd3e1  00000000  00000000  0006727a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013465b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000466c  00000000  00000000  001346b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b4 	.word	0x200000b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005db4 	.word	0x08005db4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	08005db4 	.word	0x08005db4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <rb_init>:
 *              elements it can store will be size - 1.  Thus, size
 *              must be at least 2.
 *
 *  @param buf  Buffer to store items into
 */
static inline void rb_init(ring_buffer *rb, uint16_t size, uint8_t *buf) {
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	460b      	mov	r3, r1
 8000572:	607a      	str	r2, [r7, #4]
 8000574:	817b      	strh	r3, [r7, #10]
    rb->head = 0;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	2200      	movs	r2, #0
 800057a:	809a      	strh	r2, [r3, #4]
    rb->tail = 0;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2200      	movs	r2, #0
 8000580:	80da      	strh	r2, [r3, #6]
    rb->size = size - 1;
 8000582:	897b      	ldrh	r3, [r7, #10]
 8000584:	3b01      	subs	r3, #1
 8000586:	b29a      	uxth	r2, r3
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	811a      	strh	r2, [r3, #8]
    rb->buf = buf;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	601a      	str	r2, [r3, #0]
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <rb_full_count>:

/**
 * @brief Return the number of elements stored in the ring buffer.
 * @param rb Buffer whose elements to count.
 */
static inline uint16_t rb_full_count(ring_buffer *rb) {
 800059e:	b480      	push	{r7}
 80005a0:	b085      	sub	sp, #20
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
    int32_t size = rb->tail - rb->head;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	88db      	ldrh	r3, [r3, #6]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	461a      	mov	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	889b      	ldrh	r3, [r3, #4]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	60fb      	str	r3, [r7, #12]
    return ( size<0 ) ? (uint16_t)(size + rb->size + 1) : (uint16_t)size;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	da09      	bge.n	80005d2 <rb_full_count+0x34>
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	891b      	ldrh	r3, [r3, #8]
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	4413      	add	r3, r2
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	3301      	adds	r3, #1
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	e001      	b.n	80005d6 <rb_full_count+0x38>
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	b29b      	uxth	r3, r3
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <rb_is_full>:

/**
 * @brief Returns true if and only if the ring buffer is full.
 * @param rb Buffer to test.
 */
static inline int rb_is_full(ring_buffer *rb) {
 80005e2:	b480      	push	{r7}
 80005e4:	b083      	sub	sp, #12
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
    return (rb->tail + 1 == rb->head) ||
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	88db      	ldrh	r3, [r3, #6]
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	3301      	adds	r3, #1
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	8892      	ldrh	r2, [r2, #4]
 80005f6:	b292      	uxth	r2, r2
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d00c      	beq.n	8000616 <rb_is_full+0x34>
        (rb->tail == rb->size && rb->head == 0);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	88db      	ldrh	r3, [r3, #6]
 8000600:	b29a      	uxth	r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	891b      	ldrh	r3, [r3, #8]
 8000606:	b29b      	uxth	r3, r3
    return (rb->tail + 1 == rb->head) ||
 8000608:	429a      	cmp	r2, r3
 800060a:	d106      	bne.n	800061a <rb_is_full+0x38>
        (rb->tail == rb->size && rb->head == 0);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	889b      	ldrh	r3, [r3, #4]
 8000610:	b29b      	uxth	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d101      	bne.n	800061a <rb_is_full+0x38>
    return (rb->tail + 1 == rb->head) ||
 8000616:	2301      	movs	r3, #1
 8000618:	e000      	b.n	800061c <rb_is_full+0x3a>
 800061a:	2300      	movs	r3, #0
}
 800061c:	4618      	mov	r0, r3
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <rb_insert>:
/**
 * Append element onto the end of a ring buffer.
 * @param rb Buffer to append onto.
 * @param element Value to append.
 */
static inline void rb_insert(ring_buffer *rb, uint8_t element) {
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	70fb      	strb	r3, [r7, #3]
    rb->buf[rb->tail++] = element;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	88db      	ldrh	r3, [r3, #6]
 800063c:	b29b      	uxth	r3, r3
 800063e:	1c59      	adds	r1, r3, #1
 8000640:	b288      	uxth	r0, r1
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	80c8      	strh	r0, [r1, #6]
 8000646:	4413      	add	r3, r2
 8000648:	78fa      	ldrb	r2, [r7, #3]
 800064a:	701a      	strb	r2, [r3, #0]
    if (rb->tail > rb->size) rb->tail = 0;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	88db      	ldrh	r3, [r3, #6]
 8000650:	b29a      	uxth	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	891b      	ldrh	r3, [r3, #8]
 8000656:	b29b      	uxth	r3, r3
 8000658:	429a      	cmp	r2, r3
 800065a:	d902      	bls.n	8000662 <rb_insert+0x3a>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2200      	movs	r2, #0
 8000660:	80da      	strh	r2, [r3, #6]

    insert++;
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <rb_insert+0x50>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	3301      	adds	r3, #1
 8000668:	4a03      	ldr	r2, [pc, #12]	; (8000678 <rb_insert+0x50>)
 800066a:	6013      	str	r3, [r2, #0]
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	200000d4 	.word	0x200000d4

0800067c <rb_remove>:

/**
 * @brief Remove and return the first item from a ring buffer.
 * @param rb Buffer to remove from, must contain at least one element.
 */
static inline uint8_t rb_remove(ring_buffer *rb) {
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
    uint8_t ch = rb->buf[rb->head++];
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	889b      	ldrh	r3, [r3, #4]
 800068c:	b29b      	uxth	r3, r3
 800068e:	1c59      	adds	r1, r3, #1
 8000690:	b288      	uxth	r0, r1
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	8088      	strh	r0, [r1, #4]
 8000696:	4413      	add	r3, r2
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	73fb      	strb	r3, [r7, #15]
    if (rb->head > rb->size) rb->head = 0;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	889b      	ldrh	r3, [r3, #4]
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	891b      	ldrh	r3, [r3, #8]
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d902      	bls.n	80006b2 <rb_remove+0x36>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2200      	movs	r2, #0
 80006b0:	809a      	strh	r2, [r3, #4]

    remove++;
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <rb_remove+0x50>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3301      	adds	r3, #1
 80006b8:	4a04      	ldr	r2, [pc, #16]	; (80006cc <rb_remove+0x50>)
 80006ba:	6013      	str	r3, [r2, #0]
    return ch;
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	200000d0 	.word	0x200000d0

080006d0 <rb_push_insert>:
 * @param rb Ring buffer to insert into.
 * @param element Value to insert into ring buffer.
 * @return On success, returns -1.  If an element was popped, returns
 *         the popped value.
 */
static inline int16_t rb_push_insert(ring_buffer *rb, uint8_t element) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	70fb      	strb	r3, [r7, #3]
    int ret = -1;
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295
 80006e0:	60fb      	str	r3, [r7, #12]
    if (rb_is_full(rb)) {
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff ff7d 	bl	80005e2 <rb_is_full>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d004      	beq.n	80006f8 <rb_push_insert+0x28>
        ret = rb_remove(rb);
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f7ff ffc4 	bl	800067c <rb_remove>
 80006f4:	4603      	mov	r3, r0
 80006f6:	60fb      	str	r3, [r7, #12]
    }
    rb_insert(rb, element);
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	4619      	mov	r1, r3
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f7ff ff93 	bl	8000628 <rb_insert>
    return ret;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	b21b      	sxth	r3, r3
}
 8000706:	4618      	mov	r0, r3
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <Serial_Write>:

/* *****************************************************************************
 * Public function definition
 ******************************************************************************/
void Serial_Write(Serial_tst *serial_pst, uint8_t *buff_pu8, uint16_t len_u16)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	4613      	mov	r3, r2
 800071c:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef ret = HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	75fb      	strb	r3, [r7, #23]

    ret = HAL_UART_Transmit(serial_pst->uartHdl_pst, buff_pu8, len_u16, 0xFFFF);
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	88fa      	ldrh	r2, [r7, #6]
 8000728:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800072c:	68b9      	ldr	r1, [r7, #8]
 800072e:	f003 fb9c 	bl	8003e6a <HAL_UART_Transmit>
 8000732:	4603      	mov	r3, r0
 8000734:	75fb      	strb	r3, [r7, #23]
//    HAL_Delay(1);
    if(ret == HAL_OK)
 8000736:	7dfb      	ldrb	r3, [r7, #23]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d106      	bne.n	800074a <Serial_Write+0x3a>
    {
        if(HAL_UART_Receive_IT(serial_pst->uartHdl_pst, (uint8_t *)&g_incomming, 1)==HAL_OK)
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2201      	movs	r2, #1
 8000742:	4904      	ldr	r1, [pc, #16]	; (8000754 <Serial_Write+0x44>)
 8000744:	4618      	mov	r0, r3
 8000746:	f003 fc22 	bl	8003f8e <HAL_UART_Receive_IT>
        {

        }
    }
}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200001e8 	.word	0x200001e8

08000758 <Serial_Init>:

void Serial_Init(struct Serial *serial_pst)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
    rb_init(&serial_pst->rbRx_st, USART_RX_BUF_SIZE, serial_pst->rx_buf);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	1d18      	adds	r0, r3, #4
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3310      	adds	r3, #16
 8000768:	461a      	mov	r2, r3
 800076a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076e:	f7ff fefb 	bl	8000568 <rb_init>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <Serial_Available>:

uint16_t Serial_Available(struct Serial *serial_pst)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
    uint16_t ret = rb_full_count(&serial_pst->rbRx_st);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	3304      	adds	r3, #4
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff09 	bl	800059e <rb_full_count>
 800078c:	4603      	mov	r3, r0
 800078e:	81fb      	strh	r3, [r7, #14]
    if(ret > 0)
 8000790:	89fb      	ldrh	r3, [r7, #14]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <Serial_Available+0x20>
    {
        return 1;
 8000796:	2301      	movs	r3, #1
 8000798:	e000      	b.n	800079c <Serial_Available+0x22>
    }
    else
    {
        return 0;
 800079a:	2300      	movs	r3, #0
    }

}
 800079c:	4618      	mov	r0, r3
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <Serial_Read>:

void Serial_Read(struct Serial *serial_pst, uint8_t* incomming_u8)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
    static int count = 0;
    uint8_t ret = rb_remove(&serial_pst->rbRx_st);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	3304      	adds	r3, #4
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff62 	bl	800067c <rb_remove>
 80007b8:	4603      	mov	r3, r0
 80007ba:	73fb      	strb	r3, [r7, #15]
    if(ret == 0xB5)
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	2bb5      	cmp	r3, #181	; 0xb5
 80007c0:	d104      	bne.n	80007cc <Serial_Read+0x28>
    {
        count++;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <Serial_Read+0x38>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	3301      	adds	r3, #1
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <Serial_Read+0x38>)
 80007ca:	6013      	str	r3, [r2, #0]
    }
    *incomming_u8 = ret;
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	7bfa      	ldrb	r2, [r7, #15]
 80007d0:	701a      	strb	r2, [r3, #0]

    return;
 80007d2:	bf00      	nop
}
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000d8 	.word	0x200000d8

080007e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
    static int i = 0;
    int j = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
    if(huart->Instance == USART2)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a16      	ldr	r2, [pc, #88]	; (800084c <HAL_UART_RxCpltCallback+0x6c>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d126      	bne.n	8000844 <HAL_UART_RxCpltCallback+0x64>
    {
        aRxBuffer[i] = g_incomming;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <HAL_UART_RxCpltCallback+0x70>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a16      	ldr	r2, [pc, #88]	; (8000854 <HAL_UART_RxCpltCallback+0x74>)
 80007fc:	7811      	ldrb	r1, [r2, #0]
 80007fe:	4a16      	ldr	r2, [pc, #88]	; (8000858 <HAL_UART_RxCpltCallback+0x78>)
 8000800:	54d1      	strb	r1, [r2, r3]
        i++;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <HAL_UART_RxCpltCallback+0x70>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	3301      	adds	r3, #1
 8000808:	4a11      	ldr	r2, [pc, #68]	; (8000850 <HAL_UART_RxCpltCallback+0x70>)
 800080a:	6013      	str	r3, [r2, #0]

        rb_push_insert(&serial_st.rbRx_st, g_incomming);
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <HAL_UART_RxCpltCallback+0x74>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4619      	mov	r1, r3
 8000812:	4812      	ldr	r0, [pc, #72]	; (800085c <HAL_UART_RxCpltCallback+0x7c>)
 8000814:	f7ff ff5c 	bl	80006d0 <rb_push_insert>
        if(HAL_UART_Receive_IT(serial_st.uartHdl_pst, (uint8_t *)&g_incomming, 1)==HAL_OK)
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_UART_RxCpltCallback+0x80>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2201      	movs	r2, #1
 800081e:	490d      	ldr	r1, [pc, #52]	; (8000854 <HAL_UART_RxCpltCallback+0x74>)
 8000820:	4618      	mov	r0, r3
 8000822:	f003 fbb4 	bl	8003f8e <HAL_UART_Receive_IT>
        {

        }
        if(i == 256)
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <HAL_UART_RxCpltCallback+0x70>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800082e:	d102      	bne.n	8000836 <HAL_UART_RxCpltCallback+0x56>
        {
            j = i;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <HAL_UART_RxCpltCallback+0x70>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	60fb      	str	r3, [r7, #12]
        }
        if(g_incomming == 0xB5)
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <HAL_UART_RxCpltCallback+0x74>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2bb5      	cmp	r3, #181	; 0xb5
 800083c:	d102      	bne.n	8000844 <HAL_UART_RxCpltCallback+0x64>
        {
            j = i;
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <HAL_UART_RxCpltCallback+0x70>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40004400 	.word	0x40004400
 8000850:	200000dc 	.word	0x200000dc
 8000854:	200001e8 	.word	0x200001e8
 8000858:	2000031c 	.word	0x2000031c
 800085c:	20000200 	.word	0x20000200
 8000860:	200001fc 	.word	0x200001fc

08000864 <vprint>:

void vprint(const char *fmt, va_list argp)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b0b4      	sub	sp, #208	; 0xd0
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	6879      	ldr	r1, [r7, #4]
 8000876:	4618      	mov	r0, r3
 8000878:	f004 fa5c 	bl	8004d34 <vsiprintf>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	dd05      	ble.n	800088e <vprint+0x2a>
    {
        printf("\r%s\n", string);
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	4619      	mov	r1, r3
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <vprint+0x34>)
 800088a:	f004 f9f5 	bl	8004c78 <iprintf>
//        DWT_Delay_us(5);
    }
}
 800088e:	bf00      	nop
 8000890:	37d0      	adds	r7, #208	; 0xd0
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	08005dcc 	.word	0x08005dcc

0800089c <my_printf>:

void my_printf(const char *fmt, ...)
{
 800089c:	b40f      	push	{r0, r1, r2, r3}
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	607b      	str	r3, [r7, #4]
    vprint(fmt, argp);
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	6938      	ldr	r0, [r7, #16]
 80008ae:	f7ff ffd9 	bl	8000864 <vprint>
    va_end(argp);
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008bc:	b004      	add	sp, #16
 80008be:	4770      	bx	lr

080008c0 <Gnss_Init>:

/* *****************************************************************************
 * Public function definition
 ******************************************************************************/
bool Gnss_Init(Ublox_Gnss_tst *gnss_pst, Serial_tst *serial_pst)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
    bool connected = true;
 80008ca:	2301      	movs	r3, #1
 80008cc:	73fb      	strb	r3, [r7, #15]

    if(gnss_pst != NULL)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d021      	beq.n	8000918 <Gnss_Init+0x58>
    {
        gnss_pst->currentSentence_e = NONE;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2200      	movs	r2, #0
 80008d8:	721a      	strb	r2, [r3, #8]
        gnss_pst->rtcmFrameCounter_u16 = 0;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2200      	movs	r2, #0
 80008de:	801a      	strh	r2, [r3, #0]
        gnss_pst->ignoreThisPayload_b = false;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2200      	movs	r2, #0
 80008e4:	719a      	strb	r2, [r3, #6]
        gnss_pst->activePacketBuffer_e = UBLOX_PACKET_PACKETBUF;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2202      	movs	r2, #2
 80008ea:	71da      	strb	r2, [r3, #7]
        gnss_pst->packetCfgPayloadSize = 0;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
        gnss_pst->packetUBXCFGRATE_pst = NULL;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
        gnss_pst->commTypes_en = COMM_TYPE_SERIAL;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2201      	movs	r2, #1
 80008fc:	741a      	strb	r2, [r3, #16]
        gnss_pst->serial_pst = serial_pst;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	683a      	ldr	r2, [r7, #0]
 8000902:	619a      	str	r2, [r3, #24]

        if(gnss_pst->packetCfgPayloadSize == 0)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d105      	bne.n	8000918 <Gnss_Init+0x58>
        {
            gnss_pst->setPacketCfgPayloadSize(gnss_pst, MAX_PAYLOAD_SIZE);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	69db      	ldr	r3, [r3, #28]
 8000910:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	4798      	blx	r3
//        {
//            connected = gnss_pst->isConnected(gnss_pst);
//        }
    }

    return connected;
 8000918:	7bfb      	ldrb	r3, [r7, #15]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <Gnss_ConfMsg>:

bool Gnss_ConfMsg(struct Ublox_Gnss *gnss_pst, uint8_t msgClass_u8, uint8_t msgID_u8,
        uint8_t portID_u8, uint8_t sendRate_u8, uint16_t maxWait_u16)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	4608      	mov	r0, r1
 800092e:	4611      	mov	r1, r2
 8000930:	461a      	mov	r2, r3
 8000932:	4603      	mov	r3, r0
 8000934:	70fb      	strb	r3, [r7, #3]
 8000936:	460b      	mov	r3, r1
 8000938:	70bb      	strb	r3, [r7, #2]
 800093a:	4613      	mov	r3, r2
 800093c:	707b      	strb	r3, [r7, #1]
    packetCfg_st.cls_u8 = UBX_CLASS_CFG;
 800093e:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <Gnss_ConfMsg+0x94>)
 8000940:	2206      	movs	r2, #6
 8000942:	701a      	strb	r2, [r3, #0]
    packetCfg_st.id_u8 = UBX_CFG_MSG;
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <Gnss_ConfMsg+0x94>)
 8000946:	2201      	movs	r2, #1
 8000948:	705a      	strb	r2, [r3, #1]
    packetCfg_st.len_u16 = 2;
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <Gnss_ConfMsg+0x94>)
 800094c:	2202      	movs	r2, #2
 800094e:	805a      	strh	r2, [r3, #2]
    packetCfg_st.startingSpot_u16 = 0;
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <Gnss_ConfMsg+0x94>)
 8000952:	2200      	movs	r2, #0
 8000954:	80da      	strh	r2, [r3, #6]

    payloadCfg_pu8[0] = msgClass_u8;
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <Gnss_ConfMsg+0x98>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	78fa      	ldrb	r2, [r7, #3]
 800095c:	701a      	strb	r2, [r3, #0]
    payloadCfg_pu8[1] = msgID_u8;
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <Gnss_ConfMsg+0x98>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	3301      	adds	r3, #1
 8000964:	78ba      	ldrb	r2, [r7, #2]
 8000966:	701a      	strb	r2, [r3, #0]

    /*This will load the payloadCfg_pu8 array with current settings of the given register*/
    // We are expecting data and an ACK
    if (gnss_pst->sendCommand(gnss_pst, &packetCfg_st, maxWait_u16, false) != UBLOX_STATUS_DATA_RECEIVED)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800096c:	8bba      	ldrh	r2, [r7, #28]
 800096e:	2300      	movs	r3, #0
 8000970:	4911      	ldr	r1, [pc, #68]	; (80009b8 <Gnss_ConfMsg+0x94>)
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	47a0      	blx	r4
 8000976:	4603      	mov	r3, r0
 8000978:	2b0b      	cmp	r3, #11
 800097a:	d001      	beq.n	8000980 <Gnss_ConfMsg+0x5c>
    {
        return (false);      /*If command send fails then bail*/
 800097c:	2300      	movs	r3, #0
 800097e:	e016      	b.n	80009ae <Gnss_ConfMsg+0x8a>
    }

    /*Now send it back with new mods*/
    packetCfg_st.len_u16 = 8;
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <Gnss_ConfMsg+0x94>)
 8000982:	2208      	movs	r2, #8
 8000984:	805a      	strh	r2, [r3, #2]

    /*payloadCfg_pu8 is now loaded with current bytes. Change only the ones we need to
     *Send rate is relative to the event a message is registered on.
     *For example, if the rate of a navigation message is set to 2, the message is sent every 2nd navigation solution.
     */
    payloadCfg_pu8[2 + portID_u8] = sendRate_u8;
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <Gnss_ConfMsg+0x98>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	787a      	ldrb	r2, [r7, #1]
 800098c:	3202      	adds	r2, #2
 800098e:	4413      	add	r3, r2
 8000990:	7e3a      	ldrb	r2, [r7, #24]
 8000992:	701a      	strb	r2, [r3, #0]

    /* We are only expecting an ACK */
    return ((gnss_pst->sendCommand(gnss_pst, &packetCfg_st, maxWait_u16, false)) == UBLOX_STATUS_DATA_SENT);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8000998:	8bba      	ldrh	r2, [r7, #28]
 800099a:	2300      	movs	r3, #0
 800099c:	4906      	ldr	r1, [pc, #24]	; (80009b8 <Gnss_ConfMsg+0x94>)
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	47a0      	blx	r4
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b0a      	cmp	r3, #10
 80009a6:	bf0c      	ite	eq
 80009a8:	2301      	moveq	r3, #1
 80009aa:	2300      	movne	r3, #0
 80009ac:	b2db      	uxtb	r3, r3
    return true;
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd90      	pop	{r4, r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000004 	.word	0x20000004
 80009bc:	200000e0 	.word	0x200000e0

080009c0 <Gnss_SetPacketCfgPayloadSize>:

void Gnss_SetPacketCfgPayloadSize(Ublox_Gnss_tst *gnss_pst, size_t payloadSz)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
    if ((payloadSz == 0) && (payloadCfg_pu8 != NULL))
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d11b      	bne.n	8000a08 <Gnss_SetPacketCfgPayloadSize+0x48>
 80009d0:	4b3d      	ldr	r3, [pc, #244]	; (8000ac8 <Gnss_SetPacketCfgPayloadSize+0x108>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d017      	beq.n	8000a08 <Gnss_SetPacketCfgPayloadSize+0x48>
    {
      // Zero payloadSize? Dangerous! But we'll free the memory anyway...
      free(payloadCfg_pu8);
 80009d8:	4b3b      	ldr	r3, [pc, #236]	; (8000ac8 <Gnss_SetPacketCfgPayloadSize+0x108>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f004 f891 	bl	8004b04 <free>
      payloadCfg_pu8 = NULL; // Redundant?
 80009e2:	4b39      	ldr	r3, [pc, #228]	; (8000ac8 <Gnss_SetPacketCfgPayloadSize+0x108>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
      packetCfg_st.payload_pu8 = payloadCfg_pu8;
 80009e8:	4b37      	ldr	r3, [pc, #220]	; (8000ac8 <Gnss_SetPacketCfgPayloadSize+0x108>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a37      	ldr	r2, [pc, #220]	; (8000acc <Gnss_SetPacketCfgPayloadSize+0x10c>)
 80009ee:	6093      	str	r3, [r2, #8]
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
 80009f0:	4b37      	ldr	r3, [pc, #220]	; (8000ad0 <Gnss_SetPacketCfgPayloadSize+0x110>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d103      	bne.n	8000a00 <Gnss_SetPacketCfgPayloadSize+0x40>
 80009f8:	4b36      	ldr	r3, [pc, #216]	; (8000ad4 <Gnss_SetPacketCfgPayloadSize+0x114>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d05b      	beq.n	8000ab8 <Gnss_SetPacketCfgPayloadSize+0xf8>
      {
          my_printf(("setPacketCfgPayloadSize: Zero payloadSize!\n"));
 8000a00:	4835      	ldr	r0, [pc, #212]	; (8000ad8 <Gnss_SetPacketCfgPayloadSize+0x118>)
 8000a02:	f7ff ff4b 	bl	800089c <my_printf>
    {
 8000a06:	e057      	b.n	8000ab8 <Gnss_SetPacketCfgPayloadSize+0xf8>
      }
    }
    else if (payloadCfg_pu8 == NULL) //Memory has not yet been allocated - so use new
 8000a08:	4b2f      	ldr	r3, [pc, #188]	; (8000ac8 <Gnss_SetPacketCfgPayloadSize+0x108>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d11a      	bne.n	8000a46 <Gnss_SetPacketCfgPayloadSize+0x86>
    {
//      payloadCfg_pu8 = new uint8_t[payloadSize];
      payloadCfg_pu8 = (uint8_t *)malloc(payloadSz);
 8000a10:	6838      	ldr	r0, [r7, #0]
 8000a12:	f004 f86f 	bl	8004af4 <malloc>
 8000a16:	4603      	mov	r3, r0
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <Gnss_SetPacketCfgPayloadSize+0x108>)
 8000a1c:	601a      	str	r2, [r3, #0]
      packetCfg_st.payload_pu8 = payloadCfg_pu8;
 8000a1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <Gnss_SetPacketCfgPayloadSize+0x108>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a2a      	ldr	r2, [pc, #168]	; (8000acc <Gnss_SetPacketCfgPayloadSize+0x10c>)
 8000a24:	6093      	str	r3, [r2, #8]
      if (payloadCfg_pu8 == NULL)
 8000a26:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <Gnss_SetPacketCfgPayloadSize+0x108>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d145      	bne.n	8000aba <Gnss_SetPacketCfgPayloadSize+0xfa>
      {
        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
 8000a2e:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <Gnss_SetPacketCfgPayloadSize+0x110>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d103      	bne.n	8000a3e <Gnss_SetPacketCfgPayloadSize+0x7e>
 8000a36:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <Gnss_SetPacketCfgPayloadSize+0x114>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d03d      	beq.n	8000aba <Gnss_SetPacketCfgPayloadSize+0xfa>
        {
            my_printf("setPacketCfgPayloadSize: PANIC! RAM allocation failed!");
 8000a3e:	4827      	ldr	r0, [pc, #156]	; (8000adc <Gnss_SetPacketCfgPayloadSize+0x11c>)
 8000a40:	f7ff ff2c 	bl	800089c <my_printf>
 8000a44:	e039      	b.n	8000aba <Gnss_SetPacketCfgPayloadSize+0xfa>
      }
    }
    else //Memory has already been allocated - so resize
    {
//      uint8_t *newPayload = new uint8_t[payloadSize];
      uint8_t *newPayload = malloc(payloadSz);
 8000a46:	6838      	ldr	r0, [r7, #0]
 8000a48:	f004 f854 	bl	8004af4 <malloc>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	60bb      	str	r3, [r7, #8]
      for (size_t i = 0; (i < payloadSz) && (i < gnss_pst->packetCfgPayloadSize); i++) // Copy as much existing data as we can
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	e00b      	b.n	8000a6e <Gnss_SetPacketCfgPayloadSize+0xae>
      {
        newPayload[i] = payloadCfg_pu8[i];
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <Gnss_SetPacketCfgPayloadSize+0x108>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	441a      	add	r2, r3
 8000a5e:	68b9      	ldr	r1, [r7, #8]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	440b      	add	r3, r1
 8000a64:	7812      	ldrb	r2, [r2, #0]
 8000a66:	701a      	strb	r2, [r3, #0]
      for (size_t i = 0; (i < payloadSz) && (i < gnss_pst->packetCfgPayloadSize); i++) // Copy as much existing data as we can
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d204      	bcs.n	8000a80 <Gnss_SetPacketCfgPayloadSize+0xc0>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d3ea      	bcc.n	8000a56 <Gnss_SetPacketCfgPayloadSize+0x96>
      }
      free(payloadCfg_pu8);
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <Gnss_SetPacketCfgPayloadSize+0x108>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f004 f83d 	bl	8004b04 <free>
      payloadCfg_pu8 = newPayload;
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ac8 <Gnss_SetPacketCfgPayloadSize+0x108>)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	6013      	str	r3, [r2, #0]
      packetCfg_st.payload_pu8 = payloadCfg_pu8;
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <Gnss_SetPacketCfgPayloadSize+0x108>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <Gnss_SetPacketCfgPayloadSize+0x10c>)
 8000a96:	6093      	str	r3, [r2, #8]
      if (payloadCfg_pu8 == NULL)
 8000a98:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <Gnss_SetPacketCfgPayloadSize+0x108>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d10c      	bne.n	8000aba <Gnss_SetPacketCfgPayloadSize+0xfa>
        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <Gnss_SetPacketCfgPayloadSize+0x110>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d103      	bne.n	8000ab0 <Gnss_SetPacketCfgPayloadSize+0xf0>
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <Gnss_SetPacketCfgPayloadSize+0x114>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d004      	beq.n	8000aba <Gnss_SetPacketCfgPayloadSize+0xfa>
          my_printf("setPacketCfgPayloadSize: PANIC! RAM resize failed!");
 8000ab0:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <Gnss_SetPacketCfgPayloadSize+0x120>)
 8000ab2:	f7ff fef3 	bl	800089c <my_printf>
 8000ab6:	e000      	b.n	8000aba <Gnss_SetPacketCfgPayloadSize+0xfa>
    {
 8000ab8:	bf00      	nop
    }

    gnss_pst->packetCfgPayloadSize = payloadSz;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	615a      	str	r2, [r3, #20]
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200000e0 	.word	0x200000e0
 8000acc:	20000004 	.word	0x20000004
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000001 	.word	0x20000001
 8000ad8:	08005dd4 	.word	0x08005dd4
 8000adc:	08005e00 	.word	0x08005e00
 8000ae0:	08005e38 	.word	0x08005e38

08000ae4 <Gnss_SendCmd>:

ublox_status_ten Gnss_SendCmd(Ublox_Gnss_tst *gnss_pst, Ubx_Packet_tst *outgoingUBX_st, uint16_t maxWait_u16, bool expectACKonly_b)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af02      	add	r7, sp, #8
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	4611      	mov	r1, r2
 8000af0:	461a      	mov	r2, r3
 8000af2:	460b      	mov	r3, r1
 8000af4:	80fb      	strh	r3, [r7, #6]
 8000af6:	4613      	mov	r3, r2
 8000af8:	717b      	strb	r3, [r7, #5]
    ublox_status_ten retVal = UBLOX_STATUS_SUCCESS;
 8000afa:	2300      	movs	r3, #0
 8000afc:	75fb      	strb	r3, [r7, #23]

    gnss_pst->calcChecksum(gnss_pst, outgoingUBX_st); //Sets checksum A and B bytes of the packet
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b02:	68b9      	ldr	r1, [r7, #8]
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	4798      	blx	r3

    if (_printDebug != true)
 8000b08:	4b2b      	ldr	r3, [pc, #172]	; (8000bb8 <Gnss_SendCmd+0xd4>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	f083 0301 	eor.w	r3, r3, #1
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d009      	beq.n	8000b2a <Gnss_SendCmd+0x46>
    {
      my_printf("\nSending: ");
 8000b16:	4829      	ldr	r0, [pc, #164]	; (8000bbc <Gnss_SendCmd+0xd8>)
 8000b18:	f7ff fec0 	bl	800089c <my_printf>
      gnss_pst->printPacket(gnss_pst, outgoingUBX_st, true); // Always print payload
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b22:	2201      	movs	r2, #1
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	4798      	blx	r3
    }

    if (gnss_pst->commTypes_en == COMM_TYPE_SERIAL)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	7c1b      	ldrb	r3, [r3, #16]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d107      	bne.n	8000b42 <Gnss_SendCmd+0x5e>
    {
        gnss_pst->sendSerialCommand(gnss_pst, outgoingUBX_st);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b36:	68b9      	ldr	r1, [r7, #8]
 8000b38:	68f8      	ldr	r0, [r7, #12]
 8000b3a:	4798      	blx	r3
        /* TODO: should delay so that transmission is finished */
        HAL_Delay(250);
 8000b3c:	20fa      	movs	r0, #250	; 0xfa
 8000b3e:	f002 f82f 	bl	8002ba0 <HAL_Delay>
    }

    if (maxWait_u16 > 0)
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d031      	beq.n	8000bac <Gnss_SendCmd+0xc8>
    {
      //Depending on what we just sent, either we need to look for an ACK or not
      if ((outgoingUBX_st->cls_u8 == UBX_CLASS_CFG) || (expectACKonly_b == true))
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b06      	cmp	r3, #6
 8000b4e:	d002      	beq.n	8000b56 <Gnss_SendCmd+0x72>
 8000b50:	797b      	ldrb	r3, [r7, #5]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d015      	beq.n	8000b82 <Gnss_SendCmd+0x9e>
      {
        if (_printDebug == true)
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <Gnss_SendCmd+0xd4>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d002      	beq.n	8000b64 <Gnss_SendCmd+0x80>
        {
          my_printf("sendCommand: Waiting for ACK response");
 8000b5e:	4818      	ldr	r0, [pc, #96]	; (8000bc0 <Gnss_SendCmd+0xdc>)
 8000b60:	f7ff fe9c 	bl	800089c <my_printf>
        }
        //Wait for Ack response
        retVal = gnss_pst->waitForACKResponse(gnss_pst, outgoingUBX_st, outgoingUBX_st->cls_u8, outgoingUBX_st->id_u8, maxWait_u16);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	7859      	ldrb	r1, [r3, #1]
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	460b      	mov	r3, r1
 8000b76:	68b9      	ldr	r1, [r7, #8]
 8000b78:	68f8      	ldr	r0, [r7, #12]
 8000b7a:	47a0      	blx	r4
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	75fb      	strb	r3, [r7, #23]
 8000b80:	e014      	b.n	8000bac <Gnss_SendCmd+0xc8>
      }
      else
      {
        if (_printDebug == true)
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <Gnss_SendCmd+0xd4>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d002      	beq.n	8000b90 <Gnss_SendCmd+0xac>
        {
          my_printf("sendCommand: Waiting for No ACK response");
 8000b8a:	480e      	ldr	r0, [pc, #56]	; (8000bc4 <Gnss_SendCmd+0xe0>)
 8000b8c:	f7ff fe86 	bl	800089c <my_printf>
        }
        retVal = gnss_pst->waitForNoACKResponse(gnss_pst, outgoingUBX_st, outgoingUBX_st->cls_u8, outgoingUBX_st->id_u8, maxWait_u16); //Wait for Ack response
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	781a      	ldrb	r2, [r3, #0]
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	7859      	ldrb	r1, [r3, #1]
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	68b9      	ldr	r1, [r7, #8]
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	47a0      	blx	r4
 8000ba8:	4603      	mov	r3, r0
 8000baa:	75fb      	strb	r3, [r7, #23]
      }
    }
    return retVal;
 8000bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	371c      	adds	r7, #28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd90      	pop	{r4, r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000000 	.word	0x20000000
 8000bbc:	08005e6c 	.word	0x08005e6c
 8000bc0:	08005e78 	.word	0x08005e78
 8000bc4:	08005ea0 	.word	0x08005ea0

08000bc8 <Gnss_SendSerialCommand>:

void Gnss_SendSerialCommand(struct Ublox_Gnss *gnss_pst, Ubx_Packet_tst *outgoingUBX_st)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
    uint16_t index;
    uint8_t *pkg_pu8 = (uint8_t *)malloc(outgoingUBX_st->len_u16 + 8u);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	885b      	ldrh	r3, [r3, #2]
 8000bd6:	3308      	adds	r3, #8
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 ff8b 	bl	8004af4 <malloc>
 8000bde:	4603      	mov	r3, r0
 8000be0:	60bb      	str	r3, [r7, #8]
    if(pkg_pu8 != NULL)
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d052      	beq.n	8000c8e <Gnss_SendSerialCommand+0xc6>
    {
        pkg_pu8[0] = UBX_SYNCH_1;
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	22b5      	movs	r2, #181	; 0xb5
 8000bec:	701a      	strb	r2, [r3, #0]
        pkg_pu8[1] = UBX_SYNCH_2;
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	2262      	movs	r2, #98	; 0x62
 8000bf4:	701a      	strb	r2, [r3, #0]
        pkg_pu8[2] = outgoingUBX_st->cls_u8;
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	3302      	adds	r3, #2
 8000bfa:	683a      	ldr	r2, [r7, #0]
 8000bfc:	7812      	ldrb	r2, [r2, #0]
 8000bfe:	701a      	strb	r2, [r3, #0]
        pkg_pu8[3] = outgoingUBX_st->id_u8;
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	3303      	adds	r3, #3
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	7852      	ldrb	r2, [r2, #1]
 8000c08:	701a      	strb	r2, [r3, #0]
        pkg_pu8[4] = outgoingUBX_st->len_u16 & 0xFF;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	885a      	ldrh	r2, [r3, #2]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	3304      	adds	r3, #4
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	701a      	strb	r2, [r3, #0]
        pkg_pu8[5] = outgoingUBX_st->len_u16 >> 8;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	885b      	ldrh	r3, [r3, #2]
 8000c1a:	0a1b      	lsrs	r3, r3, #8
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	3305      	adds	r3, #5
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	701a      	strb	r2, [r3, #0]
        for (index = 0; index < outgoingUBX_st->len_u16; index++)
 8000c26:	2300      	movs	r3, #0
 8000c28:	81fb      	strh	r3, [r7, #14]
 8000c2a:	e00c      	b.n	8000c46 <Gnss_SendSerialCommand+0x7e>
        {
            pkg_pu8[index + 6u] = outgoingUBX_st->payload_pu8[index];
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	689a      	ldr	r2, [r3, #8]
 8000c30:	89fb      	ldrh	r3, [r7, #14]
 8000c32:	441a      	add	r2, r3
 8000c34:	89fb      	ldrh	r3, [r7, #14]
 8000c36:	3306      	adds	r3, #6
 8000c38:	68b9      	ldr	r1, [r7, #8]
 8000c3a:	440b      	add	r3, r1
 8000c3c:	7812      	ldrb	r2, [r2, #0]
 8000c3e:	701a      	strb	r2, [r3, #0]
        for (index = 0; index < outgoingUBX_st->len_u16; index++)
 8000c40:	89fb      	ldrh	r3, [r7, #14]
 8000c42:	3301      	adds	r3, #1
 8000c44:	81fb      	strh	r3, [r7, #14]
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	885b      	ldrh	r3, [r3, #2]
 8000c4a:	89fa      	ldrh	r2, [r7, #14]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d3ed      	bcc.n	8000c2c <Gnss_SendSerialCommand+0x64>
        }
        pkg_pu8[outgoingUBX_st->len_u16 + 8u - 2u] = outgoingUBX_st->checksumA_u8;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	885b      	ldrh	r3, [r3, #2]
 8000c54:	3306      	adds	r3, #6
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	4413      	add	r3, r2
 8000c5a:	683a      	ldr	r2, [r7, #0]
 8000c5c:	7b12      	ldrb	r2, [r2, #12]
 8000c5e:	701a      	strb	r2, [r3, #0]
        pkg_pu8[outgoingUBX_st->len_u16 + 8u - 1u] = outgoingUBX_st->checksumB_u8;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	885b      	ldrh	r3, [r3, #2]
 8000c64:	3307      	adds	r3, #7
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	4413      	add	r3, r2
 8000c6a:	683a      	ldr	r2, [r7, #0]
 8000c6c:	7b52      	ldrb	r2, [r2, #13]
 8000c6e:	701a      	strb	r2, [r3, #0]

        gnss_pst->serial_pst->write(gnss_pst->serial_pst, pkg_pu8, outgoingUBX_st->len_u16 + 8u);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	6990      	ldr	r0, [r2, #24]
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	8852      	ldrh	r2, [r2, #2]
 8000c80:	3208      	adds	r2, #8
 8000c82:	b292      	uxth	r2, r2
 8000c84:	68b9      	ldr	r1, [r7, #8]
 8000c86:	4798      	blx	r3

        free(pkg_pu8);
 8000c88:	68b8      	ldr	r0, [r7, #8]
 8000c8a:	f003 ff3b 	bl	8004b04 <free>
//    }

    //Write checksum
//    HAL_UART_Transmit_DMA(gnss_pst->uartHdl_pst, outgoingUBX_st->checksumA_u8, sizeof(uint8_t));
//    HAL_UART_Transmit_DMA(gnss_pst->uartHdl_pst, outgoingUBX_st->checksumB_u8, sizeof(uint8_t));
}
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <Gnss_CalcChecksum>:

void Gnss_CalcChecksum(struct Ublox_Gnss *gnss_pst, Ubx_Packet_tst *msg_pst)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b085      	sub	sp, #20
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
    msg_pst->checksumA_u8 = 0;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	731a      	strb	r2, [r3, #12]
    msg_pst->checksumB_u8 = 0;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	735a      	strb	r2, [r3, #13]

    msg_pst->checksumA_u8 += msg_pst->cls_u8;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	7b1a      	ldrb	r2, [r3, #12]
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	731a      	strb	r2, [r3, #12]
    msg_pst->checksumB_u8 += msg_pst->checksumA_u8;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	7b5a      	ldrb	r2, [r3, #13]
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	7b1b      	ldrb	r3, [r3, #12]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	735a      	strb	r2, [r3, #13]

    msg_pst->checksumA_u8 += msg_pst->id_u8;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	7b1a      	ldrb	r2, [r3, #12]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	785b      	ldrb	r3, [r3, #1]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	731a      	strb	r2, [r3, #12]
    msg_pst->checksumB_u8 += msg_pst->checksumA_u8;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	7b5a      	ldrb	r2, [r3, #13]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	7b1b      	ldrb	r3, [r3, #12]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	735a      	strb	r2, [r3, #13]

    msg_pst->checksumA_u8 += (msg_pst->len_u16 & 0xFF);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	7b1a      	ldrb	r2, [r3, #12]
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	885b      	ldrh	r3, [r3, #2]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	4413      	add	r3, r2
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	731a      	strb	r2, [r3, #12]
    msg_pst->checksumB_u8 += msg_pst->checksumA_u8;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	7b5a      	ldrb	r2, [r3, #13]
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	7b1b      	ldrb	r3, [r3, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	735a      	strb	r2, [r3, #13]

    msg_pst->checksumA_u8 += (msg_pst->len_u16 >> 8);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	7b1a      	ldrb	r2, [r3, #12]
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	885b      	ldrh	r3, [r3, #2]
 8000d16:	0a1b      	lsrs	r3, r3, #8
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	4413      	add	r3, r2
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	731a      	strb	r2, [r3, #12]
    msg_pst->checksumB_u8 += msg_pst->checksumA_u8;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	7b5a      	ldrb	r2, [r3, #13]
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	7b1b      	ldrb	r3, [r3, #12]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	735a      	strb	r2, [r3, #13]

    for (uint16_t i = 0; i < msg_pst->len_u16; i++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	81fb      	strh	r3, [r7, #14]
 8000d38:	e015      	b.n	8000d66 <Gnss_CalcChecksum+0xd0>
    {
        msg_pst->checksumA_u8 += msg_pst->payload_pu8[i];
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	7b1a      	ldrb	r2, [r3, #12]
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	6899      	ldr	r1, [r3, #8]
 8000d42:	89fb      	ldrh	r3, [r7, #14]
 8000d44:	440b      	add	r3, r1
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4413      	add	r3, r2
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	731a      	strb	r2, [r3, #12]
        msg_pst->checksumB_u8 += msg_pst->checksumA_u8;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	7b5a      	ldrb	r2, [r3, #13]
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	7b1b      	ldrb	r3, [r3, #12]
 8000d58:	4413      	add	r3, r2
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	735a      	strb	r2, [r3, #13]
    for (uint16_t i = 0; i < msg_pst->len_u16; i++)
 8000d60:	89fb      	ldrh	r3, [r7, #14]
 8000d62:	3301      	adds	r3, #1
 8000d64:	81fb      	strh	r3, [r7, #14]
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	885b      	ldrh	r3, [r3, #2]
 8000d6a:	89fa      	ldrh	r2, [r7, #14]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d3e4      	bcc.n	8000d3a <Gnss_CalcChecksum+0xa4>
    }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <Gnss_WaitForACKResponse>:

ublox_status_ten Gnss_WaitForACKResponse(struct Ublox_Gnss *gnss_pst, Ubx_Packet_tst *outgoingUBX_pst, uint8_t requestedClass_u8, uint8_t requestedID_u8, uint16_t maxTime_u16)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b08b      	sub	sp, #44	; 0x2c
 8000d84:	af02      	add	r7, sp, #8
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	460b      	mov	r3, r1
 8000d90:	71fb      	strb	r3, [r7, #7]
 8000d92:	4613      	mov	r3, r2
 8000d94:	71bb      	strb	r3, [r7, #6]
    outgoingUBX_pst->valid_en = UBLOX_PACKET_VALIDITY_NOT_DEFINED; //This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	2202      	movs	r2, #2
 8000d9a:	739a      	strb	r2, [r3, #14]
    packetAck_st.valid_en = UBLOX_PACKET_VALIDITY_NOT_DEFINED;
 8000d9c:	4b42      	ldr	r3, [pc, #264]	; (8000ea8 <Gnss_WaitForACKResponse+0x128>)
 8000d9e:	2202      	movs	r2, #2
 8000da0:	739a      	strb	r2, [r3, #14]
    packetBuf_st.valid_en = UBLOX_PACKET_VALIDITY_NOT_DEFINED;
 8000da2:	4b42      	ldr	r3, [pc, #264]	; (8000eac <Gnss_WaitForACKResponse+0x12c>)
 8000da4:	2202      	movs	r2, #2
 8000da6:	739a      	strb	r2, [r3, #14]
    packetAuto_st.valid_en = UBLOX_PACKET_VALIDITY_NOT_DEFINED;
 8000da8:	4b41      	ldr	r3, [pc, #260]	; (8000eb0 <Gnss_WaitForACKResponse+0x130>)
 8000daa:	2202      	movs	r2, #2
 8000dac:	739a      	strb	r2, [r3, #14]
    outgoingUBX_pst->classAndIDmatch_en = UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	2202      	movs	r2, #2
 8000db2:	73da      	strb	r2, [r3, #15]
    packetAck_st.classAndIDmatch_en = UBLOX_PACKET_VALIDITY_NOT_DEFINED;
 8000db4:	4b3c      	ldr	r3, [pc, #240]	; (8000ea8 <Gnss_WaitForACKResponse+0x128>)
 8000db6:	2202      	movs	r2, #2
 8000db8:	73da      	strb	r2, [r3, #15]
    packetBuf_st.classAndIDmatch_en = UBLOX_PACKET_VALIDITY_NOT_DEFINED;
 8000dba:	4b3c      	ldr	r3, [pc, #240]	; (8000eac <Gnss_WaitForACKResponse+0x12c>)
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	73da      	strb	r2, [r3, #15]
    packetAuto_st.classAndIDmatch_en = UBLOX_PACKET_VALIDITY_NOT_DEFINED;
 8000dc0:	4b3b      	ldr	r3, [pc, #236]	; (8000eb0 <Gnss_WaitForACKResponse+0x130>)
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	73da      	strb	r2, [r3, #15]

    unsigned long startTime = HAL_GetTick();
 8000dc6:	f001 fedf 	bl	8002b88 <HAL_GetTick>
 8000dca:	61f8      	str	r0, [r7, #28]
    unsigned long current;
    uint8_t data_u8;

    my_printf("start=%d, maxTime=%d", startTime, maxTime_u16);
 8000dcc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000dce:	461a      	mov	r2, r3
 8000dd0:	69f9      	ldr	r1, [r7, #28]
 8000dd2:	4838      	ldr	r0, [pc, #224]	; (8000eb4 <Gnss_WaitForACKResponse+0x134>)
 8000dd4:	f7ff fd62 	bl	800089c <my_printf>
//    while (HAL_GetTick() - startTime < maxTime_u16)
    do
    {
        if(gnss_pst->serial_pst->available(gnss_pst->serial_pst))
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	6992      	ldr	r2, [r2, #24]
 8000de4:	4610      	mov	r0, r2
 8000de6:	4798      	blx	r3
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d013      	beq.n	8000e16 <Gnss_WaitForACKResponse+0x96>
        {
            gnss_pst->serial_pst->read(gnss_pst->serial_pst, &data_u8);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	6992      	ldr	r2, [r2, #24]
 8000dfa:	f107 0117 	add.w	r1, r7, #23
 8000dfe:	4610      	mov	r0, r2
 8000e00:	4798      	blx	r3
            gnss_pst->process(gnss_pst, data_u8, outgoingUBX_pst, requestedClass_u8, requestedID_u8);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8000e06:	7df9      	ldrb	r1, [r7, #23]
 8000e08:	79fa      	ldrb	r2, [r7, #7]
 8000e0a:	79bb      	ldrb	r3, [r7, #6]
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	68ba      	ldr	r2, [r7, #8]
 8000e12:	68f8      	ldr	r0, [r7, #12]
 8000e14:	47a0      	blx	r4
        }

        current = HAL_GetTick();
 8000e16:	f001 feb7 	bl	8002b88 <HAL_GetTick>
 8000e1a:	61b8      	str	r0, [r7, #24]
        if(current - startTime >= 20)
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b13      	cmp	r3, #19
 8000e24:	d904      	bls.n	8000e30 <Gnss_WaitForACKResponse+0xb0>
        {
            printf("startTimeadadsfadfadfadfadfadfadfad=%d, cu%d", startTime, current);
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	69f9      	ldr	r1, [r7, #28]
 8000e2a:	4823      	ldr	r0, [pc, #140]	; (8000eb8 <Gnss_WaitForACKResponse+0x138>)
 8000e2c:	f003 ff24 	bl	8004c78 <iprintf>
        }
        HAL_Delay(1);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f001 feb5 	bl	8002ba0 <HAL_Delay>
    } while (current - startTime < maxTime_u16);
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	1ad2      	subs	r2, r2, r3
 8000e3c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d3ca      	bcc.n	8000dd8 <Gnss_WaitForACKResponse+0x58>

    my_printf("curr=%d", current);
 8000e42:	69b9      	ldr	r1, [r7, #24]
 8000e44:	481d      	ldr	r0, [pc, #116]	; (8000ebc <Gnss_WaitForACKResponse+0x13c>)
 8000e46:	f7ff fd29 	bl	800089c <my_printf>

    // We have timed out...
    // If the outgoingUBX_pst->classAndIDmatch_en is VALID then we can take a gamble and return DATA_RECEIVED
    // even though we did not get an ACK
    if ((outgoingUBX_pst->classAndIDmatch_en == UBLOX_PACKET_VALIDITY_VALID) && (packetAck_st.classAndIDmatch_en == UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX_pst->valid_en == UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX_pst->cls_u8 == requestedClass_u8) && (outgoingUBX_pst->id_u8 == requestedID_u8))
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	7bdb      	ldrb	r3, [r3, #15]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d11a      	bne.n	8000e88 <Gnss_WaitForACKResponse+0x108>
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <Gnss_WaitForACKResponse+0x128>)
 8000e54:	7bdb      	ldrb	r3, [r3, #15]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d116      	bne.n	8000e88 <Gnss_WaitForACKResponse+0x108>
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	7b9b      	ldrb	r3, [r3, #14]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d112      	bne.n	8000e88 <Gnss_WaitForACKResponse+0x108>
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	79fa      	ldrb	r2, [r7, #7]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d10d      	bne.n	8000e88 <Gnss_WaitForACKResponse+0x108>
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	785b      	ldrb	r3, [r3, #1]
 8000e70:	79ba      	ldrb	r2, [r7, #6]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d108      	bne.n	8000e88 <Gnss_WaitForACKResponse+0x108>
    {
      if (_printDebug == true)
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <Gnss_WaitForACKResponse+0x140>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d002      	beq.n	8000e84 <Gnss_WaitForACKResponse+0x104>
      {
        my_printf(("waitForACKResponse: TIMEOUT with valid_en data after "));
 8000e7e:	4811      	ldr	r0, [pc, #68]	; (8000ec4 <Gnss_WaitForACKResponse+0x144>)
 8000e80:	f7ff fd0c 	bl	800089c <my_printf>
//        my_printf(millis() - startTime);
//        my_printf(F(" msec. "));
      }
      return (UBLOX_STATUS_DATA_RECEIVED); //We received valid_en data... But no ACK!
 8000e84:	230b      	movs	r3, #11
 8000e86:	e00a      	b.n	8000e9e <Gnss_WaitForACKResponse+0x11e>
    }

    if (_printDebug == true)
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <Gnss_WaitForACKResponse+0x140>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <Gnss_WaitForACKResponse+0x116>
    {
      my_printf(("waitForACKResponse: TIMEOUT after "));
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <Gnss_WaitForACKResponse+0x148>)
 8000e92:	f7ff fd03 	bl	800089c <my_printf>
//      my_printf(millis() - startTime);
//      my_printf(F(" msec."));
    }

    my_printf("exit");
 8000e96:	480d      	ldr	r0, [pc, #52]	; (8000ecc <Gnss_WaitForACKResponse+0x14c>)
 8000e98:	f7ff fd00 	bl	800089c <my_printf>
    return (UBLOX_STATUS_TIMEOUT);
 8000e9c:	2303      	movs	r3, #3
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	; 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd90      	pop	{r4, r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000014 	.word	0x20000014
 8000eac:	20000024 	.word	0x20000024
 8000eb0:	20000034 	.word	0x20000034
 8000eb4:	08005ecc 	.word	0x08005ecc
 8000eb8:	08005ee4 	.word	0x08005ee4
 8000ebc:	08005f14 	.word	0x08005f14
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	08005f1c 	.word	0x08005f1c
 8000ec8:	08005f54 	.word	0x08005f54
 8000ecc:	08005f78 	.word	0x08005f78

08000ed0 <Gnss_WaitForNoACKResponse>:

ublox_status_ten Gnss_WaitForNoACKResponse(struct Ublox_Gnss *gnss_pst, Ubx_Packet_tst *outgoingUBX, uint8_t requestedClass, uint8_t requestedID, uint16_t maxTime)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b087      	sub	sp, #28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	4611      	mov	r1, r2
 8000edc:	461a      	mov	r2, r3
 8000ede:	460b      	mov	r3, r1
 8000ee0:	71fb      	strb	r3, [r7, #7]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	71bb      	strb	r3, [r7, #6]
    outgoingUBX->valid_en = UBLOX_PACKET_VALIDITY_NOT_DEFINED; //This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	2202      	movs	r2, #2
 8000eea:	739a      	strb	r2, [r3, #14]
    packetAck_st.valid_en = UBLOX_PACKET_VALIDITY_NOT_DEFINED;
 8000eec:	4b40      	ldr	r3, [pc, #256]	; (8000ff0 <Gnss_WaitForNoACKResponse+0x120>)
 8000eee:	2202      	movs	r2, #2
 8000ef0:	739a      	strb	r2, [r3, #14]
    packetBuf_st.valid_en = UBLOX_PACKET_VALIDITY_NOT_DEFINED;
 8000ef2:	4b40      	ldr	r3, [pc, #256]	; (8000ff4 <Gnss_WaitForNoACKResponse+0x124>)
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	739a      	strb	r2, [r3, #14]
    packetAuto_st.valid_en = UBLOX_PACKET_VALIDITY_NOT_DEFINED;
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <Gnss_WaitForNoACKResponse+0x128>)
 8000efa:	2202      	movs	r2, #2
 8000efc:	739a      	strb	r2, [r3, #14]
    outgoingUBX->classAndIDmatch_en = UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	2202      	movs	r2, #2
 8000f02:	73da      	strb	r2, [r3, #15]
    packetAck_st.classAndIDmatch_en = UBLOX_PACKET_VALIDITY_NOT_DEFINED;
 8000f04:	4b3a      	ldr	r3, [pc, #232]	; (8000ff0 <Gnss_WaitForNoACKResponse+0x120>)
 8000f06:	2202      	movs	r2, #2
 8000f08:	73da      	strb	r2, [r3, #15]
    packetBuf_st.classAndIDmatch_en = UBLOX_PACKET_VALIDITY_NOT_DEFINED;
 8000f0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ff4 <Gnss_WaitForNoACKResponse+0x124>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	73da      	strb	r2, [r3, #15]
    packetAuto_st.classAndIDmatch_en = UBLOX_PACKET_VALIDITY_NOT_DEFINED;
 8000f10:	4b39      	ldr	r3, [pc, #228]	; (8000ff8 <Gnss_WaitForNoACKResponse+0x128>)
 8000f12:	2202      	movs	r2, #2
 8000f14:	73da      	strb	r2, [r3, #15]

    unsigned long startTime = HAL_GetTick();
 8000f16:	f001 fe37 	bl	8002b88 <HAL_GetTick>
 8000f1a:	6178      	str	r0, [r7, #20]
    while (HAL_GetTick() - startTime < maxTime)
 8000f1c:	e054      	b.n	8000fc8 <Gnss_WaitForNoACKResponse+0xf8>
    {
      if (gnss_pst->checkUbloxInternal(gnss_pst, outgoingUBX, requestedClass, requestedID) == true) //See if new data is available. Process bytes as they come in.
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8000f22:	79bb      	ldrb	r3, [r7, #6]
 8000f24:	79fa      	ldrb	r2, [r7, #7]
 8000f26:	68b9      	ldr	r1, [r7, #8]
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	47a0      	blx	r4
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d046      	beq.n	8000fc0 <Gnss_WaitForNoACKResponse+0xf0>
      {

        // If outgoingUBX->classAndIDmatch_en is VALID
        // and outgoingUBX->valid_en is _still_ VALID and the class and ID _still_ match
        // then we can be confident that the data in outgoingUBX is valid_en
        if ((outgoingUBX->classAndIDmatch_en == UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid_en == UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls_u8 == requestedClass) && (outgoingUBX->id_u8 == requestedID))
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	7bdb      	ldrb	r3, [r3, #15]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d116      	bne.n	8000f68 <Gnss_WaitForNoACKResponse+0x98>
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	7b9b      	ldrb	r3, [r3, #14]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d112      	bne.n	8000f68 <Gnss_WaitForNoACKResponse+0x98>
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	79fa      	ldrb	r2, [r7, #7]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d10d      	bne.n	8000f68 <Gnss_WaitForNoACKResponse+0x98>
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	785b      	ldrb	r3, [r3, #1]
 8000f50:	79ba      	ldrb	r2, [r7, #6]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d108      	bne.n	8000f68 <Gnss_WaitForNoACKResponse+0x98>
        {
          if (_printDebug == true)
 8000f56:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <Gnss_WaitForNoACKResponse+0x12c>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d002      	beq.n	8000f64 <Gnss_WaitForNoACKResponse+0x94>
          {
            my_printf(("waitForNoACKResponse: valid_en data with CLS/ID match after "));
 8000f5e:	4828      	ldr	r0, [pc, #160]	; (8001000 <Gnss_WaitForNoACKResponse+0x130>)
 8000f60:	f7ff fc9c 	bl	800089c <my_printf>
//            my_printf(millis() - startTime);
//            my_printf(F(" msec"));
          }
          return (UBLOX_STATUS_DATA_RECEIVED); //We received valid_en data!
 8000f64:	230b      	movs	r3, #11
 8000f66:	e03f      	b.n	8000fe8 <Gnss_WaitForNoACKResponse+0x118>
        // valid_en data but it has been or is currently being overwritten by another packet (e.g. PVT).
        // If (e.g.) a PVT packet is _being_ received: outgoingUBX->valid_en will be NOT_DEFINED
        // If (e.g.) a PVT packet _has been_ received: outgoingUBX->valid_en will be VALID (or just possibly NOT_VALID)
        // So we cannot use outgoingUBX->valid_en as part of this check.
        // Note: the addition of packetBuf_st should make this check redundant!
        else if ((outgoingUBX->classAndIDmatch_en == UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls_u8 != requestedClass) || (outgoingUBX->id_u8 != requestedID)))
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	7bdb      	ldrb	r3, [r3, #15]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d112      	bne.n	8000f96 <Gnss_WaitForNoACKResponse+0xc6>
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	79fa      	ldrb	r2, [r7, #7]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d104      	bne.n	8000f84 <Gnss_WaitForNoACKResponse+0xb4>
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	785b      	ldrb	r3, [r3, #1]
 8000f7e:	79ba      	ldrb	r2, [r7, #6]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d008      	beq.n	8000f96 <Gnss_WaitForNoACKResponse+0xc6>
        {
          if (_printDebug == true)
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <Gnss_WaitForNoACKResponse+0x12c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d002      	beq.n	8000f92 <Gnss_WaitForNoACKResponse+0xc2>
          {
            my_printf(("waitForNoACKResponse: data being OVERWRITTEN after "));
 8000f8c:	481d      	ldr	r0, [pc, #116]	; (8001004 <Gnss_WaitForNoACKResponse+0x134>)
 8000f8e:	f7ff fc85 	bl	800089c <my_printf>
//            my_printf(millis() - startTime);
//            my_printf(F(" msec"));
          }
          return (UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid_en but has been or is being overwritten
 8000f92:	230d      	movs	r3, #13
 8000f94:	e028      	b.n	8000fe8 <Gnss_WaitForNoACKResponse+0x118>
        }

        // If outgoingUBX->classAndIDmatch_en is NOT_DEFINED
        // and outgoingUBX->valid_en is VALID then this must be (e.g.) a PVT packet
        else if ((outgoingUBX->classAndIDmatch_en == UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid_en == UBLOX_PACKET_VALIDITY_VALID))
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	7bdb      	ldrb	r3, [r3, #15]
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d103      	bne.n	8000fa6 <Gnss_WaitForNoACKResponse+0xd6>
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	7b9b      	ldrb	r3, [r3, #14]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d00c      	beq.n	8000fc0 <Gnss_WaitForNoACKResponse+0xf0>
          //   my_printf(outgoingUBX->id_u8);
          // }
        }

        // If the outgoingUBX->classAndIDmatch_en is NOT_VALID then we return CRC failure
        else if (outgoingUBX->classAndIDmatch_en == UBLOX_PACKET_VALIDITY_NOT_VALID)
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	7bdb      	ldrb	r3, [r3, #15]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d108      	bne.n	8000fc0 <Gnss_WaitForNoACKResponse+0xf0>
        {
          if (_printDebug == true)
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <Gnss_WaitForNoACKResponse+0x12c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d002      	beq.n	8000fbc <Gnss_WaitForNoACKResponse+0xec>
          {
            my_printf(("waitForNoACKResponse: CLS/ID match but failed CRC after "));
 8000fb6:	4814      	ldr	r0, [pc, #80]	; (8001008 <Gnss_WaitForNoACKResponse+0x138>)
 8000fb8:	f7ff fc70 	bl	800089c <my_printf>
//            my_printf(millis() - startTime);
//            my_printf(F(" msec"));
          }
          return (UBLOX_STATUS_CRC_FAIL); //We received invalid data
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	e013      	b.n	8000fe8 <Gnss_WaitForNoACKResponse+0x118>
        }
      }

      delayMicroseconds(500);
 8000fc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc4:	f001 f96e 	bl	80022a4 <delayMicroseconds>
    while (HAL_GetTick() - startTime < maxTime)
 8000fc8:	f001 fdde 	bl	8002b88 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	1ad2      	subs	r2, r2, r3
 8000fd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d3a2      	bcc.n	8000f1e <Gnss_WaitForNoACKResponse+0x4e>
    }
    if (_printDebug == true)
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <Gnss_WaitForNoACKResponse+0x12c>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d002      	beq.n	8000fe6 <Gnss_WaitForNoACKResponse+0x116>
    {
      my_printf(("waitForNoACKResponse: TIMEOUT after "));
 8000fe0:	480a      	ldr	r0, [pc, #40]	; (800100c <Gnss_WaitForNoACKResponse+0x13c>)
 8000fe2:	f7ff fc5b 	bl	800089c <my_printf>
//      my_printf(millis() - startTime);
//      my_printf(F(" msec. No packet received."));
    }
    return (UBLOX_STATUS_TIMEOUT);
 8000fe6:	2303      	movs	r3, #3

}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	371c      	adds	r7, #28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd90      	pop	{r4, r7, pc}
 8000ff0:	20000014 	.word	0x20000014
 8000ff4:	20000024 	.word	0x20000024
 8000ff8:	20000034 	.word	0x20000034
 8000ffc:	20000000 	.word	0x20000000
 8001000:	08005f80 	.word	0x08005f80
 8001004:	08005fc0 	.word	0x08005fc0
 8001008:	08005ff4 	.word	0x08005ff4
 800100c:	08006030 	.word	0x08006030

08001010 <Gnss_EnableNMEAMessage>:

bool Gnss_EnableNMEAMessage(struct Ublox_Gnss *gnss_pst, uint8_t msgID_u8, uint8_t portID_u8, uint8_t sendRate_u8, uint16_t maxWait_u16)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b085      	sub	sp, #20
 8001014:	af02      	add	r7, sp, #8
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	4608      	mov	r0, r1
 800101a:	4611      	mov	r1, r2
 800101c:	461a      	mov	r2, r3
 800101e:	4603      	mov	r3, r0
 8001020:	70fb      	strb	r3, [r7, #3]
 8001022:	460b      	mov	r3, r1
 8001024:	70bb      	strb	r3, [r7, #2]
 8001026:	4613      	mov	r3, r2
 8001028:	707b      	strb	r3, [r7, #1]
    return (gnss_pst->configureMsg_pf(gnss_pst, UBX_CLASS_NMEA, msgID_u8, portID_u8, sendRate_u8, maxWait_u16));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800102e:	78b9      	ldrb	r1, [r7, #2]
 8001030:	78fa      	ldrb	r2, [r7, #3]
 8001032:	8b3b      	ldrh	r3, [r7, #24]
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	787b      	ldrb	r3, [r7, #1]
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	460b      	mov	r3, r1
 800103c:	21f0      	movs	r1, #240	; 0xf0
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	47a0      	blx	r4
 8001042:	4603      	mov	r3, r0
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bd90      	pop	{r4, r7, pc}

0800104c <Gnss_DisableNMEAMessage>:

bool Gnss_DisableNMEAMessage(struct Ublox_Gnss *gnss_pst, uint8_t msgID_u8, uint8_t portID_u8, uint16_t maxWait_u16)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b085      	sub	sp, #20
 8001050:	af02      	add	r7, sp, #8
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	4608      	mov	r0, r1
 8001056:	4611      	mov	r1, r2
 8001058:	461a      	mov	r2, r3
 800105a:	4603      	mov	r3, r0
 800105c:	70fb      	strb	r3, [r7, #3]
 800105e:	460b      	mov	r3, r1
 8001060:	70bb      	strb	r3, [r7, #2]
 8001062:	4613      	mov	r3, r2
 8001064:	803b      	strh	r3, [r7, #0]
    return (gnss_pst->enableNMEAMessage(gnss_pst, msgID_u8, portID_u8, 0, maxWait_u16));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800106a:	78ba      	ldrb	r2, [r7, #2]
 800106c:	78f9      	ldrb	r1, [r7, #3]
 800106e:	883b      	ldrh	r3, [r7, #0]
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2300      	movs	r3, #0
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	47a0      	blx	r4
 8001078:	4603      	mov	r3, r0
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bd90      	pop	{r4, r7, pc}

08001082 <Gnss_IsConnected>:

bool Gnss_IsConnected(struct Ublox_Gnss *gnss_pst)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
    return gnss_pst->isConnectedT(gnss_pst, 1100);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f240 414c 	movw	r1, #1100	; 0x44c
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	4798      	blx	r3
 8001096:	4603      	mov	r3, r0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <Gnss_IsConnectedT>:

bool Gnss_IsConnectedT(struct Ublox_Gnss *gnss_pst, uint16_t maxWait_u16)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
    return gnss_pst->getNavigationFrequencyInternal(gnss_pst, maxWait_u16);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b0:	887a      	ldrh	r2, [r7, #2]
 80010b2:	4611      	mov	r1, r2
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	4798      	blx	r3
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <Gnss_InitPacketUBXCFGRATE>:

bool Gnss_InitPacketUBXCFGRATE(Ublox_Gnss_tst *gnss_pst)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
    gnss_pst->packetUBXCFGRATE_pst = (UBX_CFG_RATE_tst *)malloc(sizeof(UBX_CFG_RATE_tst));
 80010ca:	2014      	movs	r0, #20
 80010cc:	f003 fd12 	bl	8004af4 <malloc>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	60da      	str	r2, [r3, #12]
    if (gnss_pst->packetUBXCFGRATE_pst == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <Gnss_InitPacketUBXCFGRATE+0x22>
    {
        return (false);
 80010e0:	2300      	movs	r3, #0
 80010e2:	e010      	b.n	8001106 <Gnss_InitPacketUBXCFGRATE+0x44>
    }
    gnss_pst->packetUBXCFGRATE_pst->automaticFlags.flags.all = 0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
    gnss_pst->packetUBXCFGRATE_pst->callbackPointer = NULL;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
    gnss_pst->packetUBXCFGRATE_pst->callbackData = NULL;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
    gnss_pst->packetUBXCFGRATE_pst->moduleQueried.moduleQueried.all = 0;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
    return (true);
 8001104:	2301      	movs	r3, #1
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <Gnss_GetNavigationFrequencyInternal>:

bool Gnss_GetNavigationFrequencyInternal(struct Ublox_Gnss *gnss_pst, uint16_t maxWait_u16)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
    if (gnss_pst->packetUBXCFGRATE_pst == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d109      	bne.n	8001138 <Gnss_GetNavigationFrequencyInternal+0x28>
    {
        gnss_pst->initPacketUBXCFGRATE(gnss_pst);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	4798      	blx	r3
        if (gnss_pst->packetUBXCFGRATE_pst == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <Gnss_GetNavigationFrequencyInternal+0x28>
        {
            return false;
 8001134:	2300      	movs	r3, #0
 8001136:	e054      	b.n	80011e2 <Gnss_GetNavigationFrequencyInternal+0xd2>
        }
    }

    if (gnss_pst->packetUBXCFGRATE_pst->automaticFlags.flags.bits.automatic && gnss_pst->packetUBXCFGRATE_pst->automaticFlags.flags.bits.implicitUpdate)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d01a      	beq.n	800117e <Gnss_GetNavigationFrequencyInternal+0x6e>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d012      	beq.n	800117e <Gnss_GetNavigationFrequencyInternal+0x6e>
    {
      //The GPS is automatically reporting, we just check whether we got unread data
        gnss_pst->checkUbloxInternal(gnss_pst, &packetCfg_st, UBX_CLASS_CFG, UBX_CFG_RATE);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 800115c:	2308      	movs	r3, #8
 800115e:	2206      	movs	r2, #6
 8001160:	4922      	ldr	r1, [pc, #136]	; (80011ec <Gnss_GetNavigationFrequencyInternal+0xdc>)
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	47a0      	blx	r4
      return gnss_pst->packetUBXCFGRATE_pst->moduleQueried.moduleQueried.bits.all;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	7a1b      	ldrb	r3, [r3, #8]
 800116c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	bf14      	ite	ne
 8001176:	2301      	movne	r3, #1
 8001178:	2300      	moveq	r3, #0
 800117a:	b2db      	uxtb	r3, r3
 800117c:	e031      	b.n	80011e2 <Gnss_GetNavigationFrequencyInternal+0xd2>
    }
    else if (gnss_pst->packetUBXCFGRATE_pst->automaticFlags.flags.bits.automatic && !gnss_pst->packetUBXCFGRATE_pst->automaticFlags.flags.bits.implicitUpdate)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d009      	beq.n	80011a2 <Gnss_GetNavigationFrequencyInternal+0x92>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <Gnss_GetNavigationFrequencyInternal+0x92>
    {
      //Someone else has to call checkUblox for us...
      return (false);
 800119e:	2300      	movs	r3, #0
 80011a0:	e01f      	b.n	80011e2 <Gnss_GetNavigationFrequencyInternal+0xd2>
    }
    else
    {
      //The GPS is not automatically reporting navigation rate so we have to poll explicitly
      packetCfg_st.cls_u8 = UBX_CLASS_CFG;
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <Gnss_GetNavigationFrequencyInternal+0xdc>)
 80011a4:	2206      	movs	r2, #6
 80011a6:	701a      	strb	r2, [r3, #0]
      packetCfg_st.id_u8 = UBX_CFG_RATE;
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <Gnss_GetNavigationFrequencyInternal+0xdc>)
 80011aa:	2208      	movs	r2, #8
 80011ac:	705a      	strb	r2, [r3, #1]
      packetCfg_st.len_u16 = 0;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <Gnss_GetNavigationFrequencyInternal+0xdc>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	805a      	strh	r2, [r3, #2]
      packetCfg_st.startingSpot_u16 = 0;
 80011b4:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <Gnss_GetNavigationFrequencyInternal+0xdc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	80da      	strh	r2, [r3, #6]

      //The data is parsed as part of processing the response
      ublox_status_ten retVal = gnss_pst->sendCommand(gnss_pst, &packetCfg_st, maxWait_u16, false);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	2300      	movs	r3, #0
 80011c2:	490a      	ldr	r1, [pc, #40]	; (80011ec <Gnss_GetNavigationFrequencyInternal+0xdc>)
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	47a0      	blx	r4
 80011c8:	4603      	mov	r3, r0
 80011ca:	73fb      	strb	r3, [r7, #15]

      if (retVal == UBLOX_STATUS_DATA_RECEIVED)
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	2b0b      	cmp	r3, #11
 80011d0:	d101      	bne.n	80011d6 <Gnss_GetNavigationFrequencyInternal+0xc6>
      {
          return (true);
 80011d2:	2301      	movs	r3, #1
 80011d4:	e005      	b.n	80011e2 <Gnss_GetNavigationFrequencyInternal+0xd2>
      }

      if (retVal == UBLOX_STATUS_DATA_OVERWRITTEN)
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	2b0d      	cmp	r3, #13
 80011da:	d101      	bne.n	80011e0 <Gnss_GetNavigationFrequencyInternal+0xd0>
      {
          return (true);
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <Gnss_GetNavigationFrequencyInternal+0xd2>
      }

      return (false);
 80011e0:	2300      	movs	r3, #0
    }
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd90      	pop	{r4, r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000004 	.word	0x20000004

080011f0 <Gnss_CheckUbloxInternal>:

bool Gnss_CheckUbloxInternal(struct Ublox_Gnss *gnss_pst, Ubx_Packet_tst *incomingUBX_pst, uint8_t requestedClass_u8, uint8_t requestedID_u8)
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	4611      	mov	r1, r2
 80011fc:	461a      	mov	r2, r3
 80011fe:	460b      	mov	r3, r1
 8001200:	71fb      	strb	r3, [r7, #7]
 8001202:	4613      	mov	r3, r2
 8001204:	71bb      	strb	r3, [r7, #6]
    if (gnss_pst->commTypes_en == COMM_TYPE_SERIAL)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	7c1b      	ldrb	r3, [r3, #16]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d108      	bne.n	8001220 <Gnss_CheckUbloxInternal+0x30>
    {
        return (gnss_pst->checkUbloxSerial(gnss_pst, incomingUBX_pst, requestedClass_u8, requestedID_u8));
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8001212:	79bb      	ldrb	r3, [r7, #6]
 8001214:	79fa      	ldrb	r2, [r7, #7]
 8001216:	68b9      	ldr	r1, [r7, #8]
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	47a0      	blx	r4
 800121c:	4603      	mov	r3, r0
 800121e:	e000      	b.n	8001222 <Gnss_CheckUbloxInternal+0x32>
    }
    return false;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	bd90      	pop	{r4, r7, pc}

0800122a <Gnss_CheckUbloxSerial>:

bool Gnss_CheckUbloxSerial(struct Ublox_Gnss *gnss_pst, Ubx_Packet_tst *incomingUBX_pst, uint8_t requestedClass_u8, uint8_t requestedID_u8)
{
 800122a:	b590      	push	{r4, r7, lr}
 800122c:	b089      	sub	sp, #36	; 0x24
 800122e:	af02      	add	r7, sp, #8
 8001230:	60f8      	str	r0, [r7, #12]
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	4611      	mov	r1, r2
 8001236:	461a      	mov	r2, r3
 8001238:	460b      	mov	r3, r1
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	4613      	mov	r3, r2
 800123e:	71bb      	strb	r3, [r7, #6]
    uint8_t data_u8;

    while( gnss_pst->serial_pst->available(gnss_pst->serial_pst) )
 8001240:	e013      	b.n	800126a <Gnss_CheckUbloxSerial+0x40>
    {
        gnss_pst->serial_pst->read(gnss_pst->serial_pst, &data_u8);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	6992      	ldr	r2, [r2, #24]
 800124e:	f107 0117 	add.w	r1, r7, #23
 8001252:	4610      	mov	r0, r2
 8001254:	4798      	blx	r3

        gnss_pst->process(gnss_pst, data_u8, incomingUBX_pst, requestedClass_u8, requestedID_u8);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800125a:	7df9      	ldrb	r1, [r7, #23]
 800125c:	79fa      	ldrb	r2, [r7, #7]
 800125e:	79bb      	ldrb	r3, [r7, #6]
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	4613      	mov	r3, r2
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	47a0      	blx	r4
    while( gnss_pst->serial_pst->available(gnss_pst->serial_pst) )
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	6992      	ldr	r2, [r2, #24]
 8001276:	4610      	mov	r0, r2
 8001278:	4798      	blx	r3
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1e0      	bne.n	8001242 <Gnss_CheckUbloxSerial+0x18>
    }

    return (true);
 8001280:	2301      	movs	r3, #1
}
 8001282:	4618      	mov	r0, r3
 8001284:	371c      	adds	r7, #28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd90      	pop	{r4, r7, pc}
	...

0800128c <Gnss_GetPortSettings>:

bool Gnss_GetPortSettings(struct Ublox_Gnss *gnss_pst, uint8_t portID_u8, uint16_t maxWait_u16)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	70fb      	strb	r3, [r7, #3]
 8001298:	4613      	mov	r3, r2
 800129a:	803b      	strh	r3, [r7, #0]
    packetCfg_st.cls_u8 = UBX_CLASS_CFG;
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <Gnss_GetPortSettings+0x54>)
 800129e:	2206      	movs	r2, #6
 80012a0:	701a      	strb	r2, [r3, #0]
    packetCfg_st.id_u8 = UBX_CFG_PRT;
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <Gnss_GetPortSettings+0x54>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	705a      	strb	r2, [r3, #1]
    packetCfg_st.len_u16 = 1;
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <Gnss_GetPortSettings+0x54>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	805a      	strh	r2, [r3, #2]
    packetCfg_st.startingSpot_u16 = 0;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <Gnss_GetPortSettings+0x54>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	80da      	strh	r2, [r3, #6]

    payloadCfg_pu8[0] = portID_u8;
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <Gnss_GetPortSettings+0x58>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	78fa      	ldrb	r2, [r7, #3]
 80012ba:	701a      	strb	r2, [r3, #0]

    return ((gnss_pst->sendCommand(gnss_pst, &packetCfg_st, maxWait_u16, false)) == UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80012c0:	883a      	ldrh	r2, [r7, #0]
 80012c2:	2300      	movs	r3, #0
 80012c4:	4906      	ldr	r1, [pc, #24]	; (80012e0 <Gnss_GetPortSettings+0x54>)
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	47a0      	blx	r4
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b0b      	cmp	r3, #11
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd90      	pop	{r4, r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000004 	.word	0x20000004
 80012e4:	200000e0 	.word	0x200000e0

080012e8 <Gnss_SetPortOutput>:

bool Gnss_SetPortOutput(struct Ublox_Gnss *gnss_pst, uint8_t portID, uint8_t outStreamSettings, uint16_t maxWait)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	4608      	mov	r0, r1
 80012f2:	4611      	mov	r1, r2
 80012f4:	461a      	mov	r2, r3
 80012f6:	4603      	mov	r3, r0
 80012f8:	70fb      	strb	r3, [r7, #3]
 80012fa:	460b      	mov	r3, r1
 80012fc:	70bb      	strb	r3, [r7, #2]
 80012fe:	4613      	mov	r3, r2
 8001300:	803b      	strh	r3, [r7, #0]
//     if (gnss_pst->getPortSettings(gnss_pst, portID, maxWait) == false)
//     {
//       return (false);
//     }

     packetCfg_st.cls_u8 = UBX_CLASS_CFG;
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <Gnss_SetPortOutput+0x60>)
 8001304:	2206      	movs	r2, #6
 8001306:	701a      	strb	r2, [r3, #0]
     packetCfg_st.id_u8 = UBX_CFG_PRT;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <Gnss_SetPortOutput+0x60>)
 800130a:	2200      	movs	r2, #0
 800130c:	705a      	strb	r2, [r3, #1]
     packetCfg_st.len_u16 = 20;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <Gnss_SetPortOutput+0x60>)
 8001310:	2214      	movs	r2, #20
 8001312:	805a      	strh	r2, [r3, #2]
     packetCfg_st.startingSpot_u16 = 0;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <Gnss_SetPortOutput+0x60>)
 8001316:	2200      	movs	r2, #0
 8001318:	80da      	strh	r2, [r3, #6]

     //payloadCfg is now loaded with current bytes. Change only the ones we need to
     payloadCfg_pu8[14] = outStreamSettings; //OutProtocolMask LSB - Set outStream bits
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <Gnss_SetPortOutput+0x64>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	330e      	adds	r3, #14
 8001320:	78ba      	ldrb	r2, [r7, #2]
 8001322:	701a      	strb	r2, [r3, #0]

     return ((gnss_pst->sendCommand(gnss_pst, &packetCfg_st, maxWait, false)) == UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001328:	883a      	ldrh	r2, [r7, #0]
 800132a:	2300      	movs	r3, #0
 800132c:	4906      	ldr	r1, [pc, #24]	; (8001348 <Gnss_SetPortOutput+0x60>)
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	47a0      	blx	r4
 8001332:	4603      	mov	r3, r0
 8001334:	2b0a      	cmp	r3, #10
 8001336:	bf0c      	ite	eq
 8001338:	2301      	moveq	r3, #1
 800133a:	2300      	movne	r3, #0
 800133c:	b2db      	uxtb	r3, r3
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bd90      	pop	{r4, r7, pc}
 8001346:	bf00      	nop
 8001348:	20000004 	.word	0x20000004
 800134c:	200000e0 	.word	0x200000e0

08001350 <Gnss_SetUART1Output>:

bool Gnss_SetUART1Output(struct Ublox_Gnss *gnss_pst, uint8_t comSettings, uint16_t maxWait)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	70fb      	strb	r3, [r7, #3]
 800135c:	4613      	mov	r3, r2
 800135e:	803b      	strh	r3, [r7, #0]
    return (gnss_pst->setPortOutput(gnss_pst, COM_PORT_UART1, comSettings, maxWait));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 8001364:	883b      	ldrh	r3, [r7, #0]
 8001366:	78fa      	ldrb	r2, [r7, #3]
 8001368:	2101      	movs	r1, #1
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	47a0      	blx	r4
 800136e:	4603      	mov	r3, r0
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bd90      	pop	{r4, r7, pc}

08001378 <Gnss_SetUART2Output>:

bool Gnss_SetUART2Output(struct Ublox_Gnss *gnss_pst, uint8_t comSettings, uint16_t maxWait)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	70fb      	strb	r3, [r7, #3]
 8001384:	4613      	mov	r3, r2
 8001386:	803b      	strh	r3, [r7, #0]
    return (gnss_pst->setPortOutput(gnss_pst, COM_PORT_UART2, comSettings, maxWait));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 800138c:	883b      	ldrh	r3, [r7, #0]
 800138e:	78fa      	ldrb	r2, [r7, #3]
 8001390:	2102      	movs	r1, #2
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	47a0      	blx	r4
 8001396:	4603      	mov	r3, r0
}
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bd90      	pop	{r4, r7, pc}

080013a0 <Gnss_ProcessUBX>:


void Gnss_ProcessUBX(struct Ublox_Gnss *gnss_pst, uint8_t incoming_u8, Ubx_Packet_tst *incomingUBX_pst, uint8_t requestedClass_u8, uint8_t requestedID_u8)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	461a      	mov	r2, r3
 80013ac:	460b      	mov	r3, r1
 80013ae:	72fb      	strb	r3, [r7, #11]
 80013b0:	4613      	mov	r3, r2
 80013b2:	72bb      	strb	r3, [r7, #10]
   size_t maximum_payload_size;
   if (gnss_pst->activePacketBuffer_e == UBLOX_PACKET_PACKETCFG)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	79db      	ldrb	r3, [r3, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d103      	bne.n	80013c4 <Gnss_ProcessUBX+0x24>
   {
       maximum_payload_size = gnss_pst->packetCfgPayloadSize;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	e024      	b.n	800140e <Gnss_ProcessUBX+0x6e>
   }
   else if (gnss_pst->activePacketBuffer_e == UBLOX_PACKET_PACKETAUTO)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	79db      	ldrb	r3, [r3, #7]
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d11e      	bne.n	800140a <Gnss_ProcessUBX+0x6a>
   {
       maximum_payload_size = gnss_pst->getMaxPayloadSize(gnss_pst, incomingUBX_pst->cls_u8, incomingUBX_pst->id_u8);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	7811      	ldrb	r1, [r2, #0]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	7852      	ldrb	r2, [r2, #1]
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	4798      	blx	r3
 80013dc:	4603      	mov	r3, r0
 80013de:	617b      	str	r3, [r7, #20]
       if (maximum_payload_size == 0)
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d113      	bne.n	800140e <Gnss_ProcessUBX+0x6e>
       {
         if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
 80013e6:	4b98      	ldr	r3, [pc, #608]	; (8001648 <Gnss_ProcessUBX+0x2a8>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d103      	bne.n	80013f6 <Gnss_ProcessUBX+0x56>
 80013ee:	4b97      	ldr	r3, [pc, #604]	; (800164c <Gnss_ProcessUBX+0x2ac>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00b      	beq.n	800140e <Gnss_ProcessUBX+0x6e>
         {
           my_printf("processUBX: getMaxPayloadSize returned ZERO!! Class: 0x%02x ID: 0x%02X", incomingUBX_pst->cls_u8, incomingUBX_pst->id_u8);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4619      	mov	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	785b      	ldrb	r3, [r3, #1]
 8001400:	461a      	mov	r2, r3
 8001402:	4893      	ldr	r0, [pc, #588]	; (8001650 <Gnss_ProcessUBX+0x2b0>)
 8001404:	f7ff fa4a 	bl	800089c <my_printf>
 8001408:	e001      	b.n	800140e <Gnss_ProcessUBX+0x6e>
     //else
     //  maximum_payload_size = 2;
   }
   else
   {
     maximum_payload_size = 2;
 800140a:	2302      	movs	r3, #2
 800140c:	617b      	str	r3, [r7, #20]
   }

   bool overrun = false;
 800140e:	2300      	movs	r3, #0
 8001410:	74fb      	strb	r3, [r7, #19]

   //Add all incoming bytes to the rolling checksum
   //Stop at len+4 as this is the checksum bytes to that should not be added to the rolling checksum
   if (incomingUBX_pst->counter_u16 < incomingUBX_pst->len_u16 + 4)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	885b      	ldrh	r3, [r3, #2]
 8001416:	3303      	adds	r3, #3
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	8892      	ldrh	r2, [r2, #4]
 800141c:	4293      	cmp	r3, r2
 800141e:	db05      	blt.n	800142c <Gnss_ProcessUBX+0x8c>
   {
     gnss_pst->addToChecksum(gnss_pst, incoming_u8);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001424:	7afa      	ldrb	r2, [r7, #11]
 8001426:	4611      	mov	r1, r2
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	4798      	blx	r3
   }

   if (incomingUBX_pst->counter_u16 == 0)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	889b      	ldrh	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d103      	bne.n	800143c <Gnss_ProcessUBX+0x9c>
   {
     incomingUBX_pst->cls_u8 = incoming_u8;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	7afa      	ldrb	r2, [r7, #11]
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	e18c      	b.n	8001756 <Gnss_ProcessUBX+0x3b6>
   }
   else if (incomingUBX_pst->counter_u16 == 1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	889b      	ldrh	r3, [r3, #4]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d103      	bne.n	800144c <Gnss_ProcessUBX+0xac>
   {
       incomingUBX_pst->id_u8 = incoming_u8;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	7afa      	ldrb	r2, [r7, #11]
 8001448:	705a      	strb	r2, [r3, #1]
 800144a:	e184      	b.n	8001756 <Gnss_ProcessUBX+0x3b6>
   }
   else if (incomingUBX_pst->counter_u16 == 2) //Len LSB
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	889b      	ldrh	r3, [r3, #4]
 8001450:	2b02      	cmp	r3, #2
 8001452:	d104      	bne.n	800145e <Gnss_ProcessUBX+0xbe>
   {
       incomingUBX_pst->len_u16 = incoming_u8;
 8001454:	7afb      	ldrb	r3, [r7, #11]
 8001456:	b29a      	uxth	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	805a      	strh	r2, [r3, #2]
 800145c:	e17b      	b.n	8001756 <Gnss_ProcessUBX+0x3b6>
   }
   else if (incomingUBX_pst->counter_u16 == 3) //Len MSB
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	889b      	ldrh	r3, [r3, #4]
 8001462:	2b03      	cmp	r3, #3
 8001464:	d10b      	bne.n	800147e <Gnss_ProcessUBX+0xde>
   {
       incomingUBX_pst->len_u16 |= incoming_u8 << 8;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	885b      	ldrh	r3, [r3, #2]
 800146a:	b21a      	sxth	r2, r3
 800146c:	7afb      	ldrb	r3, [r7, #11]
 800146e:	021b      	lsls	r3, r3, #8
 8001470:	b21b      	sxth	r3, r3
 8001472:	4313      	orrs	r3, r2
 8001474:	b21b      	sxth	r3, r3
 8001476:	b29a      	uxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	805a      	strh	r2, [r3, #2]
 800147c:	e16b      	b.n	8001756 <Gnss_ProcessUBX+0x3b6>
   }
   else if (incomingUBX_pst->counter_u16 == incomingUBX_pst->len_u16 + 4) //ChecksumA
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	889b      	ldrh	r3, [r3, #4]
 8001482:	461a      	mov	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	885b      	ldrh	r3, [r3, #2]
 8001488:	3304      	adds	r3, #4
 800148a:	429a      	cmp	r2, r3
 800148c:	d103      	bne.n	8001496 <Gnss_ProcessUBX+0xf6>
   {
       incomingUBX_pst->checksumA_u8 = incoming_u8;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7afa      	ldrb	r2, [r7, #11]
 8001492:	731a      	strb	r2, [r3, #12]
 8001494:	e15f      	b.n	8001756 <Gnss_ProcessUBX+0x3b6>
   }
   else if (incomingUBX_pst->counter_u16 == incomingUBX_pst->len_u16 + 5) //ChecksumB
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	889b      	ldrh	r3, [r3, #4]
 800149a:	461a      	mov	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	885b      	ldrh	r3, [r3, #2]
 80014a0:	3305      	adds	r3, #5
 80014a2:	429a      	cmp	r2, r3
 80014a4:	f040 8124 	bne.w	80016f0 <Gnss_ProcessUBX+0x350>
   {
       incomingUBX_pst->checksumB_u8 = incoming_u8;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7afa      	ldrb	r2, [r7, #11]
 80014ac:	735a      	strb	r2, [r3, #13]

     gnss_pst->currentSentence_e = NONE; //We're done! Reset the sentence to being looking for a new start char
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2200      	movs	r2, #0
 80014b2:	721a      	strb	r2, [r3, #8]

     //Validate this sentence
     if ((incomingUBX_pst->checksumA_u8 == gnss_pst->rollingChecksumA_u8)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7b1a      	ldrb	r2, [r3, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	791b      	ldrb	r3, [r3, #4]
 80014bc:	429a      	cmp	r2, r3
 80014be:	f040 80b0 	bne.w	8001622 <Gnss_ProcessUBX+0x282>
             && (incomingUBX_pst->checksumB_u8 == gnss_pst->rollingChecksumB_u8))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7b5a      	ldrb	r2, [r3, #13]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	795b      	ldrb	r3, [r3, #5]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	f040 80a9 	bne.w	8001622 <Gnss_ProcessUBX+0x282>
     {
       incomingUBX_pst->valid_en = UBLOX_PACKET_VALIDITY_VALID; // Flag the packet as valid
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	739a      	strb	r2, [r3, #14]

       // Let's check if the class and ID match the requestedClass and requestedID
       // Remember - this could be a data packet or an ACK packet
       if ((incomingUBX_pst->cls_u8 == requestedClass_u8) && (incomingUBX_pst->id_u8 == requestedID_u8))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	7aba      	ldrb	r2, [r7, #10]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d109      	bne.n	80014f4 <Gnss_ProcessUBX+0x154>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	785b      	ldrb	r3, [r3, #1]
 80014e4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d103      	bne.n	80014f4 <Gnss_ProcessUBX+0x154>
       {
         incomingUBX_pst->classAndIDmatch_en = UBLOX_PACKET_VALIDITY_VALID; // If we have a match, set the classAndIDmatch flag to valid
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	73da      	strb	r2, [r3, #15]
 80014f2:	e05b      	b.n	80015ac <Gnss_ProcessUBX+0x20c>
       }

       // If this is an ACK then let's check if the class and ID match the requestedClass and requestedID
       else if ((incomingUBX_pst->cls_u8 == UBX_CLASS_ACK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b05      	cmp	r3, #5
 80014fa:	d115      	bne.n	8001528 <Gnss_ProcessUBX+0x188>
               && (incomingUBX_pst->id_u8 == UBX_ACK_ACK)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	785b      	ldrb	r3, [r3, #1]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d111      	bne.n	8001528 <Gnss_ProcessUBX+0x188>
               && (incomingUBX_pst->payload_pu8[0] == requestedClass_u8) && (incomingUBX_pst->payload_pu8[1] == requestedID_u8))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	7aba      	ldrb	r2, [r7, #10]
 800150c:	429a      	cmp	r2, r3
 800150e:	d10b      	bne.n	8001528 <Gnss_ProcessUBX+0x188>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	3301      	adds	r3, #1
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	f897 2020 	ldrb.w	r2, [r7, #32]
 800151c:	429a      	cmp	r2, r3
 800151e:	d103      	bne.n	8001528 <Gnss_ProcessUBX+0x188>
       {
         incomingUBX_pst->classAndIDmatch_en = UBLOX_PACKET_VALIDITY_VALID; // If we have a match, set the classAndIDmatch flag to valid
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	73da      	strb	r2, [r3, #15]
 8001526:	e041      	b.n	80015ac <Gnss_ProcessUBX+0x20c>
       }

       // If this is a NACK then let's check if the class and ID match the requestedClass and requestedID
       else if ((incomingUBX_pst->cls_u8 == UBX_CLASS_ACK) && (incomingUBX_pst->id_u8 == UBX_ACK_NACK)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b05      	cmp	r3, #5
 800152e:	d125      	bne.n	800157c <Gnss_ProcessUBX+0x1dc>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	785b      	ldrb	r3, [r3, #1]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d121      	bne.n	800157c <Gnss_ProcessUBX+0x1dc>
               && (incomingUBX_pst->payload_pu8[0] == requestedClass_u8) && (incomingUBX_pst->payload_pu8[1] == requestedID_u8))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	7aba      	ldrb	r2, [r7, #10]
 8001540:	429a      	cmp	r2, r3
 8001542:	d11b      	bne.n	800157c <Gnss_ProcessUBX+0x1dc>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	3301      	adds	r3, #1
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001550:	429a      	cmp	r2, r3
 8001552:	d113      	bne.n	800157c <Gnss_ProcessUBX+0x1dc>
       {
           incomingUBX_pst->classAndIDmatch_en = UBLOX_PACKET_NOTACKNOWLEDGED; // If we have a match, set the classAndIDmatch flag to NOTACKNOWLEDGED
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2203      	movs	r2, #3
 8001558:	73da      	strb	r2, [r3, #15]
         if (_printDebug == true)
 800155a:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <Gnss_ProcessUBX+0x2a8>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d024      	beq.n	80015ac <Gnss_ProcessUBX+0x20c>
         {
           my_printf("processUBX: NACK received: Requested Class: 0x%02x Requested ID: 0x%02x",
                   incomingUBX_pst->payload_pu8[0], incomingUBX_pst->payload_pu8[1]);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	781b      	ldrb	r3, [r3, #0]
           my_printf("processUBX: NACK received: Requested Class: 0x%02x Requested ID: 0x%02x",
 8001568:	4619      	mov	r1, r3
                   incomingUBX_pst->payload_pu8[0], incomingUBX_pst->payload_pu8[1]);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	3301      	adds	r3, #1
 8001570:	781b      	ldrb	r3, [r3, #0]
           my_printf("processUBX: NACK received: Requested Class: 0x%02x Requested ID: 0x%02x",
 8001572:	461a      	mov	r2, r3
 8001574:	4837      	ldr	r0, [pc, #220]	; (8001654 <Gnss_ProcessUBX+0x2b4>)
 8001576:	f7ff f991 	bl	800089c <my_printf>
         if (_printDebug == true)
 800157a:	e017      	b.n	80015ac <Gnss_ProcessUBX+0x20c>
         }
       }

       //This is not an ACK and we do not have a complete class and ID match
       //So let's check for an "automatic" message arriving
       else if (gnss_pst->checkAutomatic(gnss_pst, incomingUBX_pst->cls_u8, incomingUBX_pst->id_u8))
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	7811      	ldrb	r1, [r2, #0]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	7852      	ldrb	r2, [r2, #1]
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	4798      	blx	r3
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00c      	beq.n	80015ac <Gnss_ProcessUBX+0x20c>
       {
         // This isn't the message we are looking for...
         // Let's say so and leave incomingUBX->classAndIDmatch _unchanged_
         if (_printDebug == true)
 8001592:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <Gnss_ProcessUBX+0x2a8>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d008      	beq.n	80015ac <Gnss_ProcessUBX+0x20c>
         {
           my_printf("processUBX: incoming \"automatic\" message: Class: 0x%02x ID: 0x", incomingUBX_pst->cls_u8, incomingUBX_pst->id_u8);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	4619      	mov	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	785b      	ldrb	r3, [r3, #1]
 80015a4:	461a      	mov	r2, r3
 80015a6:	482c      	ldr	r0, [pc, #176]	; (8001658 <Gnss_ProcessUBX+0x2b8>)
 80015a8:	f7ff f978 	bl	800089c <my_printf>
         }
       }

       if (_printDebug == true)
 80015ac:	4b26      	ldr	r3, [pc, #152]	; (8001648 <Gnss_ProcessUBX+0x2a8>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d028      	beq.n	8001606 <Gnss_ProcessUBX+0x266>
       {
           my_printf("Incoming: Size: %d Received: ", incomingUBX_pst->len_u16);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	885b      	ldrh	r3, [r3, #2]
 80015b8:	4619      	mov	r1, r3
 80015ba:	4828      	ldr	r0, [pc, #160]	; (800165c <Gnss_ProcessUBX+0x2bc>)
 80015bc:	f7ff f96e 	bl	800089c <my_printf>

           gnss_pst->printPacket(gnss_pst, incomingUBX_pst, false);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015c6:	2200      	movs	r2, #0
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	4798      	blx	r3

         if (incomingUBX_pst->valid_en == UBLOX_PACKET_VALIDITY_VALID)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	7b9b      	ldrb	r3, [r3, #14]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d102      	bne.n	80015dc <Gnss_ProcessUBX+0x23c>
         {
           my_printf("packetCfg now valid");
 80015d6:	4822      	ldr	r0, [pc, #136]	; (8001660 <Gnss_ProcessUBX+0x2c0>)
 80015d8:	f7ff f960 	bl	800089c <my_printf>
         }
         if (packetAck_st.valid_en == UBLOX_PACKET_VALIDITY_VALID)
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <Gnss_ProcessUBX+0x2c4>)
 80015de:	7b9b      	ldrb	r3, [r3, #14]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d102      	bne.n	80015ea <Gnss_ProcessUBX+0x24a>
         {
             my_printf("packetAck now valid");
 80015e4:	4820      	ldr	r0, [pc, #128]	; (8001668 <Gnss_ProcessUBX+0x2c8>)
 80015e6:	f7ff f959 	bl	800089c <my_printf>
         }
         if (incomingUBX_pst->classAndIDmatch_en == UBLOX_PACKET_VALIDITY_VALID)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7bdb      	ldrb	r3, [r3, #15]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d102      	bne.n	80015f8 <Gnss_ProcessUBX+0x258>
         {
             my_printf("packetCfg classAndIDmatch");
 80015f2:	481e      	ldr	r0, [pc, #120]	; (800166c <Gnss_ProcessUBX+0x2cc>)
 80015f4:	f7ff f952 	bl	800089c <my_printf>
         }
         if (packetAck_st.classAndIDmatch_en == UBLOX_PACKET_VALIDITY_VALID)
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <Gnss_ProcessUBX+0x2c4>)
 80015fa:	7bdb      	ldrb	r3, [r3, #15]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d102      	bne.n	8001606 <Gnss_ProcessUBX+0x266>
         {
             my_printf("packetAck classAndIDmatch");
 8001600:	481b      	ldr	r0, [pc, #108]	; (8001670 <Gnss_ProcessUBX+0x2d0>)
 8001602:	f7ff f94b 	bl	800089c <my_printf>
         }
       }

       //We've got a valid packet, now do something with it but only if ignoreThisPayload is false
       if (gnss_pst->ignoreThisPayload_b == false)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	799b      	ldrb	r3, [r3, #6]
 800160a:	f083 0301 	eor.w	r3, r3, #1
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	d05c      	beq.n	80016ce <Gnss_ProcessUBX+0x32e>
       {
           gnss_pst->processUBXpacket(gnss_pst, incomingUBX_pst);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	4798      	blx	r3
       if (gnss_pst->ignoreThisPayload_b == false)
 8001620:	e055      	b.n	80016ce <Gnss_ProcessUBX+0x32e>
       }
     }
     else // Checksum failure
     {
       incomingUBX_pst->valid_en = UBLOX_PACKET_VALIDITY_NOT_VALID;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	739a      	strb	r2, [r3, #14]

       // Let's check if the class and ID match the requestedClass and requestedID.
       // This is potentially risky as we are saying that we saw the requested Class and ID
       // but that the packet checksum failed. Potentially it could be the class or ID bytes
       // that caused the checksum error!
       if ((incomingUBX_pst->cls_u8 == requestedClass_u8) && (incomingUBX_pst->id_u8 == requestedID_u8))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	7aba      	ldrb	r2, [r7, #10]
 800162e:	429a      	cmp	r2, r3
 8001630:	d120      	bne.n	8001674 <Gnss_ProcessUBX+0x2d4>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	785b      	ldrb	r3, [r3, #1]
 8001636:	f897 2020 	ldrb.w	r2, [r7, #32]
 800163a:	429a      	cmp	r2, r3
 800163c:	d11a      	bne.n	8001674 <Gnss_ProcessUBX+0x2d4>
       {
         incomingUBX_pst->classAndIDmatch_en = UBLOX_PACKET_VALIDITY_NOT_VALID; // If we have a match, set the classAndIDmatch flag to not valid
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	73da      	strb	r2, [r3, #15]
 8001644:	e02b      	b.n	800169e <Gnss_ProcessUBX+0x2fe>
 8001646:	bf00      	nop
 8001648:	20000000 	.word	0x20000000
 800164c:	20000001 	.word	0x20000001
 8001650:	08006058 	.word	0x08006058
 8001654:	080060a0 	.word	0x080060a0
 8001658:	080060e8 	.word	0x080060e8
 800165c:	08006128 	.word	0x08006128
 8001660:	08006148 	.word	0x08006148
 8001664:	20000014 	.word	0x20000014
 8001668:	0800615c 	.word	0x0800615c
 800166c:	08006170 	.word	0x08006170
 8001670:	0800618c 	.word	0x0800618c
       }
       // If this is an ACK then let's check if the class and ID match the requestedClass and requestedID
       else if ((incomingUBX_pst->cls_u8 == UBX_CLASS_ACK) && (incomingUBX_pst->payload_pu8[0] == requestedClass_u8)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b05      	cmp	r3, #5
 800167a:	d110      	bne.n	800169e <Gnss_ProcessUBX+0x2fe>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	7aba      	ldrb	r2, [r7, #10]
 8001684:	429a      	cmp	r2, r3
 8001686:	d10a      	bne.n	800169e <Gnss_ProcessUBX+0x2fe>
               && (incomingUBX_pst->payload_pu8[1] == requestedID_u8))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	3301      	adds	r3, #1
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001694:	429a      	cmp	r2, r3
 8001696:	d102      	bne.n	800169e <Gnss_ProcessUBX+0x2fe>
       {
         incomingUBX_pst->classAndIDmatch_en = UBLOX_PACKET_VALIDITY_NOT_VALID; // If we have a match, set the classAndIDmatch flag to not valid
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	73da      	strb	r2, [r3, #15]
       }

       if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
 800169e:	4b48      	ldr	r3, [pc, #288]	; (80017c0 <Gnss_ProcessUBX+0x420>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d103      	bne.n	80016ae <Gnss_ProcessUBX+0x30e>
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <Gnss_ProcessUBX+0x424>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00f      	beq.n	80016ce <Gnss_ProcessUBX+0x32e>
//           delay(10);
//           digitalWrite((uint8_t)debugPin, HIGH);
//         }

         my_printf("Checksum failed: checksumA: %02x checksumB: %02x rollingChecksumA: 0x%02x rollingChecksumB: 0x%02x",
                 incomingUBX_pst->checksumA_u8, incomingUBX_pst->checksumB_u8,
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	7b1b      	ldrb	r3, [r3, #12]
         my_printf("Checksum failed: checksumA: %02x checksumB: %02x rollingChecksumA: 0x%02x rollingChecksumB: 0x%02x",
 80016b2:	4619      	mov	r1, r3
                 incomingUBX_pst->checksumA_u8, incomingUBX_pst->checksumB_u8,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7b5b      	ldrb	r3, [r3, #13]
         my_printf("Checksum failed: checksumA: %02x checksumB: %02x rollingChecksumA: 0x%02x rollingChecksumB: 0x%02x",
 80016b8:	461a      	mov	r2, r3
                 gnss_pst->rollingChecksumA_u8, gnss_pst->rollingChecksumB_u8);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	791b      	ldrb	r3, [r3, #4]
         my_printf("Checksum failed: checksumA: %02x checksumB: %02x rollingChecksumA: 0x%02x rollingChecksumB: 0x%02x",
 80016be:	4618      	mov	r0, r3
                 gnss_pst->rollingChecksumA_u8, gnss_pst->rollingChecksumB_u8);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	795b      	ldrb	r3, [r3, #5]
         my_printf("Checksum failed: checksumA: %02x checksumB: %02x rollingChecksumA: 0x%02x rollingChecksumB: 0x%02x",
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	4603      	mov	r3, r0
 80016c8:	483f      	ldr	r0, [pc, #252]	; (80017c8 <Gnss_ProcessUBX+0x428>)
 80016ca:	f7ff f8e7 	bl	800089c <my_printf>
       }
     }

     // Now that the packet is complete and has been processed, we need to delete the memory
     // allocated for packetAuto
     if (gnss_pst->activePacketBuffer_e == UBLOX_PACKET_PACKETAUTO)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	79db      	ldrb	r3, [r3, #7]
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d13f      	bne.n	8001756 <Gnss_ProcessUBX+0x3b6>
     {
       free(payloadAuto_pu8);
 80016d6:	4b3d      	ldr	r3, [pc, #244]	; (80017cc <Gnss_ProcessUBX+0x42c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f003 fa12 	bl	8004b04 <free>
       payloadAuto_pu8 = NULL; // Redundant?
 80016e0:	4b3a      	ldr	r3, [pc, #232]	; (80017cc <Gnss_ProcessUBX+0x42c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
       packetAuto_st.payload_pu8 = payloadAuto_pu8;
 80016e6:	4b39      	ldr	r3, [pc, #228]	; (80017cc <Gnss_ProcessUBX+0x42c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a39      	ldr	r2, [pc, #228]	; (80017d0 <Gnss_ProcessUBX+0x430>)
 80016ec:	6093      	str	r3, [r2, #8]
 80016ee:	e032      	b.n	8001756 <Gnss_ProcessUBX+0x3b6>
     }
   }
   else //Load this byte into the payload array
   {
     //If an automatic packet comes in asynchronously, we need to fudge the startingSpot
     uint16_t startingSpot = incomingUBX_pst->startingSpot_u16;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	88db      	ldrh	r3, [r3, #6]
 80016f4:	823b      	strh	r3, [r7, #16]
     if (gnss_pst->checkAutomatic(gnss_pst, incomingUBX_pst->cls_u8, incomingUBX_pst->id_u8))
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	7811      	ldrb	r1, [r2, #0]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	7852      	ldrb	r2, [r2, #1]
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	4798      	blx	r3
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <Gnss_ProcessUBX+0x370>
     {
       startingSpot = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	823b      	strh	r3, [r7, #16]
     }
     // Check if this is payload data which should be ignored
     if (gnss_pst->ignoreThisPayload_b == false)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	799b      	ldrb	r3, [r3, #6]
 8001714:	f083 0301 	eor.w	r3, r3, #1
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d01b      	beq.n	8001756 <Gnss_ProcessUBX+0x3b6>
     {
       //Begin recording if counter goes past startingSpot
       if ((incomingUBX_pst->counter_u16 - 4) >= startingSpot)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	889b      	ldrh	r3, [r3, #4]
 8001722:	1eda      	subs	r2, r3, #3
 8001724:	8a3b      	ldrh	r3, [r7, #16]
 8001726:	429a      	cmp	r2, r3
 8001728:	dd15      	ble.n	8001756 <Gnss_ProcessUBX+0x3b6>
       {
         //Check to see if we have room for this byte
         if (((incomingUBX_pst->counter_u16 - 4) - startingSpot) < maximum_payload_size) //If counter = 208, starting spot = 200, we're good to record.
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	889b      	ldrh	r3, [r3, #4]
 800172e:	1f1a      	subs	r2, r3, #4
 8001730:	8a3b      	ldrh	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	461a      	mov	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	4293      	cmp	r3, r2
 800173a:	d90a      	bls.n	8001752 <Gnss_ProcessUBX+0x3b2>
         {
           incomingUBX_pst->payload_pu8[(incomingUBX_pst->counter_u16 - 4) - startingSpot] = incoming_u8; //Store this byte into payload array
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	8892      	ldrh	r2, [r2, #4]
 8001744:	1f11      	subs	r1, r2, #4
 8001746:	8a3a      	ldrh	r2, [r7, #16]
 8001748:	1a8a      	subs	r2, r1, r2
 800174a:	4413      	add	r3, r2
 800174c:	7afa      	ldrb	r2, [r7, #11]
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	e001      	b.n	8001756 <Gnss_ProcessUBX+0x3b6>
         }
         else
         {
           overrun = true;
 8001752:	2301      	movs	r3, #1
 8001754:	74fb      	strb	r3, [r7, #19]
       }
     }
   }

   // incomingUBX->counter should never reach maximum_payload_size + class + id + len[2] + checksum[2]
   if (overrun || ((incomingUBX_pst->counter_u16 == maximum_payload_size + 6) && (gnss_pst->ignoreThisPayload_b == false)))
 8001756:	7cfb      	ldrb	r3, [r7, #19]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10d      	bne.n	8001778 <Gnss_ProcessUBX+0x3d8>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	889b      	ldrh	r3, [r3, #4]
 8001760:	461a      	mov	r2, r3
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3306      	adds	r3, #6
 8001766:	429a      	cmp	r2, r3
 8001768:	d125      	bne.n	80017b6 <Gnss_ProcessUBX+0x416>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	799b      	ldrb	r3, [r3, #6]
 800176e:	f083 0301 	eor.w	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d01e      	beq.n	80017b6 <Gnss_ProcessUBX+0x416>
   {
     //Something has gone very wrong
       gnss_pst->currentSentence_e = NONE; //Reset the sentence to being looking for a new start char
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	721a      	strb	r2, [r3, #8]
     if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <Gnss_ProcessUBX+0x420>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d103      	bne.n	800178e <Gnss_ProcessUBX+0x3ee>
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <Gnss_ProcessUBX+0x424>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00d      	beq.n	80017aa <Gnss_ProcessUBX+0x40a>
     {
       if (overrun)
 800178e:	7cfb      	ldrb	r3, [r7, #19]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <Gnss_ProcessUBX+0x3fc>
       {
         my_printf("processUBX: buffer overrun detected!");
 8001794:	480f      	ldr	r0, [pc, #60]	; (80017d4 <Gnss_ProcessUBX+0x434>)
 8001796:	f7ff f881 	bl	800089c <my_printf>
 800179a:	e006      	b.n	80017aa <Gnss_ProcessUBX+0x40a>
       }
       else
       {
         my_printf("processUBX: counter hit maximum_payload_size + 6! activePacketBuffer: %d maximum_payload_size: %d",
                 gnss_pst->activePacketBuffer_e, maximum_payload_size);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	79db      	ldrb	r3, [r3, #7]
         my_printf("processUBX: counter hit maximum_payload_size + 6! activePacketBuffer: %d maximum_payload_size: %d",
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	4619      	mov	r1, r3
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <Gnss_ProcessUBX+0x438>)
 80017a6:	f7ff f879 	bl	800089c <my_printf>
       }
     }

   //Increment the counter
   incomingUBX_pst->counter_u16++;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	889b      	ldrh	r3, [r3, #4]
 80017ae:	3301      	adds	r3, #1
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	809a      	strh	r2, [r3, #4]

   }
}
 80017b6:	bf00      	nop
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000000 	.word	0x20000000
 80017c4:	20000001 	.word	0x20000001
 80017c8:	080061a8 	.word	0x080061a8
 80017cc:	200000e4 	.word	0x200000e4
 80017d0:	20000034 	.word	0x20000034
 80017d4:	0800620c 	.word	0x0800620c
 80017d8:	08006234 	.word	0x08006234

080017dc <Gnss_Process>:

void Gnss_Process(struct Ublox_Gnss *gnss_pst, uint8_t incoming_u8, Ubx_Packet_tst *incomingUBX_pst, uint8_t requestedClass_u8, uint8_t requestedID_u8)
{
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	461a      	mov	r2, r3
 80017e8:	460b      	mov	r3, r1
 80017ea:	72fb      	strb	r3, [r7, #11]
 80017ec:	4613      	mov	r3, r2
 80017ee:	72bb      	strb	r3, [r7, #10]
    testBuff[count] = incoming_u8;
 80017f0:	4b9a      	ldr	r3, [pc, #616]	; (8001a5c <Gnss_Process+0x280>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	499a      	ldr	r1, [pc, #616]	; (8001a60 <Gnss_Process+0x284>)
 80017f6:	7afa      	ldrb	r2, [r7, #11]
 80017f8:	54ca      	strb	r2, [r1, r3]
    count++;
 80017fa:	4b98      	ldr	r3, [pc, #608]	; (8001a5c <Gnss_Process+0x280>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	4a96      	ldr	r2, [pc, #600]	; (8001a5c <Gnss_Process+0x280>)
 8001802:	6013      	str	r3, [r2, #0]
//    if(gnss_pst->currentSentence_e == UBX)
//        my_printf("incom 0x%02x", incoming_u8);
    if ((gnss_pst->currentSentence_e == NONE) || (gnss_pst->currentSentence_e == NMEA))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	7a1b      	ldrb	r3, [r3, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <Gnss_Process+0x38>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	7a1b      	ldrb	r3, [r3, #8]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d122      	bne.n	800185a <Gnss_Process+0x7e>
    {
        if (incoming_u8 == 0xB5) //UBX binary frames start with 0xB5, aka μ
 8001814:	7afb      	ldrb	r3, [r7, #11]
 8001816:	2bb5      	cmp	r3, #181	; 0xb5
 8001818:	d10f      	bne.n	800183a <Gnss_Process+0x5e>
        {
          //This is the start of a binary sentence. Reset flags.
          //We still don't know the response class
            gnss_pst->ubxFrameCounter_u16 = 0;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	805a      	strh	r2, [r3, #2]
            gnss_pst->currentSentence_e = UBX;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2202      	movs	r2, #2
 8001824:	721a      	strb	r2, [r3, #8]
            //Reset the packetBuf.counter even though we will need to reset it again when ubxFrameCounter == 2
            packetBuf_st.counter_u16 = 0;
 8001826:	4b8f      	ldr	r3, [pc, #572]	; (8001a64 <Gnss_Process+0x288>)
 8001828:	2200      	movs	r2, #0
 800182a:	809a      	strh	r2, [r3, #4]
            gnss_pst->ignoreThisPayload_b = false; //We should not ignore this payload - yet
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	719a      	strb	r2, [r3, #6]
          //Store data in packetBuf until we know if we have a requested class and ID match
            gnss_pst->activePacketBuffer_e = UBLOX_PACKET_PACKETBUF;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2202      	movs	r2, #2
 8001836:	71da      	strb	r2, [r3, #7]
 8001838:	e00f      	b.n	800185a <Gnss_Process+0x7e>
        }
        else if (incoming_u8 == '$')
 800183a:	7afb      	ldrb	r3, [r7, #11]
 800183c:	2b24      	cmp	r3, #36	; 0x24
 800183e:	d103      	bne.n	8001848 <Gnss_Process+0x6c>
        {
            gnss_pst->currentSentence_e = NMEA;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2201      	movs	r2, #1
 8001844:	721a      	strb	r2, [r3, #8]
 8001846:	e008      	b.n	800185a <Gnss_Process+0x7e>
        }
        else if (incoming_u8 == 0xD3) //RTCM frames start with 0xD3
 8001848:	7afb      	ldrb	r3, [r7, #11]
 800184a:	2bd3      	cmp	r3, #211	; 0xd3
 800184c:	d105      	bne.n	800185a <Gnss_Process+0x7e>
        {
            gnss_pst->rtcmFrameCounter_u16 = 0;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	801a      	strh	r2, [r3, #0]
          gnss_pst->currentSentence_e = RTCM;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2203      	movs	r2, #3
 8001858:	721a      	strb	r2, [r3, #8]
          //This character is unknown or we missed the previous start of a sentence
        }
    }

    //Depending on the sentence, pass the character to the individual processor
    if (gnss_pst->currentSentence_e == UBX)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	7a1b      	ldrb	r3, [r3, #8]
 800185e:	2b02      	cmp	r3, #2
 8001860:	f040 81fd 	bne.w	8001c5e <Gnss_Process+0x482>
    {
        //Decide what type of response this is
        if ((gnss_pst->ubxFrameCounter_u16 == 0) && (incoming_u8 != 0xB5))      //ISO 'μ'
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	885b      	ldrh	r3, [r3, #2]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d106      	bne.n	800187a <Gnss_Process+0x9e>
 800186c:	7afb      	ldrb	r3, [r7, #11]
 800186e:	2bb5      	cmp	r3, #181	; 0xb5
 8001870:	d003      	beq.n	800187a <Gnss_Process+0x9e>
        {
            gnss_pst->currentSentence_e = NONE;                              //Something went wrong. Reset.
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	721a      	strb	r2, [r3, #8]
 8001878:	e1af      	b.n	8001bda <Gnss_Process+0x3fe>
        }
        else if ((gnss_pst->ubxFrameCounter_u16 == 1) && (incoming_u8 != 0x62)) //ASCII 'b'
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	885b      	ldrh	r3, [r3, #2]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d106      	bne.n	8001890 <Gnss_Process+0xb4>
 8001882:	7afb      	ldrb	r3, [r7, #11]
 8001884:	2b62      	cmp	r3, #98	; 0x62
 8001886:	d003      	beq.n	8001890 <Gnss_Process+0xb4>
        {
            gnss_pst->currentSentence_e = NONE;                              //Something went wrong. Reset.
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	721a      	strb	r2, [r3, #8]
 800188e:	e1a4      	b.n	8001bda <Gnss_Process+0x3fe>
        }
        // Note to future self:
        // There may be some duplication / redundancy in the next few lines as processUBX will also
        // load information into packetBuf, but we'll do it here too for clarity
        else if (gnss_pst->ubxFrameCounter_u16 == 2) //Class
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	885b      	ldrh	r3, [r3, #2]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d113      	bne.n	80018c0 <Gnss_Process+0xe4>
        {
          // Record the class in packetBuf until we know what to do with it
          packetBuf_st.cls_u8 = incoming_u8; // (Duplication)
 8001898:	4a72      	ldr	r2, [pc, #456]	; (8001a64 <Gnss_Process+0x288>)
 800189a:	7afb      	ldrb	r3, [r7, #11]
 800189c:	7013      	strb	r3, [r2, #0]
          gnss_pst->rollingChecksumA_u8 = 0;     //Reset our rolling checksums here (not when we receive the 0xB5)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	711a      	strb	r2, [r3, #4]
          gnss_pst->rollingChecksumB_u8 = 0;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	715a      	strb	r2, [r3, #5]
          packetBuf_st.counter_u16 = 0;                                   //Reset the packetBuf.counter (again)
 80018aa:	4b6e      	ldr	r3, [pc, #440]	; (8001a64 <Gnss_Process+0x288>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	809a      	strh	r2, [r3, #4]
          packetBuf_st.valid_en = UBLOX_PACKET_VALIDITY_NOT_DEFINED; // Reset the packet validity (redundant?)
 80018b0:	4b6c      	ldr	r3, [pc, #432]	; (8001a64 <Gnss_Process+0x288>)
 80018b2:	2202      	movs	r2, #2
 80018b4:	739a      	strb	r2, [r3, #14]
          packetBuf_st.startingSpot_u16 = incomingUBX_pst->startingSpot_u16;      //Copy the startingSpot
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	88da      	ldrh	r2, [r3, #6]
 80018ba:	4b6a      	ldr	r3, [pc, #424]	; (8001a64 <Gnss_Process+0x288>)
 80018bc:	80da      	strh	r2, [r3, #6]
 80018be:	e18c      	b.n	8001bda <Gnss_Process+0x3fe>
        }
        else if (gnss_pst->ubxFrameCounter_u16 == 3) //ID
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	885b      	ldrh	r3, [r3, #2]
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	f040 80e3 	bne.w	8001a90 <Gnss_Process+0x2b4>
        {
            // Record the ID in packetBuf until we know what to do with it
            packetBuf_st.id_u8 = incoming_u8; // (Duplication)
 80018ca:	4a66      	ldr	r2, [pc, #408]	; (8001a64 <Gnss_Process+0x288>)
 80018cc:	7afb      	ldrb	r3, [r7, #11]
 80018ce:	7053      	strb	r3, [r2, #1]
            //We can now identify the type of response
            //If the packet we are receiving is not an ACK then check for a class and ID match
            if (packetBuf_st.cls_u8 != UBX_CLASS_ACK)
 80018d0:	4b64      	ldr	r3, [pc, #400]	; (8001a64 <Gnss_Process+0x288>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b05      	cmp	r3, #5
 80018d6:	f000 8180 	beq.w	8001bda <Gnss_Process+0x3fe>
            {
                //This is not an ACK so check for a class and ID match
                if ((packetBuf_st.cls_u8 == requestedClass_u8) && (packetBuf_st.id_u8 == requestedID_u8))
 80018da:	4b62      	ldr	r3, [pc, #392]	; (8001a64 <Gnss_Process+0x288>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	7aba      	ldrb	r2, [r7, #10]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d115      	bne.n	8001910 <Gnss_Process+0x134>
 80018e4:	4b5f      	ldr	r3, [pc, #380]	; (8001a64 <Gnss_Process+0x288>)
 80018e6:	785b      	ldrb	r3, [r3, #1]
 80018e8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d10f      	bne.n	8001910 <Gnss_Process+0x134>
                {
                    //This is not an ACK and we have a class and ID match
                    //So start diverting data into incomingUBX (usually packetCfg)
                    gnss_pst->activePacketBuffer_e = UBLOX_PACKET_PACKETCFG;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	71da      	strb	r2, [r3, #7]
                    incomingUBX_pst->cls_u8 = packetBuf_st.cls_u8; //Copy the class and ID into incomingUBX (usually packetCfg)
 80018f6:	4b5b      	ldr	r3, [pc, #364]	; (8001a64 <Gnss_Process+0x288>)
 80018f8:	781a      	ldrb	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	701a      	strb	r2, [r3, #0]
                    incomingUBX_pst->id_u8 = packetBuf_st.id_u8;
 80018fe:	4b59      	ldr	r3, [pc, #356]	; (8001a64 <Gnss_Process+0x288>)
 8001900:	785a      	ldrb	r2, [r3, #1]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	705a      	strb	r2, [r3, #1]
                    incomingUBX_pst->counter_u16 = packetBuf_st.counter_u16; //Copy over the .counter too
 8001906:	4b57      	ldr	r3, [pc, #348]	; (8001a64 <Gnss_Process+0x288>)
 8001908:	889a      	ldrh	r2, [r3, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	809a      	strh	r2, [r3, #4]
 800190e:	e164      	b.n	8001bda <Gnss_Process+0x3fe>
                }
                //This is not an ACK and we do not have a complete class and ID match
                //So let's check if this is an "automatic" message which has its own storage defined
                else if (gnss_pst->checkAutomatic(gnss_pst, packetBuf_st.cls_u8, packetBuf_st.id_u8))
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001914:	4a53      	ldr	r2, [pc, #332]	; (8001a64 <Gnss_Process+0x288>)
 8001916:	7811      	ldrb	r1, [r2, #0]
 8001918:	4a52      	ldr	r2, [pc, #328]	; (8001a64 <Gnss_Process+0x288>)
 800191a:	7852      	ldrb	r2, [r2, #1]
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	4798      	blx	r3
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 8096 	beq.w	8001a54 <Gnss_Process+0x278>
                {
                    //This is not the message we were expecting but it has its own storage and so we should process it anyway.
                    //We'll try to use packetAuto to buffer the message (so it can't overwrite anything in packetCfg).
                    //We need to allocate memory for the packetAuto payload (payloadAuto) - and delete it once
                    //reception is complete.
                    uint16_t maxPayload = gnss_pst->getMaxPayloadSize(gnss_pst, packetBuf_st.cls_u8, packetBuf_st.id_u8); // Calculate how much RAM we need
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800192c:	4a4d      	ldr	r2, [pc, #308]	; (8001a64 <Gnss_Process+0x288>)
 800192e:	7811      	ldrb	r1, [r2, #0]
 8001930:	4a4c      	ldr	r2, [pc, #304]	; (8001a64 <Gnss_Process+0x288>)
 8001932:	7852      	ldrb	r2, [r2, #1]
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	4798      	blx	r3
 8001938:	4603      	mov	r3, r0
 800193a:	82fb      	strh	r3, [r7, #22]
                    if (maxPayload == 0)
 800193c:	8afb      	ldrh	r3, [r7, #22]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d117      	bne.n	8001972 <Gnss_Process+0x196>
                    {
                        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
 8001942:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <Gnss_Process+0x28c>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d103      	bne.n	8001952 <Gnss_Process+0x176>
 800194a:	4b48      	ldr	r3, [pc, #288]	; (8001a6c <Gnss_Process+0x290>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00f      	beq.n	8001972 <Gnss_Process+0x196>
                        {
                            my_printf(("process: getMaxPayloadSize returned ZERO!! Class: 0x"));
 8001952:	4847      	ldr	r0, [pc, #284]	; (8001a70 <Gnss_Process+0x294>)
 8001954:	f7fe ffa2 	bl	800089c <my_printf>
                            my_printf(packetBuf_st.cls_u8);
 8001958:	4b42      	ldr	r3, [pc, #264]	; (8001a64 <Gnss_Process+0x288>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe ff9d 	bl	800089c <my_printf>
                            my_printf((" ID: 0x"));
 8001962:	4844      	ldr	r0, [pc, #272]	; (8001a74 <Gnss_Process+0x298>)
 8001964:	f7fe ff9a 	bl	800089c <my_printf>
                            my_printf(packetBuf_st.id_u8);
 8001968:	4b3e      	ldr	r3, [pc, #248]	; (8001a64 <Gnss_Process+0x288>)
 800196a:	785b      	ldrb	r3, [r3, #1]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe ff95 	bl	800089c <my_printf>
                        }
                    }
                    if (payloadAuto_pu8 != NULL) // Check if memory is already allocated - this should be impossible!
 8001972:	4b41      	ldr	r3, [pc, #260]	; (8001a78 <Gnss_Process+0x29c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d016      	beq.n	80019a8 <Gnss_Process+0x1cc>
                    {
                        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
 800197a:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <Gnss_Process+0x28c>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d103      	bne.n	800198a <Gnss_Process+0x1ae>
 8001982:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <Gnss_Process+0x290>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <Gnss_Process+0x1b4>
                        {
                            my_printf("process: memory is already allocated for payloadAuto! Deleting...");
 800198a:	483c      	ldr	r0, [pc, #240]	; (8001a7c <Gnss_Process+0x2a0>)
 800198c:	f7fe ff86 	bl	800089c <my_printf>
                        }
                        free(payloadAuto_pu8);
 8001990:	4b39      	ldr	r3, [pc, #228]	; (8001a78 <Gnss_Process+0x29c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f003 f8b5 	bl	8004b04 <free>
                        payloadAuto_pu8 = NULL; // Redundant?
 800199a:	4b37      	ldr	r3, [pc, #220]	; (8001a78 <Gnss_Process+0x29c>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
                        packetAuto_st.payload_pu8 = payloadAuto_pu8;
 80019a0:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <Gnss_Process+0x29c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a36      	ldr	r2, [pc, #216]	; (8001a80 <Gnss_Process+0x2a4>)
 80019a6:	6093      	str	r3, [r2, #8]
                    }
                    payloadAuto_pu8 = malloc(maxPayload); // Allocate RAM for payloadAuto
 80019a8:	8afb      	ldrh	r3, [r7, #22]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f003 f8a2 	bl	8004af4 <malloc>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <Gnss_Process+0x29c>)
 80019b6:	601a      	str	r2, [r3, #0]
                    packetAuto_st.payload_pu8 = payloadAuto_pu8;
 80019b8:	4b2f      	ldr	r3, [pc, #188]	; (8001a78 <Gnss_Process+0x29c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a30      	ldr	r2, [pc, #192]	; (8001a80 <Gnss_Process+0x2a4>)
 80019be:	6093      	str	r3, [r2, #8]
                    if (payloadAuto_pu8 == NULL) // Check if the alloc failed
 80019c0:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <Gnss_Process+0x29c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d123      	bne.n	8001a10 <Gnss_Process+0x234>
                    {
                        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
 80019c8:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <Gnss_Process+0x28c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d103      	bne.n	80019d8 <Gnss_Process+0x1fc>
 80019d0:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <Gnss_Process+0x290>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00b      	beq.n	80019f0 <Gnss_Process+0x214>
                        {
                            my_printf("process: memory allocation failed for \"automatic\" message: Class: 0x%x ID: 0x%x",
                                    packetBuf_st.cls_u8, packetBuf_st.id_u8);
 80019d8:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <Gnss_Process+0x288>)
 80019da:	781b      	ldrb	r3, [r3, #0]
                            my_printf("process: memory allocation failed for \"automatic\" message: Class: 0x%x ID: 0x%x",
 80019dc:	4619      	mov	r1, r3
                                    packetBuf_st.cls_u8, packetBuf_st.id_u8);
 80019de:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <Gnss_Process+0x288>)
 80019e0:	785b      	ldrb	r3, [r3, #1]
                            my_printf("process: memory allocation failed for \"automatic\" message: Class: 0x%x ID: 0x%x",
 80019e2:	461a      	mov	r2, r3
 80019e4:	4827      	ldr	r0, [pc, #156]	; (8001a84 <Gnss_Process+0x2a8>)
 80019e6:	f7fe ff59 	bl	800089c <my_printf>
                            my_printf("process: \"automatic\" message could overwrite data");
 80019ea:	4827      	ldr	r0, [pc, #156]	; (8001a88 <Gnss_Process+0x2ac>)
 80019ec:	f7fe ff56 	bl	800089c <my_printf>
                        }
                        // The RAM allocation failed so fall back to using incomingUBX (usually packetCfg) even though we risk overwriting data
                        gnss_pst->activePacketBuffer_e = UBLOX_PACKET_PACKETCFG;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	71da      	strb	r2, [r3, #7]
                        incomingUBX_pst->cls_u8 = packetBuf_st.cls_u8; //Copy the class and ID into incomingUBX (usually packetCfg)
 80019f6:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <Gnss_Process+0x288>)
 80019f8:	781a      	ldrb	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	701a      	strb	r2, [r3, #0]
                        incomingUBX_pst->id_u8 = packetBuf_st.id_u8;
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <Gnss_Process+0x288>)
 8001a00:	785a      	ldrb	r2, [r3, #1]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	705a      	strb	r2, [r3, #1]
                        incomingUBX_pst->counter_u16 = packetBuf_st.counter_u16; //Copy over the .counter too
 8001a06:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <Gnss_Process+0x288>)
 8001a08:	889a      	ldrh	r2, [r3, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	809a      	strh	r2, [r3, #4]
 8001a0e:	e0e4      	b.n	8001bda <Gnss_Process+0x3fe>
                    }
                    else
                    {
                        //The RAM allocation was successful so we start diverting data into packetAuto and process it
                        gnss_pst->activePacketBuffer_e = UBLOX_PACKET_PACKETAUTO;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2203      	movs	r2, #3
 8001a14:	71da      	strb	r2, [r3, #7]
                        packetAuto_st.cls_u8 = packetBuf_st.cls_u8; //Copy the class and ID into packetAuto
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <Gnss_Process+0x288>)
 8001a18:	781a      	ldrb	r2, [r3, #0]
 8001a1a:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <Gnss_Process+0x2a4>)
 8001a1c:	701a      	strb	r2, [r3, #0]
                        packetAuto_st.id_u8 = packetBuf_st.id_u8;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <Gnss_Process+0x288>)
 8001a20:	785a      	ldrb	r2, [r3, #1]
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <Gnss_Process+0x2a4>)
 8001a24:	705a      	strb	r2, [r3, #1]
                        packetAuto_st.counter_u16 = packetBuf_st.counter_u16; //Copy over the .counter too
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <Gnss_Process+0x288>)
 8001a28:	889a      	ldrh	r2, [r3, #4]
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <Gnss_Process+0x2a4>)
 8001a2c:	809a      	strh	r2, [r3, #4]
                        packetAuto_st.startingSpot_u16 = packetBuf_st.startingSpot_u16; //And the starting spot? (Probably redundant)
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <Gnss_Process+0x288>)
 8001a30:	88da      	ldrh	r2, [r3, #6]
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <Gnss_Process+0x2a4>)
 8001a34:	80da      	strh	r2, [r3, #6]
                        if (_printDebug == true)
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <Gnss_Process+0x28c>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 80cd 	beq.w	8001bda <Gnss_Process+0x3fe>
                        {
                            my_printf("process: incoming \"automatic\" message: Class: 0x%x ID: 0x%x", packetBuf_st.cls_u8, packetBuf_st.id_u8);
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <Gnss_Process+0x288>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <Gnss_Process+0x288>)
 8001a48:	785b      	ldrb	r3, [r3, #1]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	480f      	ldr	r0, [pc, #60]	; (8001a8c <Gnss_Process+0x2b0>)
 8001a4e:	f7fe ff25 	bl	800089c <my_printf>
 8001a52:	e0c2      	b.n	8001bda <Gnss_Process+0x3fe>
                }
                else
                {
                    //This is not an ACK and we do not have a class and ID match
                    //so we should keep diverting data into packetBuf and ignore the payload
                    gnss_pst->ignoreThisPayload_b = true;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2201      	movs	r2, #1
 8001a58:	719a      	strb	r2, [r3, #6]
 8001a5a:	e0be      	b.n	8001bda <Gnss_Process+0x3fe>
 8001a5c:	200001ec 	.word	0x200001ec
 8001a60:	200000e8 	.word	0x200000e8
 8001a64:	20000024 	.word	0x20000024
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000001 	.word	0x20000001
 8001a70:	08006298 	.word	0x08006298
 8001a74:	080062d0 	.word	0x080062d0
 8001a78:	200000e4 	.word	0x200000e4
 8001a7c:	080062d8 	.word	0x080062d8
 8001a80:	20000034 	.word	0x20000034
 8001a84:	0800631c 	.word	0x0800631c
 8001a88:	0800636c 	.word	0x0800636c
 8001a8c:	080063a0 	.word	0x080063a0
                // This is an ACK so it is to early to do anything with it
                // We need to wait until we have received the length and data bytes
                // So we should keep diverting data into packetBuf
            }
        }
        else if (gnss_pst->ubxFrameCounter_u16 == 4) //Length LSB
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	885b      	ldrh	r3, [r3, #2]
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d104      	bne.n	8001aa2 <Gnss_Process+0x2c6>
        {
            //We should save the length in packetBuf even if activePacketBuffer == UBLOX_PACKET_PACKETCFG
            packetBuf_st.len_u16 = incoming_u8; // (Duplication)
 8001a98:	7afb      	ldrb	r3, [r7, #11]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	4b73      	ldr	r3, [pc, #460]	; (8001c6c <Gnss_Process+0x490>)
 8001a9e:	805a      	strh	r2, [r3, #2]
 8001aa0:	e09b      	b.n	8001bda <Gnss_Process+0x3fe>
        }
        else if (gnss_pst->ubxFrameCounter_u16 == 5) //Length MSB
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	885b      	ldrh	r3, [r3, #2]
 8001aa6:	2b05      	cmp	r3, #5
 8001aa8:	d10b      	bne.n	8001ac2 <Gnss_Process+0x2e6>
        {
            //We should save the length in packetBuf even if activePacketBuffer == UBLOX_PACKET_PACKETCFG
            packetBuf_st.len_u16 |= incoming_u8 << 8; // (Duplication)
 8001aaa:	4b70      	ldr	r3, [pc, #448]	; (8001c6c <Gnss_Process+0x490>)
 8001aac:	885b      	ldrh	r3, [r3, #2]
 8001aae:	b21a      	sxth	r2, r3
 8001ab0:	7afb      	ldrb	r3, [r7, #11]
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	4b6b      	ldr	r3, [pc, #428]	; (8001c6c <Gnss_Process+0x490>)
 8001abe:	805a      	strh	r2, [r3, #2]
 8001ac0:	e08b      	b.n	8001bda <Gnss_Process+0x3fe>
        }
        else if (gnss_pst->ubxFrameCounter_u16 == 6) //This should be the first byte of the payload unless .len is zero
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	885b      	ldrh	r3, [r3, #2]
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d11d      	bne.n	8001b06 <Gnss_Process+0x32a>
        {
            if (packetBuf_st.len_u16 == 0) // Check if length is zero (hopefully this is impossible!)
 8001aca:	4b68      	ldr	r3, [pc, #416]	; (8001c6c <Gnss_Process+0x490>)
 8001acc:	885b      	ldrh	r3, [r3, #2]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d114      	bne.n	8001afc <Gnss_Process+0x320>
            {
                if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
 8001ad2:	4b67      	ldr	r3, [pc, #412]	; (8001c70 <Gnss_Process+0x494>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d103      	bne.n	8001ae2 <Gnss_Process+0x306>
 8001ada:	4b66      	ldr	r3, [pc, #408]	; (8001c74 <Gnss_Process+0x498>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d008      	beq.n	8001af4 <Gnss_Process+0x318>
                    my_printf("process: ZERO LENGTH packet received: Class: 0x%x ID: 0x",
                            packetBuf_st.cls_u8, packetBuf_st.id_u8);
 8001ae2:	4b62      	ldr	r3, [pc, #392]	; (8001c6c <Gnss_Process+0x490>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
                    my_printf("process: ZERO LENGTH packet received: Class: 0x%x ID: 0x",
 8001ae6:	4619      	mov	r1, r3
                            packetBuf_st.cls_u8, packetBuf_st.id_u8);
 8001ae8:	4b60      	ldr	r3, [pc, #384]	; (8001c6c <Gnss_Process+0x490>)
 8001aea:	785b      	ldrb	r3, [r3, #1]
                    my_printf("process: ZERO LENGTH packet received: Class: 0x%x ID: 0x",
 8001aec:	461a      	mov	r2, r3
 8001aee:	4862      	ldr	r0, [pc, #392]	; (8001c78 <Gnss_Process+0x49c>)
 8001af0:	f7fe fed4 	bl	800089c <my_printf>
                //If length is zero (!) this will be the first byte of the checksum so record it
                packetBuf_st.checksumA_u8 = incoming_u8;
 8001af4:	4a5d      	ldr	r2, [pc, #372]	; (8001c6c <Gnss_Process+0x490>)
 8001af6:	7afb      	ldrb	r3, [r7, #11]
 8001af8:	7313      	strb	r3, [r2, #12]
 8001afa:	e06e      	b.n	8001bda <Gnss_Process+0x3fe>
            }
            else
            {
                //The length is not zero so record this byte in the payload
                packetBuf_st.payload_pu8[0] = incoming_u8;
 8001afc:	4b5b      	ldr	r3, [pc, #364]	; (8001c6c <Gnss_Process+0x490>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	7afa      	ldrb	r2, [r7, #11]
 8001b02:	701a      	strb	r2, [r3, #0]
 8001b04:	e069      	b.n	8001bda <Gnss_Process+0x3fe>
            }
        }
        else if (gnss_pst->ubxFrameCounter_u16 == 7) //This should be the second byte of the payload unless .len is zero or one
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	885b      	ldrh	r3, [r3, #2]
 8001b0a:	2b07      	cmp	r3, #7
 8001b0c:	d165      	bne.n	8001bda <Gnss_Process+0x3fe>
        {
            if (packetBuf_st.len_u16 == 0) // Check if length is zero (hopefully this is impossible!)
 8001b0e:	4b57      	ldr	r3, [pc, #348]	; (8001c6c <Gnss_Process+0x490>)
 8001b10:	885b      	ldrh	r3, [r3, #2]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d103      	bne.n	8001b1e <Gnss_Process+0x342>
            {
                //If length is zero (!) this will be the second byte of the checksum so record it
                packetBuf_st.checksumB_u8 = incoming_u8;
 8001b16:	4a55      	ldr	r2, [pc, #340]	; (8001c6c <Gnss_Process+0x490>)
 8001b18:	7afb      	ldrb	r3, [r7, #11]
 8001b1a:	7353      	strb	r3, [r2, #13]
 8001b1c:	e00c      	b.n	8001b38 <Gnss_Process+0x35c>
            }
            else if (packetBuf_st.len_u16 == 1) // Check if length is one
 8001b1e:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <Gnss_Process+0x490>)
 8001b20:	885b      	ldrh	r3, [r3, #2]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d103      	bne.n	8001b2e <Gnss_Process+0x352>
            {
                //The length is one so this is the first byte of the checksum
                packetBuf_st.checksumA_u8 = incoming_u8;
 8001b26:	4a51      	ldr	r2, [pc, #324]	; (8001c6c <Gnss_Process+0x490>)
 8001b28:	7afb      	ldrb	r3, [r7, #11]
 8001b2a:	7313      	strb	r3, [r2, #12]
 8001b2c:	e004      	b.n	8001b38 <Gnss_Process+0x35c>
            }
            else // Length is >= 2 so this must be a payload byte
            {
                packetBuf_st.payload_pu8[1] = incoming_u8;
 8001b2e:	4b4f      	ldr	r3, [pc, #316]	; (8001c6c <Gnss_Process+0x490>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	3301      	adds	r3, #1
 8001b34:	7afa      	ldrb	r2, [r7, #11]
 8001b36:	701a      	strb	r2, [r3, #0]
            }
            // Now that we have received two payload bytes, we can check for a matching ACK/NACK
            if ((gnss_pst->activePacketBuffer_e == UBLOX_PACKET_PACKETBUF) // If we are not already processing a data packet
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	79db      	ldrb	r3, [r3, #7]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d14c      	bne.n	8001bda <Gnss_Process+0x3fe>
                    && (packetBuf_st.cls_u8 == UBX_CLASS_ACK)                // and if this is an ACK/NACK
 8001b40:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <Gnss_Process+0x490>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b05      	cmp	r3, #5
 8001b46:	d148      	bne.n	8001bda <Gnss_Process+0x3fe>
                    && (packetBuf_st.payload_pu8[0] == requestedClass_u8)        // and if the class matches
 8001b48:	4b48      	ldr	r3, [pc, #288]	; (8001c6c <Gnss_Process+0x490>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	7aba      	ldrb	r2, [r7, #10]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d142      	bne.n	8001bda <Gnss_Process+0x3fe>
                    && (packetBuf_st.payload_pu8[1] == requestedID_u8))          // and if the ID matches
 8001b54:	4b45      	ldr	r3, [pc, #276]	; (8001c6c <Gnss_Process+0x490>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d13a      	bne.n	8001bda <Gnss_Process+0x3fe>
            {
                if (packetBuf_st.len_u16 == 2) // Check if .len is 2
 8001b64:	4b41      	ldr	r3, [pc, #260]	; (8001c6c <Gnss_Process+0x490>)
 8001b66:	885b      	ldrh	r3, [r3, #2]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d120      	bne.n	8001bae <Gnss_Process+0x3d2>
                {
                    // Then this is a matching ACK so copy it into packetAck
                    gnss_pst->activePacketBuffer_e = UBLOX_PACKET_PACKETACK;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	71da      	strb	r2, [r3, #7]
                    packetAck_st.cls_u8 = packetBuf_st.cls_u8;
 8001b72:	4b3e      	ldr	r3, [pc, #248]	; (8001c6c <Gnss_Process+0x490>)
 8001b74:	781a      	ldrb	r2, [r3, #0]
 8001b76:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <Gnss_Process+0x4a0>)
 8001b78:	701a      	strb	r2, [r3, #0]
                    packetAck_st.id_u8 = packetBuf_st.id_u8;
 8001b7a:	4b3c      	ldr	r3, [pc, #240]	; (8001c6c <Gnss_Process+0x490>)
 8001b7c:	785a      	ldrb	r2, [r3, #1]
 8001b7e:	4b3f      	ldr	r3, [pc, #252]	; (8001c7c <Gnss_Process+0x4a0>)
 8001b80:	705a      	strb	r2, [r3, #1]
                    packetAck_st.len_u16 = packetBuf_st.len_u16;
 8001b82:	4b3a      	ldr	r3, [pc, #232]	; (8001c6c <Gnss_Process+0x490>)
 8001b84:	885a      	ldrh	r2, [r3, #2]
 8001b86:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <Gnss_Process+0x4a0>)
 8001b88:	805a      	strh	r2, [r3, #2]
                    packetAck_st.counter_u16 = packetBuf_st.counter_u16;
 8001b8a:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <Gnss_Process+0x490>)
 8001b8c:	889a      	ldrh	r2, [r3, #4]
 8001b8e:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <Gnss_Process+0x4a0>)
 8001b90:	809a      	strh	r2, [r3, #4]
                    packetAck_st.payload_pu8[0] = packetBuf_st.payload_pu8[0];
 8001b92:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <Gnss_Process+0x490>)
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	4b39      	ldr	r3, [pc, #228]	; (8001c7c <Gnss_Process+0x4a0>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	7812      	ldrb	r2, [r2, #0]
 8001b9c:	701a      	strb	r2, [r3, #0]
                    packetAck_st.payload_pu8[1] = packetBuf_st.payload_pu8[1];
 8001b9e:	4b33      	ldr	r3, [pc, #204]	; (8001c6c <Gnss_Process+0x490>)
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <Gnss_Process+0x4a0>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	7852      	ldrb	r2, [r2, #1]
 8001baa:	701a      	strb	r2, [r3, #0]
 8001bac:	e015      	b.n	8001bda <Gnss_Process+0x3fe>
                }
                else // Length is not 2 (hopefully this is impossible!)
                {
                    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
 8001bae:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <Gnss_Process+0x494>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d103      	bne.n	8001bbe <Gnss_Process+0x3e2>
 8001bb6:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <Gnss_Process+0x498>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00d      	beq.n	8001bda <Gnss_Process+0x3fe>
                    {
                        my_printf("process: ACK received with .len != 2: Class: 0x%x ID: 0x%x len: %d",
                                packetBuf_st.payload_pu8[0], packetBuf_st.payload_pu8[1], packetBuf_st.len_u16);
 8001bbe:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <Gnss_Process+0x490>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
                        my_printf("process: ACK received with .len != 2: Class: 0x%x ID: 0x%x len: %d",
 8001bc4:	4619      	mov	r1, r3
                                packetBuf_st.payload_pu8[0], packetBuf_st.payload_pu8[1], packetBuf_st.len_u16);
 8001bc6:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <Gnss_Process+0x490>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	781b      	ldrb	r3, [r3, #0]
                        my_printf("process: ACK received with .len != 2: Class: 0x%x ID: 0x%x len: %d",
 8001bce:	461a      	mov	r2, r3
                                packetBuf_st.payload_pu8[0], packetBuf_st.payload_pu8[1], packetBuf_st.len_u16);
 8001bd0:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <Gnss_Process+0x490>)
 8001bd2:	885b      	ldrh	r3, [r3, #2]
                        my_printf("process: ACK received with .len != 2: Class: 0x%x ID: 0x%x len: %d",
 8001bd4:	482a      	ldr	r0, [pc, #168]	; (8001c80 <Gnss_Process+0x4a4>)
 8001bd6:	f7fe fe61 	bl	800089c <my_printf>
                }
            }
        }

        //Divert incoming into the correct buffer
        if (gnss_pst->activePacketBuffer_e == UBLOX_PACKET_PACKETACK)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	79db      	ldrb	r3, [r3, #7]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d10b      	bne.n	8001bfa <Gnss_Process+0x41e>
        {
            gnss_pst->processUBX(gnss_pst, incoming_u8, &packetAck_st, requestedClass_u8, requestedID_u8);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8001be6:	7aba      	ldrb	r2, [r7, #10]
 8001be8:	7af9      	ldrb	r1, [r7, #11]
 8001bea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	4a22      	ldr	r2, [pc, #136]	; (8001c7c <Gnss_Process+0x4a0>)
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	47a0      	blx	r4
 8001bf8:	e02a      	b.n	8001c50 <Gnss_Process+0x474>
        }
        else if (gnss_pst->activePacketBuffer_e  == UBLOX_PACKET_PACKETCFG)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	79db      	ldrb	r3, [r3, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10b      	bne.n	8001c1a <Gnss_Process+0x43e>
        {
            gnss_pst->processUBX(gnss_pst, incoming_u8, incomingUBX_pst, requestedClass_u8, requestedID_u8);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8001c06:	7aba      	ldrb	r2, [r7, #10]
 8001c08:	7af9      	ldrb	r1, [r7, #11]
 8001c0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	4613      	mov	r3, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	47a0      	blx	r4
 8001c18:	e01a      	b.n	8001c50 <Gnss_Process+0x474>
        }
        else if (gnss_pst->activePacketBuffer_e == UBLOX_PACKET_PACKETBUF)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	79db      	ldrb	r3, [r3, #7]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d10b      	bne.n	8001c3a <Gnss_Process+0x45e>
        {
            gnss_pst->processUBX(gnss_pst, incoming_u8, &packetBuf_st, requestedClass_u8, requestedID_u8);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8001c26:	7aba      	ldrb	r2, [r7, #10]
 8001c28:	7af9      	ldrb	r1, [r7, #11]
 8001c2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	4613      	mov	r3, r2
 8001c32:	4a0e      	ldr	r2, [pc, #56]	; (8001c6c <Gnss_Process+0x490>)
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	47a0      	blx	r4
 8001c38:	e00a      	b.n	8001c50 <Gnss_Process+0x474>
        }
        else // if (activePacketBuffer == UBLOX_PACKET_PACKETAUTO)
        {
            gnss_pst->processUBX(gnss_pst, incoming_u8, &packetAuto_st, requestedClass_u8, requestedID_u8);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8001c3e:	7aba      	ldrb	r2, [r7, #10]
 8001c40:	7af9      	ldrb	r1, [r7, #11]
 8001c42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	4a0e      	ldr	r2, [pc, #56]	; (8001c84 <Gnss_Process+0x4a8>)
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	47a0      	blx	r4
        }

        //Finally, increment the frame counter
        gnss_pst->ubxFrameCounter_u16++;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	885b      	ldrh	r3, [r3, #2]
 8001c54:	3301      	adds	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	805a      	strh	r2, [r3, #2]
    }
    else if (gnss_pst->currentSentence_e == RTCM)
    {
//        processRTCMframe(incoming_u8); //Deal with RTCM bytes
    }
}
 8001c5c:	e002      	b.n	8001c64 <Gnss_Process+0x488>
    else if (gnss_pst->currentSentence_e == NMEA)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	7a1b      	ldrb	r3, [r3, #8]
 8001c62:	2b01      	cmp	r3, #1
}
 8001c64:	bf00      	nop
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd90      	pop	{r4, r7, pc}
 8001c6c:	20000024 	.word	0x20000024
 8001c70:	20000000 	.word	0x20000000
 8001c74:	20000001 	.word	0x20000001
 8001c78:	080063dc 	.word	0x080063dc
 8001c7c:	20000014 	.word	0x20000014
 8001c80:	08006418 	.word	0x08006418
 8001c84:	20000034 	.word	0x20000034

08001c88 <Gnss_PrintPacket>:

void Gnss_PrintPacket(struct Ublox_Gnss *gnss_pst, Ubx_Packet_tst *packet_st, bool alwaysPrintPayload_b)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b0b8      	sub	sp, #224	; 0xe0
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	4613      	mov	r3, r2
 8001c94:	71fb      	strb	r3, [r7, #7]
    int index = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (_printDebug == true)
 8001c9c:	4ba4      	ldr	r3, [pc, #656]	; (8001f30 <Gnss_PrintPacket+0x2a8>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 8141 	beq.w	8001f28 <Gnss_PrintPacket+0x2a0>
    {
        char str[200];

        index = sprintf(str, "%s", "CLS:");
 8001ca6:	f107 0310 	add.w	r3, r7, #16
 8001caa:	4aa2      	ldr	r2, [pc, #648]	; (8001f34 <Gnss_PrintPacket+0x2ac>)
 8001cac:	49a2      	ldr	r1, [pc, #648]	; (8001f38 <Gnss_PrintPacket+0x2b0>)
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f003 f80a 	bl	8004cc8 <siprintf>
 8001cb4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (packet_st->cls_u8 == UBX_CLASS_NAV) //1
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d110      	bne.n	8001ce2 <Gnss_PrintPacket+0x5a>
        {
            index += sprintf(str+index, "%s", "NAV");
 8001cc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cc4:	f107 0210 	add.w	r2, r7, #16
 8001cc8:	4413      	add	r3, r2
 8001cca:	4a9c      	ldr	r2, [pc, #624]	; (8001f3c <Gnss_PrintPacket+0x2b4>)
 8001ccc:	499a      	ldr	r1, [pc, #616]	; (8001f38 <Gnss_PrintPacket+0x2b0>)
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 fffa 	bl	8004cc8 <siprintf>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cda:	4413      	add	r3, r2
 8001cdc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001ce0:	e04f      	b.n	8001d82 <Gnss_PrintPacket+0xfa>
        }
        else if (packet_st->cls_u8 == UBX_CLASS_ACK) //5
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b05      	cmp	r3, #5
 8001ce8:	d110      	bne.n	8001d0c <Gnss_PrintPacket+0x84>
        {
            index += sprintf(str+index, "%s", "ACK");
 8001cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cee:	f107 0210 	add.w	r2, r7, #16
 8001cf2:	4413      	add	r3, r2
 8001cf4:	4a92      	ldr	r2, [pc, #584]	; (8001f40 <Gnss_PrintPacket+0x2b8>)
 8001cf6:	4990      	ldr	r1, [pc, #576]	; (8001f38 <Gnss_PrintPacket+0x2b0>)
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f002 ffe5 	bl	8004cc8 <siprintf>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d04:	4413      	add	r3, r2
 8001d06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001d0a:	e03a      	b.n	8001d82 <Gnss_PrintPacket+0xfa>
        }
        else if (packet_st->cls_u8 == UBX_CLASS_CFG) //6
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b06      	cmp	r3, #6
 8001d12:	d110      	bne.n	8001d36 <Gnss_PrintPacket+0xae>
        {
            index += sprintf(str+index, "%s", "CFG");
 8001d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d18:	f107 0210 	add.w	r2, r7, #16
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4a89      	ldr	r2, [pc, #548]	; (8001f44 <Gnss_PrintPacket+0x2bc>)
 8001d20:	4985      	ldr	r1, [pc, #532]	; (8001f38 <Gnss_PrintPacket+0x2b0>)
 8001d22:	4618      	mov	r0, r3
 8001d24:	f002 ffd0 	bl	8004cc8 <siprintf>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d2e:	4413      	add	r3, r2
 8001d30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001d34:	e025      	b.n	8001d82 <Gnss_PrintPacket+0xfa>
        }
        else if (packet_st->cls_u8 == UBX_CLASS_MON) //0x0A
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b0a      	cmp	r3, #10
 8001d3c:	d110      	bne.n	8001d60 <Gnss_PrintPacket+0xd8>
        {
            index += sprintf(str+index, "%s", "MON");
 8001d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d42:	f107 0210 	add.w	r2, r7, #16
 8001d46:	4413      	add	r3, r2
 8001d48:	4a7f      	ldr	r2, [pc, #508]	; (8001f48 <Gnss_PrintPacket+0x2c0>)
 8001d4a:	497b      	ldr	r1, [pc, #492]	; (8001f38 <Gnss_PrintPacket+0x2b0>)
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f002 ffbb 	bl	8004cc8 <siprintf>
 8001d52:	4602      	mov	r2, r0
 8001d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d58:	4413      	add	r3, r2
 8001d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001d5e:	e010      	b.n	8001d82 <Gnss_PrintPacket+0xfa>
        }
        else
        {
            index += sprintf(str+index, "%s%x", "0x", packet_st->cls_u8);
 8001d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d64:	f107 0210 	add.w	r2, r7, #16
 8001d68:	18d0      	adds	r0, r2, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	4a77      	ldr	r2, [pc, #476]	; (8001f4c <Gnss_PrintPacket+0x2c4>)
 8001d70:	4977      	ldr	r1, [pc, #476]	; (8001f50 <Gnss_PrintPacket+0x2c8>)
 8001d72:	f002 ffa9 	bl	8004cc8 <siprintf>
 8001d76:	4602      	mov	r2, r0
 8001d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        }

        index += sprintf(str+index, "%s", " ID:");
 8001d82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d86:	f107 0210 	add.w	r2, r7, #16
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a71      	ldr	r2, [pc, #452]	; (8001f54 <Gnss_PrintPacket+0x2cc>)
 8001d8e:	496a      	ldr	r1, [pc, #424]	; (8001f38 <Gnss_PrintPacket+0x2b0>)
 8001d90:	4618      	mov	r0, r3
 8001d92:	f002 ff99 	bl	8004cc8 <siprintf>
 8001d96:	4602      	mov	r2, r0
 8001d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        if (packet_st->cls_u8 == UBX_CLASS_NAV && packet_st->id_u8 == UBX_NAV_PVT)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d114      	bne.n	8001dd4 <Gnss_PrintPacket+0x14c>
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	785b      	ldrb	r3, [r3, #1]
 8001dae:	2b07      	cmp	r3, #7
 8001db0:	d110      	bne.n	8001dd4 <Gnss_PrintPacket+0x14c>
        {
            index += sprintf(str+index,"%s", "PVT");
 8001db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001db6:	f107 0210 	add.w	r2, r7, #16
 8001dba:	4413      	add	r3, r2
 8001dbc:	4a66      	ldr	r2, [pc, #408]	; (8001f58 <Gnss_PrintPacket+0x2d0>)
 8001dbe:	495e      	ldr	r1, [pc, #376]	; (8001f38 <Gnss_PrintPacket+0x2b0>)
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f002 ff81 	bl	8004cc8 <siprintf>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dcc:	4413      	add	r3, r2
 8001dce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001dd2:	e042      	b.n	8001e5a <Gnss_PrintPacket+0x1d2>
        }
        else if (packet_st->cls_u8 == UBX_CLASS_CFG && packet_st->id_u8 == UBX_CFG_RATE)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b06      	cmp	r3, #6
 8001dda:	d114      	bne.n	8001e06 <Gnss_PrintPacket+0x17e>
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	785b      	ldrb	r3, [r3, #1]
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d110      	bne.n	8001e06 <Gnss_PrintPacket+0x17e>
        {
            index += sprintf(str+index,"%s", "RATE");
 8001de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001de8:	f107 0210 	add.w	r2, r7, #16
 8001dec:	4413      	add	r3, r2
 8001dee:	4a5b      	ldr	r2, [pc, #364]	; (8001f5c <Gnss_PrintPacket+0x2d4>)
 8001df0:	4951      	ldr	r1, [pc, #324]	; (8001f38 <Gnss_PrintPacket+0x2b0>)
 8001df2:	4618      	mov	r0, r3
 8001df4:	f002 ff68 	bl	8004cc8 <siprintf>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dfe:	4413      	add	r3, r2
 8001e00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001e04:	e029      	b.n	8001e5a <Gnss_PrintPacket+0x1d2>
        }
        else if (packet_st->cls_u8 == UBX_CLASS_CFG && packet_st->id_u8 == UBX_CFG_CFG)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d114      	bne.n	8001e38 <Gnss_PrintPacket+0x1b0>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	785b      	ldrb	r3, [r3, #1]
 8001e12:	2b09      	cmp	r3, #9
 8001e14:	d110      	bne.n	8001e38 <Gnss_PrintPacket+0x1b0>
        {
            index += sprintf(str+index,"%s", "SAVE");
 8001e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e1a:	f107 0210 	add.w	r2, r7, #16
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a4f      	ldr	r2, [pc, #316]	; (8001f60 <Gnss_PrintPacket+0x2d8>)
 8001e22:	4945      	ldr	r1, [pc, #276]	; (8001f38 <Gnss_PrintPacket+0x2b0>)
 8001e24:	4618      	mov	r0, r3
 8001e26:	f002 ff4f 	bl	8004cc8 <siprintf>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e30:	4413      	add	r3, r2
 8001e32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001e36:	e010      	b.n	8001e5a <Gnss_PrintPacket+0x1d2>
        }
        else
        {
            index += sprintf(str+index, "%s%x", "0x", packet_st->id_u8);
 8001e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e3c:	f107 0210 	add.w	r2, r7, #16
 8001e40:	18d0      	adds	r0, r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	785b      	ldrb	r3, [r3, #1]
 8001e46:	4a41      	ldr	r2, [pc, #260]	; (8001f4c <Gnss_PrintPacket+0x2c4>)
 8001e48:	4941      	ldr	r1, [pc, #260]	; (8001f50 <Gnss_PrintPacket+0x2c8>)
 8001e4a:	f002 ff3d 	bl	8004cc8 <siprintf>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e54:	4413      	add	r3, r2
 8001e56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        }

        index += sprintf(str+index, "%s%x", " Len: 0x", packet_st->len_u16);
 8001e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e5e:	f107 0210 	add.w	r2, r7, #16
 8001e62:	18d0      	adds	r0, r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	885b      	ldrh	r3, [r3, #2]
 8001e68:	4a3e      	ldr	r2, [pc, #248]	; (8001f64 <Gnss_PrintPacket+0x2dc>)
 8001e6a:	4939      	ldr	r1, [pc, #228]	; (8001f50 <Gnss_PrintPacket+0x2c8>)
 8001e6c:	f002 ff2c 	bl	8004cc8 <siprintf>
 8001e70:	4602      	mov	r2, r0
 8001e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e76:	4413      	add	r3, r2
 8001e78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

        // Only print the payload is ignoreThisPayload is false otherwise
        // we could be printing gibberish from beyond the end of packetBuf
        if ((alwaysPrintPayload_b == true) || (gnss_pst->ignoreThisPayload_b == false))
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d106      	bne.n	8001e90 <Gnss_PrintPacket+0x208>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	799b      	ldrb	r3, [r3, #6]
 8001e86:	f083 0301 	eor.w	r3, r3, #1
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d035      	beq.n	8001efc <Gnss_PrintPacket+0x274>
        {
            index += sprintf(str+index, "%s", " Payload:");
 8001e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e94:	f107 0210 	add.w	r2, r7, #16
 8001e98:	4413      	add	r3, r2
 8001e9a:	4a33      	ldr	r2, [pc, #204]	; (8001f68 <Gnss_PrintPacket+0x2e0>)
 8001e9c:	4926      	ldr	r1, [pc, #152]	; (8001f38 <Gnss_PrintPacket+0x2b0>)
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f002 ff12 	bl	8004cc8 <siprintf>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001eaa:	4413      	add	r3, r2
 8001eac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

            for (int x = 0; x < packet_st->len_u16; x++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001eb6:	e019      	b.n	8001eec <Gnss_PrintPacket+0x264>
            {
                index += sprintf(str+index, "%s%02x ", "0x", packet_st->payload_pu8[x]);
 8001eb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ebc:	f107 0210 	add.w	r2, r7, #16
 8001ec0:	18d0      	adds	r0, r2, r3
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001eca:	4413      	add	r3, r2
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	4a1f      	ldr	r2, [pc, #124]	; (8001f4c <Gnss_PrintPacket+0x2c4>)
 8001ed0:	4926      	ldr	r1, [pc, #152]	; (8001f6c <Gnss_PrintPacket+0x2e4>)
 8001ed2:	f002 fef9 	bl	8004cc8 <siprintf>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001edc:	4413      	add	r3, r2
 8001ede:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            for (int x = 0; x < packet_st->len_u16; x++)
 8001ee2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	885b      	ldrh	r3, [r3, #2]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	dbde      	blt.n	8001eb8 <Gnss_PrintPacket+0x230>
 8001efa:	e00f      	b.n	8001f1c <Gnss_PrintPacket+0x294>
            }
        }
        else
        {
            index += sprintf(str+index, "%s", " Payload: IGNORED");
 8001efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f00:	f107 0210 	add.w	r2, r7, #16
 8001f04:	4413      	add	r3, r2
 8001f06:	4a1a      	ldr	r2, [pc, #104]	; (8001f70 <Gnss_PrintPacket+0x2e8>)
 8001f08:	490b      	ldr	r1, [pc, #44]	; (8001f38 <Gnss_PrintPacket+0x2b0>)
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f002 fedc 	bl	8004cc8 <siprintf>
 8001f10:	4602      	mov	r2, r0
 8001f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f16:	4413      	add	r3, r2
 8001f18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        }

        my_printf("%s", str);
 8001f1c:	f107 0310 	add.w	r3, r7, #16
 8001f20:	4619      	mov	r1, r3
 8001f22:	4805      	ldr	r0, [pc, #20]	; (8001f38 <Gnss_PrintPacket+0x2b0>)
 8001f24:	f7fe fcba 	bl	800089c <my_printf>
    }
}
 8001f28:	bf00      	nop
 8001f2a:	37e0      	adds	r7, #224	; 0xe0
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000000 	.word	0x20000000
 8001f34:	0800645c 	.word	0x0800645c
 8001f38:	08006464 	.word	0x08006464
 8001f3c:	08006468 	.word	0x08006468
 8001f40:	0800646c 	.word	0x0800646c
 8001f44:	08006470 	.word	0x08006470
 8001f48:	08006474 	.word	0x08006474
 8001f4c:	08006478 	.word	0x08006478
 8001f50:	0800647c 	.word	0x0800647c
 8001f54:	08006484 	.word	0x08006484
 8001f58:	0800648c 	.word	0x0800648c
 8001f5c:	08006490 	.word	0x08006490
 8001f60:	08006498 	.word	0x08006498
 8001f64:	080064a0 	.word	0x080064a0
 8001f68:	080064ac 	.word	0x080064ac
 8001f6c:	080064b8 	.word	0x080064b8
 8001f70:	080064c0 	.word	0x080064c0

08001f74 <Gnss_CheckAutomatic>:

bool Gnss_CheckAutomatic(struct Ublox_Gnss *gnss_pst, uint8_t Class_u8, uint8_t ID_u8)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	70fb      	strb	r3, [r7, #3]
 8001f80:	4613      	mov	r3, r2
 8001f82:	70bb      	strb	r3, [r7, #2]
    bool result = false;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]
    switch (Class_u8)
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d10a      	bne.n	8001fa4 <Gnss_CheckAutomatic+0x30>
    {
        case UBX_CLASS_CFG:
        {
            switch (ID_u8)
 8001f8e:	78bb      	ldrb	r3, [r7, #2]
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d106      	bne.n	8001fa2 <Gnss_CheckAutomatic+0x2e>
            {
                case UBX_CFG_RATE:
                    if (gnss_pst->packetUBXCFGRATE_pst != NULL) result = true;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <Gnss_CheckAutomatic+0x2c>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
                    break;
 8001fa0:	bf00      	nop
            }
        }
        break;
 8001fa2:	bf00      	nop
    }
    return (result);
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <Gnss_ProcessUBXpacket>:

void Gnss_ProcessUBXpacket(struct Ublox_Gnss *gnss_pst, Ubx_Packet_tst *msg_st)
{
 8001fb2:	b590      	push	{r4, r7, lr}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	6039      	str	r1, [r7, #0]
    switch (msg_st->cls_u8)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b06      	cmp	r3, #6
 8001fc2:	d12f      	bne.n	8002024 <Gnss_ProcessUBXpacket+0x72>
    {
        case UBX_CLASS_CFG:
            if (msg_st->id_u8 == UBX_CFG_RATE && msg_st->len_u16 == UBX_CFG_RATE_LEN)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	785b      	ldrb	r3, [r3, #1]
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d12a      	bne.n	8002022 <Gnss_ProcessUBXpacket+0x70>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	885b      	ldrh	r3, [r3, #2]
 8001fd0:	2b06      	cmp	r3, #6
 8001fd2:	d126      	bne.n	8002022 <Gnss_ProcessUBXpacket+0x70>
            {
              //Parse various byte fields into storage - but only if we have memory allocated for it
              if (gnss_pst->packetUBXCFGRATE_pst != NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d022      	beq.n	8002022 <Gnss_ProcessUBXpacket+0x70>
              {
                  gnss_pst->packetUBXCFGRATE_pst->data.measRate = gnss_pst->extractInt(msg_st, 0);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68d4      	ldr	r4, [r2, #12]
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	6838      	ldr	r0, [r7, #0]
 8001fea:	4798      	blx	r3
 8001fec:	4603      	mov	r3, r0
 8001fee:	8063      	strh	r3, [r4, #2]
                  gnss_pst->packetUBXCFGRATE_pst->data.navRate = gnss_pst->extractInt( msg_st, 2);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68d4      	ldr	r4, [r2, #12]
 8001ffa:	2102      	movs	r1, #2
 8001ffc:	6838      	ldr	r0, [r7, #0]
 8001ffe:	4798      	blx	r3
 8002000:	4603      	mov	r3, r0
 8002002:	80a3      	strh	r3, [r4, #4]
                  gnss_pst->packetUBXCFGRATE_pst->data.timeRef = gnss_pst->extractInt( msg_st, 4);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68d4      	ldr	r4, [r2, #12]
 800200e:	2104      	movs	r1, #4
 8002010:	6838      	ldr	r0, [r7, #0]
 8002012:	4798      	blx	r3
 8002014:	4603      	mov	r3, r0
 8002016:	80e3      	strh	r3, [r4, #6]

                //Mark all datums as fresh (not read before)
                  gnss_pst->packetUBXCFGRATE_pst->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f04f 32ff 	mov.w	r2, #4294967295
 8002020:	609a      	str	r2, [r3, #8]
              }
            }
            break;
 8002022:	bf00      	nop
    }
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bd90      	pop	{r4, r7, pc}

0800202c <Gnss_ExtractInt>:

uint16_t Gnss_ExtractInt(Ubx_Packet_tst *msg_st, uint8_t spotToStart_u8)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
    uint16_t val = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	81fb      	strh	r3, [r7, #14]
    val |= (uint16_t)msg_st->payload_pu8[spotToStart_u8 + 0] << 8 * 0;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	4413      	add	r3, r2
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	b29a      	uxth	r2, r3
 8002048:	89fb      	ldrh	r3, [r7, #14]
 800204a:	4313      	orrs	r3, r2
 800204c:	81fb      	strh	r3, [r7, #14]
    val |= (uint16_t)msg_st->payload_pu8[spotToStart_u8 + 1] << 8 * 1;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	3301      	adds	r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	b21a      	sxth	r2, r3
 800205e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002062:	4313      	orrs	r3, r2
 8002064:	b21b      	sxth	r3, r3
 8002066:	81fb      	strh	r3, [r7, #14]
    return (val);
 8002068:	89fb      	ldrh	r3, [r7, #14]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <Gnss_AddToChecksum>:

void Gnss_AddToChecksum(struct Ublox_Gnss *gnss_pst, uint8_t incoming_u8)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	460b      	mov	r3, r1
 8002080:	70fb      	strb	r3, [r7, #3]
    gnss_pst->rollingChecksumA_u8 += incoming_u8;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	791a      	ldrb	r2, [r3, #4]
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	4413      	add	r3, r2
 800208a:	b2da      	uxtb	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	711a      	strb	r2, [r3, #4]
    gnss_pst->rollingChecksumB_u8 += gnss_pst->rollingChecksumA_u8;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	795a      	ldrb	r2, [r3, #5]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	791b      	ldrb	r3, [r3, #4]
 8002098:	4413      	add	r3, r2
 800209a:	b2da      	uxtb	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	715a      	strb	r2, [r3, #5]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <Gnss_GetMaxPayloadSize>:

uint16_t Gnss_GetMaxPayloadSize(struct Ublox_Gnss *gnss_pst, uint8_t Class_u8, uint8_t ID_u8)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70fb      	strb	r3, [r7, #3]
 80020b8:	4613      	mov	r3, r2
 80020ba:	70bb      	strb	r3, [r7, #2]
    uint16_t maxSize = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	81fb      	strh	r3, [r7, #14]
    switch (Class_u8)
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d003      	beq.n	80020ce <Gnss_GetMaxPayloadSize+0x22>
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	f000 80aa 	beq.w	8002220 <Gnss_GetMaxPayloadSize+0x174>
 80020cc:	e0b2      	b.n	8002234 <Gnss_GetMaxPayloadSize+0x188>
    {
      case UBX_CLASS_NAV:
      {
        switch (ID_u8)
 80020ce:	78bb      	ldrb	r3, [r7, #2]
 80020d0:	3b01      	subs	r3, #1
 80020d2:	2b3b      	cmp	r3, #59	; 0x3b
 80020d4:	f200 80ab 	bhi.w	800222e <Gnss_GetMaxPayloadSize+0x182>
 80020d8:	a201      	add	r2, pc, #4	; (adr r2, 80020e0 <Gnss_GetMaxPayloadSize+0x34>)
 80020da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020de:	bf00      	nop
 80020e0:	080021d1 	.word	0x080021d1
 80020e4:	0800222f 	.word	0x0800222f
 80020e8:	080021d7 	.word	0x080021d7
 80020ec:	080021dd 	.word	0x080021dd
 80020f0:	080021e3 	.word	0x080021e3
 80020f4:	0800222f 	.word	0x0800222f
 80020f8:	080021e9 	.word	0x080021e9
 80020fc:	0800222f 	.word	0x0800222f
 8002100:	080021ef 	.word	0x080021ef
 8002104:	0800222f 	.word	0x0800222f
 8002108:	0800222f 	.word	0x0800222f
 800210c:	0800222f 	.word	0x0800222f
 8002110:	0800222f 	.word	0x0800222f
 8002114:	0800222f 	.word	0x0800222f
 8002118:	0800222f 	.word	0x0800222f
 800211c:	0800222f 	.word	0x0800222f
 8002120:	080021f5 	.word	0x080021f5
 8002124:	080021fb 	.word	0x080021fb
 8002128:	08002201 	.word	0x08002201
 800212c:	08002207 	.word	0x08002207
 8002130:	0800222f 	.word	0x0800222f
 8002134:	0800222f 	.word	0x0800222f
 8002138:	0800222f 	.word	0x0800222f
 800213c:	0800222f 	.word	0x0800222f
 8002140:	0800222f 	.word	0x0800222f
 8002144:	0800222f 	.word	0x0800222f
 8002148:	0800222f 	.word	0x0800222f
 800214c:	0800222f 	.word	0x0800222f
 8002150:	0800222f 	.word	0x0800222f
 8002154:	0800222f 	.word	0x0800222f
 8002158:	0800222f 	.word	0x0800222f
 800215c:	0800222f 	.word	0x0800222f
 8002160:	0800222f 	.word	0x0800222f
 8002164:	0800220d 	.word	0x0800220d
 8002168:	0800222f 	.word	0x0800222f
 800216c:	0800222f 	.word	0x0800222f
 8002170:	0800222f 	.word	0x0800222f
 8002174:	0800222f 	.word	0x0800222f
 8002178:	0800222f 	.word	0x0800222f
 800217c:	0800222f 	.word	0x0800222f
 8002180:	0800222f 	.word	0x0800222f
 8002184:	0800222f 	.word	0x0800222f
 8002188:	0800222f 	.word	0x0800222f
 800218c:	0800222f 	.word	0x0800222f
 8002190:	0800222f 	.word	0x0800222f
 8002194:	0800222f 	.word	0x0800222f
 8002198:	0800222f 	.word	0x0800222f
 800219c:	0800222f 	.word	0x0800222f
 80021a0:	0800222f 	.word	0x0800222f
 80021a4:	0800222f 	.word	0x0800222f
 80021a8:	0800222f 	.word	0x0800222f
 80021ac:	0800222f 	.word	0x0800222f
 80021b0:	0800222f 	.word	0x0800222f
 80021b4:	0800222f 	.word	0x0800222f
 80021b8:	0800222f 	.word	0x0800222f
 80021bc:	0800222f 	.word	0x0800222f
 80021c0:	0800222f 	.word	0x0800222f
 80021c4:	0800222f 	.word	0x0800222f
 80021c8:	08002213 	.word	0x08002213
 80021cc:	08002219 	.word	0x08002219
        {
          case UBX_NAV_POSECEF:
            maxSize = UBX_NAV_POSECEF_LEN;
 80021d0:	2314      	movs	r3, #20
 80021d2:	81fb      	strh	r3, [r7, #14]
          break;
 80021d4:	e023      	b.n	800221e <Gnss_GetMaxPayloadSize+0x172>
          case UBX_NAV_STATUS:
            maxSize = UBX_NAV_STATUS_LEN;
 80021d6:	2310      	movs	r3, #16
 80021d8:	81fb      	strh	r3, [r7, #14]
          break;
 80021da:	e020      	b.n	800221e <Gnss_GetMaxPayloadSize+0x172>
          case UBX_NAV_DOP:
            maxSize = UBX_NAV_DOP_LEN;
 80021dc:	2312      	movs	r3, #18
 80021de:	81fb      	strh	r3, [r7, #14]
          break;
 80021e0:	e01d      	b.n	800221e <Gnss_GetMaxPayloadSize+0x172>
          case UBX_NAV_ATT:
            maxSize = UBX_NAV_ATT_LEN;
 80021e2:	2320      	movs	r3, #32
 80021e4:	81fb      	strh	r3, [r7, #14]
          break;
 80021e6:	e01a      	b.n	800221e <Gnss_GetMaxPayloadSize+0x172>
          case UBX_NAV_PVT:
            maxSize = UBX_NAV_PVT_LEN;
 80021e8:	235c      	movs	r3, #92	; 0x5c
 80021ea:	81fb      	strh	r3, [r7, #14]
          break;
 80021ec:	e017      	b.n	800221e <Gnss_GetMaxPayloadSize+0x172>
          case UBX_NAV_ODO:
            maxSize = UBX_NAV_ODO_LEN;
 80021ee:	2314      	movs	r3, #20
 80021f0:	81fb      	strh	r3, [r7, #14]
          break;
 80021f2:	e014      	b.n	800221e <Gnss_GetMaxPayloadSize+0x172>
          case UBX_NAV_VELECEF:
            maxSize = UBX_NAV_VELECEF_LEN;
 80021f4:	2314      	movs	r3, #20
 80021f6:	81fb      	strh	r3, [r7, #14]
          break;
 80021f8:	e011      	b.n	800221e <Gnss_GetMaxPayloadSize+0x172>
          case UBX_NAV_VELNED:
            maxSize = UBX_NAV_VELNED_LEN;
 80021fa:	2324      	movs	r3, #36	; 0x24
 80021fc:	81fb      	strh	r3, [r7, #14]
          break;
 80021fe:	e00e      	b.n	800221e <Gnss_GetMaxPayloadSize+0x172>
          case UBX_NAV_HPPOSECEF:
            maxSize = UBX_NAV_HPPOSECEF_LEN;
 8002200:	231c      	movs	r3, #28
 8002202:	81fb      	strh	r3, [r7, #14]
          break;
 8002204:	e00b      	b.n	800221e <Gnss_GetMaxPayloadSize+0x172>
          case UBX_NAV_HPPOSLLH:
            maxSize = UBX_NAV_HPPOSLLH_LEN;
 8002206:	2324      	movs	r3, #36	; 0x24
 8002208:	81fb      	strh	r3, [r7, #14]
          break;
 800220a:	e008      	b.n	800221e <Gnss_GetMaxPayloadSize+0x172>
          case UBX_NAV_CLOCK:
            maxSize = UBX_NAV_CLOCK_LEN;
 800220c:	2314      	movs	r3, #20
 800220e:	81fb      	strh	r3, [r7, #14]
          break;
 8002210:	e005      	b.n	800221e <Gnss_GetMaxPayloadSize+0x172>
          case UBX_NAV_SVIN:
            maxSize = UBX_NAV_SVIN_LEN;
 8002212:	2328      	movs	r3, #40	; 0x28
 8002214:	81fb      	strh	r3, [r7, #14]
          break;
 8002216:	e002      	b.n	800221e <Gnss_GetMaxPayloadSize+0x172>
          case UBX_NAV_RELPOSNED:
            maxSize = UBX_NAV_RELPOSNED_LEN_F9;
 8002218:	2340      	movs	r3, #64	; 0x40
 800221a:	81fb      	strh	r3, [r7, #14]
          break;
 800221c:	bf00      	nop
        }
      }
      break;
 800221e:	e006      	b.n	800222e <Gnss_GetMaxPayloadSize+0x182>

      case UBX_CLASS_CFG:
      {
        switch (ID_u8)
 8002220:	78bb      	ldrb	r3, [r7, #2]
 8002222:	2b08      	cmp	r3, #8
 8002224:	d105      	bne.n	8002232 <Gnss_GetMaxPayloadSize+0x186>
        {
          case UBX_CFG_RATE:
            maxSize = UBX_CFG_RATE_LEN;
 8002226:	2306      	movs	r3, #6
 8002228:	81fb      	strh	r3, [r7, #14]
          break;
 800222a:	bf00      	nop
        }
      }
      break;
 800222c:	e001      	b.n	8002232 <Gnss_GetMaxPayloadSize+0x186>
      break;
 800222e:	bf00      	nop
 8002230:	e000      	b.n	8002234 <Gnss_GetMaxPayloadSize+0x188>
      break;
 8002232:	bf00      	nop
    }
    return (maxSize);
 8002234:	89fb      	ldrh	r3, [r7, #14]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop

08002244 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
uint32_t DWT_Init(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <DWT_Init+0x58>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4a13      	ldr	r2, [pc, #76]	; (800229c <DWT_Init+0x58>)
 800224e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002252:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <DWT_Init+0x58>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a10      	ldr	r2, [pc, #64]	; (800229c <DWT_Init+0x58>)
 800225a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800225e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002260:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <DWT_Init+0x5c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0e      	ldr	r2, [pc, #56]	; (80022a0 <DWT_Init+0x5c>)
 8002266:	f023 0301 	bic.w	r3, r3, #1
 800226a:	6013      	str	r3, [r2, #0]
    /* Enable clock cycle counter */
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <DWT_Init+0x5c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <DWT_Init+0x5c>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <DWT_Init+0x5c>)
 800227a:	2200      	movs	r2, #0
 800227c:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800227e:	bf00      	nop
    __ASM volatile ("NOP");
 8002280:	bf00      	nop
    __ASM volatile ("NOP");
 8002282:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <DWT_Init+0x5c>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <DWT_Init+0x4c>
    {
    return 0; /*clock cycle counter started*/
 800228c:	2300      	movs	r3, #0
 800228e:	e000      	b.n	8002292 <DWT_Init+0x4e>
    }
    else
    {
    return 1; /*clock cycle counter not started*/
 8002290:	2301      	movs	r3, #1
    }
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000edf0 	.word	0xe000edf0
 80022a0:	e0001000 	.word	0xe0001000

080022a4 <delayMicroseconds>:

    while (DWT->CYCCNT - startTick < delayTicks);
}

void delayMicroseconds(uint32_t us)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 80022ac:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <delayMicroseconds+0x40>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <delayMicroseconds+0x44>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a0d      	ldr	r2, [pc, #52]	; (80022ec <delayMicroseconds+0x48>)
 80022b8:	fba2 2303 	umull	r2, r3, r2, r3
 80022bc:	0c9a      	lsrs	r2, r3, #18
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	fb02 f303 	mul.w	r3, r2, r3
 80022c4:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 80022c6:	bf00      	nop
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <delayMicroseconds+0x40>)
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d8f8      	bhi.n	80022c8 <delayMicroseconds+0x24>
}
 80022d6:	bf00      	nop
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e0001000 	.word	0xe0001000
 80022e8:	20000044 	.word	0x20000044
 80022ec:	431bde83 	.word	0x431bde83

080022f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b0a4      	sub	sp, #144	; 0x90
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022f6:	f000 fbe1 	bl	8002abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022fa:	f000 f8b9 	bl	8002470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022fe:	f000 f99f 	bl	8002640 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002302:	f000 f949 	bl	8002598 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002306:	f000 f971 	bl	80025ec <MX_USART3_UART_Init>
  MX_TIM7_Init();
 800230a:	f000 f90f 	bl	800252c <MX_TIM7_Init>

  DWT_Init();
 800230e:	f7ff ff99 	bl	8002244 <DWT_Init>

  /* USER CODE BEGIN 2 */
  serial_st.uartHdl_pst = &huart2;
 8002312:	4b34      	ldr	r3, [pc, #208]	; (80023e4 <main+0xf4>)
 8002314:	4a34      	ldr	r2, [pc, #208]	; (80023e8 <main+0xf8>)
 8002316:	601a      	str	r2, [r3, #0]
  serial_st.read = Serial_Read;
 8002318:	4b32      	ldr	r3, [pc, #200]	; (80023e4 <main+0xf4>)
 800231a:	4a34      	ldr	r2, [pc, #208]	; (80023ec <main+0xfc>)
 800231c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  serial_st.write = Serial_Write;
 8002320:	4b30      	ldr	r3, [pc, #192]	; (80023e4 <main+0xf4>)
 8002322:	4a33      	ldr	r2, [pc, #204]	; (80023f0 <main+0x100>)
 8002324:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  serial_st.available = Serial_Available;
 8002328:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <main+0xf4>)
 800232a:	4a32      	ldr	r2, [pc, #200]	; (80023f4 <main+0x104>)
 800232c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  serial_st.init = Serial_Init;
 8002330:	4b2c      	ldr	r3, [pc, #176]	; (80023e4 <main+0xf4>)
 8002332:	4a31      	ldr	r2, [pc, #196]	; (80023f8 <main+0x108>)
 8002334:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  serial_st.init(&serial_st);
 8002338:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <main+0xf4>)
 800233a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800233e:	4829      	ldr	r0, [pc, #164]	; (80023e4 <main+0xf4>)
 8002340:	4798      	blx	r3

  Ublox_Gnss_tst ubx_st;
  ubx_st.calcChecksum = Gnss_CalcChecksum;
 8002342:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <main+0x10c>)
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
  ubx_st.checkUbloxInternal = Gnss_CheckUbloxInternal;
 8002346:	4b2e      	ldr	r3, [pc, #184]	; (8002400 <main+0x110>)
 8002348:	65bb      	str	r3, [r7, #88]	; 0x58
  ubx_st.checkUbloxSerial = Gnss_CheckUbloxSerial;
 800234a:	4b2e      	ldr	r3, [pc, #184]	; (8002404 <main+0x114>)
 800234c:	663b      	str	r3, [r7, #96]	; 0x60
  ubx_st.commTypes_en = COMM_TYPE_SERIAL;
 800234e:	2301      	movs	r3, #1
 8002350:	753b      	strb	r3, [r7, #20]
  ubx_st.configureMsg_pf = Gnss_ConfMsg;
 8002352:	4b2d      	ldr	r3, [pc, #180]	; (8002408 <main+0x118>)
 8002354:	62bb      	str	r3, [r7, #40]	; 0x28
  ubx_st.disableNMEAMessage = Gnss_DisableNMEAMessage;
 8002356:	4b2d      	ldr	r3, [pc, #180]	; (800240c <main+0x11c>)
 8002358:	647b      	str	r3, [r7, #68]	; 0x44
  ubx_st.enableNMEAMessage = Gnss_EnableNMEAMessage;
 800235a:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <main+0x120>)
 800235c:	643b      	str	r3, [r7, #64]	; 0x40
  ubx_st.getNavigationFrequencyInternal = Gnss_GetNavigationFrequencyInternal;
 800235e:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <main+0x124>)
 8002360:	653b      	str	r3, [r7, #80]	; 0x50
  ubx_st.getPortSettings = Gnss_GetPortSettings;
 8002362:	4b2d      	ldr	r3, [pc, #180]	; (8002418 <main+0x128>)
 8002364:	67bb      	str	r3, [r7, #120]	; 0x78
  ubx_st.init = Gnss_Init;
 8002366:	4b2d      	ldr	r3, [pc, #180]	; (800241c <main+0x12c>)
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
  ubx_st.initPacketUBXCFGRATE = Gnss_InitPacketUBXCFGRATE;
 800236a:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <main+0x130>)
 800236c:	657b      	str	r3, [r7, #84]	; 0x54
  ubx_st.isConnected = Gnss_IsConnected;
 800236e:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <main+0x134>)
 8002370:	64fb      	str	r3, [r7, #76]	; 0x4c
  ubx_st.isConnectedT = Gnss_IsConnectedT;
 8002372:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <main+0x138>)
 8002374:	64bb      	str	r3, [r7, #72]	; 0x48
  ubx_st.packetCfgPayloadSize = 0u;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  ubx_st.sendCommand = Gnss_SendCmd;
 800237a:	4b2c      	ldr	r3, [pc, #176]	; (800242c <main+0x13c>)
 800237c:	63fb      	str	r3, [r7, #60]	; 0x3c
  ubx_st.sendSerialCommand = Gnss_SendSerialCommand;
 800237e:	4b2c      	ldr	r3, [pc, #176]	; (8002430 <main+0x140>)
 8002380:	63bb      	str	r3, [r7, #56]	; 0x38
  ubx_st.serial_pst = &serial_st;
 8002382:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <main+0xf4>)
 8002384:	61fb      	str	r3, [r7, #28]
  ubx_st.setPacketCfgPayloadSize = Gnss_SetPacketCfgPayloadSize;
 8002386:	4b2b      	ldr	r3, [pc, #172]	; (8002434 <main+0x144>)
 8002388:	623b      	str	r3, [r7, #32]
  ubx_st.setPortOutput = Gnss_SetPortOutput;
 800238a:	4b2b      	ldr	r3, [pc, #172]	; (8002438 <main+0x148>)
 800238c:	677b      	str	r3, [r7, #116]	; 0x74
  ubx_st.setUART1Output = Gnss_SetUART1Output;
 800238e:	4b2b      	ldr	r3, [pc, #172]	; (800243c <main+0x14c>)
 8002390:	67fb      	str	r3, [r7, #124]	; 0x7c
  ubx_st.setUART2Output = Gnss_SetUART2Output;
 8002392:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <main+0x150>)
 8002394:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  ubx_st.waitForACKResponse = Gnss_WaitForACKResponse;
 8002398:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <main+0x154>)
 800239a:	633b      	str	r3, [r7, #48]	; 0x30
  ubx_st.waitForNoACKResponse = Gnss_WaitForNoACKResponse;
 800239c:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <main+0x158>)
 800239e:	637b      	str	r3, [r7, #52]	; 0x34
  ubx_st.process = Gnss_Process;
 80023a0:	4b2a      	ldr	r3, [pc, #168]	; (800244c <main+0x15c>)
 80023a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  ubx_st.printPacket = Gnss_PrintPacket;
 80023a4:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <main+0x160>)
 80023a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  ubx_st.checkAutomatic = Gnss_CheckAutomatic;
 80023aa:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <main+0x164>)
 80023ac:	667b      	str	r3, [r7, #100]	; 0x64
  ubx_st.getMaxPayloadSize = Gnss_GetMaxPayloadSize;
 80023ae:	4b2a      	ldr	r3, [pc, #168]	; (8002458 <main+0x168>)
 80023b0:	66bb      	str	r3, [r7, #104]	; 0x68
  ubx_st.processUBX = Gnss_ProcessUBX;
 80023b2:	4b2a      	ldr	r3, [pc, #168]	; (800245c <main+0x16c>)
 80023b4:	673b      	str	r3, [r7, #112]	; 0x70
  ubx_st.processUBXpacket = Gnss_ProcessUBXpacket;
 80023b6:	4b2a      	ldr	r3, [pc, #168]	; (8002460 <main+0x170>)
 80023b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  ubx_st.extractInt = Gnss_ExtractInt;
 80023bc:	4b29      	ldr	r3, [pc, #164]	; (8002464 <main+0x174>)
 80023be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  ubx_st.addToChecksum = Gnss_AddToChecksum;
 80023c2:	4b29      	ldr	r3, [pc, #164]	; (8002468 <main+0x178>)
 80023c4:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* init gnss */
  ubx_st.init(&ubx_st, &serial_st);
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	1d3a      	adds	r2, r7, #4
 80023ca:	4906      	ldr	r1, [pc, #24]	; (80023e4 <main+0xf4>)
 80023cc:	4610      	mov	r0, r2
 80023ce:	4798      	blx	r3
//  ubx_st.disableNMEAMessage(&ubx_st, UBX_NMEA_RMC, COM_PORT_UART1, 1100);

//  ubx_st.disableNMEAMessage(&ubx_st, UBX_NMEA_GGA, COM_PORT_UART1,  1100);
//  ubx_st.disableNMEAMessage(&ubx_st, UBX_NMEA_VTG, COM_PORT_UART1,  1100);

  ubx_st.setUART1Output(&ubx_st, COM_TYPE_UBX, 1000);
 80023d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023d2:	1d38      	adds	r0, r7, #4
 80023d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023d8:	2101      	movs	r1, #1
 80023da:	4798      	blx	r3
  my_printf("exit main");
 80023dc:	4823      	ldr	r0, [pc, #140]	; (800246c <main+0x17c>)
 80023de:	f7fe fa5d 	bl	800089c <my_printf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80023e2:	e7fe      	b.n	80023e2 <main+0xf2>
 80023e4:	200001fc 	.word	0x200001fc
 80023e8:	20000468 	.word	0x20000468
 80023ec:	080007a5 	.word	0x080007a5
 80023f0:	08000711 	.word	0x08000711
 80023f4:	0800077b 	.word	0x0800077b
 80023f8:	08000759 	.word	0x08000759
 80023fc:	08000c97 	.word	0x08000c97
 8002400:	080011f1 	.word	0x080011f1
 8002404:	0800122b 	.word	0x0800122b
 8002408:	08000925 	.word	0x08000925
 800240c:	0800104d 	.word	0x0800104d
 8002410:	08001011 	.word	0x08001011
 8002414:	08001111 	.word	0x08001111
 8002418:	0800128d 	.word	0x0800128d
 800241c:	080008c1 	.word	0x080008c1
 8002420:	080010c3 	.word	0x080010c3
 8002424:	08001083 	.word	0x08001083
 8002428:	080010a1 	.word	0x080010a1
 800242c:	08000ae5 	.word	0x08000ae5
 8002430:	08000bc9 	.word	0x08000bc9
 8002434:	080009c1 	.word	0x080009c1
 8002438:	080012e9 	.word	0x080012e9
 800243c:	08001351 	.word	0x08001351
 8002440:	08001379 	.word	0x08001379
 8002444:	08000d81 	.word	0x08000d81
 8002448:	08000ed1 	.word	0x08000ed1
 800244c:	080017dd 	.word	0x080017dd
 8002450:	08001c89 	.word	0x08001c89
 8002454:	08001f75 	.word	0x08001f75
 8002458:	080020ad 	.word	0x080020ad
 800245c:	080013a1 	.word	0x080013a1
 8002460:	08001fb3 	.word	0x08001fb3
 8002464:	0800202d 	.word	0x0800202d
 8002468:	08002077 	.word	0x08002077
 800246c:	080064d4 	.word	0x080064d4

08002470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b094      	sub	sp, #80	; 0x50
 8002474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002476:	f107 0320 	add.w	r3, r7, #32
 800247a:	2230      	movs	r2, #48	; 0x30
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f002 fb48 	bl	8004b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002484:	f107 030c 	add.w	r3, r7, #12
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002494:	2300      	movs	r3, #0
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	4b22      	ldr	r3, [pc, #136]	; (8002524 <SystemClock_Config+0xb4>)
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	4a21      	ldr	r2, [pc, #132]	; (8002524 <SystemClock_Config+0xb4>)
 800249e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a2:	6413      	str	r3, [r2, #64]	; 0x40
 80024a4:	4b1f      	ldr	r3, [pc, #124]	; (8002524 <SystemClock_Config+0xb4>)
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024b0:	2300      	movs	r3, #0
 80024b2:	607b      	str	r3, [r7, #4]
 80024b4:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <SystemClock_Config+0xb8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1b      	ldr	r2, [pc, #108]	; (8002528 <SystemClock_Config+0xb8>)
 80024ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b19      	ldr	r3, [pc, #100]	; (8002528 <SystemClock_Config+0xb8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024cc:	2302      	movs	r3, #2
 80024ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024d0:	2301      	movs	r3, #1
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024d4:	2310      	movs	r3, #16
 80024d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80024d8:	2300      	movs	r3, #0
 80024da:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024dc:	f107 0320 	add.w	r3, r7, #32
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fec1 	bl	8003268 <HAL_RCC_OscConfig>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80024ec:	f000 f8d0 	bl	8002690 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024f0:	230f      	movs	r3, #15
 80024f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80024f4:	2300      	movs	r3, #0
 80024f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002500:	2300      	movs	r3, #0
 8002502:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002504:	f107 030c 	add.w	r3, r7, #12
 8002508:	2100      	movs	r1, #0
 800250a:	4618      	mov	r0, r3
 800250c:	f001 f924 	bl	8003758 <HAL_RCC_ClockConfig>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002516:	f000 f8bb 	bl	8002690 <Error_Handler>
  }
}
 800251a:	bf00      	nop
 800251c:	3750      	adds	r7, #80	; 0x50
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800
 8002528:	40007000 	.word	0x40007000

0800252c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002532:	463b      	mov	r3, r7
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <MX_TIM7_Init+0x64>)
 800253c:	4a15      	ldr	r2, [pc, #84]	; (8002594 <MX_TIM7_Init+0x68>)
 800253e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <MX_TIM7_Init+0x64>)
 8002542:	2200      	movs	r2, #0
 8002544:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002546:	4b12      	ldr	r3, [pc, #72]	; (8002590 <MX_TIM7_Init+0x64>)
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800254c:	4b10      	ldr	r3, [pc, #64]	; (8002590 <MX_TIM7_Init+0x64>)
 800254e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002552:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002554:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <MX_TIM7_Init+0x64>)
 8002556:	2200      	movs	r2, #0
 8002558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800255a:	480d      	ldr	r0, [pc, #52]	; (8002590 <MX_TIM7_Init+0x64>)
 800255c:	f001 facc 	bl	8003af8 <HAL_TIM_Base_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002566:	f000 f893 	bl	8002690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002572:	463b      	mov	r3, r7
 8002574:	4619      	mov	r1, r3
 8002576:	4806      	ldr	r0, [pc, #24]	; (8002590 <MX_TIM7_Init+0x64>)
 8002578:	f001 fbae 	bl	8003cd8 <HAL_TIMEx_MasterConfigSynchronization>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002582:	f000 f885 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	200004ac 	.word	0x200004ac
 8002594:	40001400 	.word	0x40001400

08002598 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <MX_USART2_UART_Init+0x4c>)
 800259e:	4a12      	ldr	r2, [pc, #72]	; (80025e8 <MX_USART2_UART_Init+0x50>)
 80025a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <MX_USART2_UART_Init+0x4c>)
 80025a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80025a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <MX_USART2_UART_Init+0x4c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <MX_USART2_UART_Init+0x4c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <MX_USART2_UART_Init+0x4c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025bc:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <MX_USART2_UART_Init+0x4c>)
 80025be:	220c      	movs	r2, #12
 80025c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <MX_USART2_UART_Init+0x4c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <MX_USART2_UART_Init+0x4c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025ce:	4805      	ldr	r0, [pc, #20]	; (80025e4 <MX_USART2_UART_Init+0x4c>)
 80025d0:	f001 fbfe 	bl	8003dd0 <HAL_UART_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025da:	f000 f859 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000468 	.word	0x20000468
 80025e8:	40004400 	.word	0x40004400

080025ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <MX_USART3_UART_Init+0x4c>)
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <MX_USART3_UART_Init+0x50>)
 80025f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <MX_USART3_UART_Init+0x4c>)
 80025f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <MX_USART3_UART_Init+0x4c>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <MX_USART3_UART_Init+0x4c>)
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <MX_USART3_UART_Init+0x4c>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <MX_USART3_UART_Init+0x4c>)
 8002612:	220c      	movs	r2, #12
 8002614:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <MX_USART3_UART_Init+0x4c>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <MX_USART3_UART_Init+0x4c>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002622:	4805      	ldr	r0, [pc, #20]	; (8002638 <MX_USART3_UART_Init+0x4c>)
 8002624:	f001 fbd4 	bl	8003dd0 <HAL_UART_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800262e:	f000 f82f 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000424 	.word	0x20000424
 800263c:	40004800 	.word	0x40004800

08002640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <MX_GPIO_Init+0x4c>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a0f      	ldr	r2, [pc, #60]	; (800268c <MX_GPIO_Init+0x4c>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <MX_GPIO_Init+0x4c>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <MX_GPIO_Init+0x4c>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a08      	ldr	r2, [pc, #32]	; (800268c <MX_GPIO_Init+0x4c>)
 800266c:	f043 0302 	orr.w	r3, r3, #2
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <MX_GPIO_Init+0x4c>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	683b      	ldr	r3, [r7, #0]

}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800

08002690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002694:	b672      	cpsid	i
}
 8002696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002698:	e7fe      	b.n	8002698 <Error_Handler+0x8>
	...

0800269c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <HAL_MspInit+0x4c>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	4a0f      	ldr	r2, [pc, #60]	; (80026e8 <HAL_MspInit+0x4c>)
 80026ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b0:	6453      	str	r3, [r2, #68]	; 0x44
 80026b2:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <HAL_MspInit+0x4c>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <HAL_MspInit+0x4c>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	4a08      	ldr	r2, [pc, #32]	; (80026e8 <HAL_MspInit+0x4c>)
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026cc:	6413      	str	r3, [r2, #64]	; 0x40
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_MspInit+0x4c>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800

080026ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <HAL_TIM_Base_MspInit+0x3c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d10d      	bne.n	800271a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <HAL_TIM_Base_MspInit+0x40>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <HAL_TIM_Base_MspInit+0x40>)
 8002708:	f043 0320 	orr.w	r3, r3, #32
 800270c:	6413      	str	r3, [r2, #64]	; 0x40
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <HAL_TIM_Base_MspInit+0x40>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800271a:	bf00      	nop
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40001400 	.word	0x40001400
 800272c:	40023800 	.word	0x40023800

08002730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08c      	sub	sp, #48	; 0x30
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 031c 	add.w	r3, r7, #28
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a3a      	ldr	r2, [pc, #232]	; (8002838 <HAL_UART_MspInit+0x108>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d134      	bne.n	80027bc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	4b39      	ldr	r3, [pc, #228]	; (800283c <HAL_UART_MspInit+0x10c>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	4a38      	ldr	r2, [pc, #224]	; (800283c <HAL_UART_MspInit+0x10c>)
 800275c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002760:	6413      	str	r3, [r2, #64]	; 0x40
 8002762:	4b36      	ldr	r3, [pc, #216]	; (800283c <HAL_UART_MspInit+0x10c>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	4b32      	ldr	r3, [pc, #200]	; (800283c <HAL_UART_MspInit+0x10c>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a31      	ldr	r2, [pc, #196]	; (800283c <HAL_UART_MspInit+0x10c>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b2f      	ldr	r3, [pc, #188]	; (800283c <HAL_UART_MspInit+0x10c>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800278a:	230c      	movs	r3, #12
 800278c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002796:	2303      	movs	r3, #3
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800279a:	2307      	movs	r3, #7
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279e:	f107 031c 	add.w	r3, r7, #28
 80027a2:	4619      	mov	r1, r3
 80027a4:	4826      	ldr	r0, [pc, #152]	; (8002840 <HAL_UART_MspInit+0x110>)
 80027a6:	f000 fbc3 	bl	8002f30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	2100      	movs	r1, #0
 80027ae:	2026      	movs	r0, #38	; 0x26
 80027b0:	f000 faf5 	bl	8002d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027b4:	2026      	movs	r0, #38	; 0x26
 80027b6:	f000 fb0e 	bl	8002dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027ba:	e039      	b.n	8002830 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a20      	ldr	r2, [pc, #128]	; (8002844 <HAL_UART_MspInit+0x114>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d134      	bne.n	8002830 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	4b1c      	ldr	r3, [pc, #112]	; (800283c <HAL_UART_MspInit+0x10c>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	4a1b      	ldr	r2, [pc, #108]	; (800283c <HAL_UART_MspInit+0x10c>)
 80027d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d4:	6413      	str	r3, [r2, #64]	; 0x40
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_UART_MspInit+0x10c>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <HAL_UART_MspInit+0x10c>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a14      	ldr	r2, [pc, #80]	; (800283c <HAL_UART_MspInit+0x10c>)
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b12      	ldr	r3, [pc, #72]	; (800283c <HAL_UART_MspInit+0x10c>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002804:	2302      	movs	r3, #2
 8002806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280c:	2303      	movs	r3, #3
 800280e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002810:	2307      	movs	r3, #7
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002814:	f107 031c 	add.w	r3, r7, #28
 8002818:	4619      	mov	r1, r3
 800281a:	480b      	ldr	r0, [pc, #44]	; (8002848 <HAL_UART_MspInit+0x118>)
 800281c:	f000 fb88 	bl	8002f30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002820:	2200      	movs	r2, #0
 8002822:	2105      	movs	r1, #5
 8002824:	2027      	movs	r0, #39	; 0x27
 8002826:	f000 faba 	bl	8002d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800282a:	2027      	movs	r0, #39	; 0x27
 800282c:	f000 fad3 	bl	8002dd6 <HAL_NVIC_EnableIRQ>
}
 8002830:	bf00      	nop
 8002832:	3730      	adds	r7, #48	; 0x30
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40004400 	.word	0x40004400
 800283c:	40023800 	.word	0x40023800
 8002840:	40020000 	.word	0x40020000
 8002844:	40004800 	.word	0x40004800
 8002848:	40020400 	.word	0x40020400

0800284c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002850:	e7fe      	b.n	8002850 <NMI_Handler+0x4>

08002852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002856:	e7fe      	b.n	8002856 <HardFault_Handler+0x4>

08002858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800285c:	e7fe      	b.n	800285c <MemManage_Handler+0x4>

0800285e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800285e:	b480      	push	{r7}
 8002860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002862:	e7fe      	b.n	8002862 <BusFault_Handler+0x4>

08002864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002868:	e7fe      	b.n	8002868 <UsageFault_Handler+0x4>

0800286a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002898:	f000 f962 	bl	8002b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}

080028a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028a4:	4802      	ldr	r0, [pc, #8]	; (80028b0 <USART2_IRQHandler+0x10>)
 80028a6:	f001 fba3 	bl	8003ff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000468 	.word	0x20000468

080028b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80028b8:	4802      	ldr	r0, [pc, #8]	; (80028c4 <USART3_IRQHandler+0x10>)
 80028ba:	f001 fb99 	bl	8003ff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000424 	.word	0x20000424

080028c8 <__io_putchar>:

extern UART_HandleTypeDef huart3;

/* Variables */
__attribute__((weak)) int __io_putchar(int ch)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 10000);
 80028d0:	1d39      	adds	r1, r7, #4
 80028d2:	f242 7310 	movw	r3, #10000	; 0x2710
 80028d6:	2201      	movs	r2, #1
 80028d8:	4807      	ldr	r0, [pc, #28]	; (80028f8 <__io_putchar+0x30>)
 80028da:	f001 fac6 	bl	8003e6a <HAL_UART_Transmit>
 80028de:	4603      	mov	r3, r0
 80028e0:	73fb      	strb	r3, [r7, #15]
//    HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(&huart3, (uint8_t *)&ch, 1);
    return (status == HAL_OK ? ch : 0);
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <__io_putchar+0x24>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	e000      	b.n	80028ee <__io_putchar+0x26>
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000424 	.word	0x20000424

080028fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	e00a      	b.n	8002924 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800290e:	f3af 8000 	nop.w
 8002912:	4601      	mov	r1, r0
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	60ba      	str	r2, [r7, #8]
 800291a:	b2ca      	uxtb	r2, r1
 800291c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	3301      	adds	r3, #1
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	429a      	cmp	r2, r3
 800292a:	dbf0      	blt.n	800290e <_read+0x12>
	}

return len;
 800292c:	687b      	ldr	r3, [r7, #4]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b086      	sub	sp, #24
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	e009      	b.n	800295c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	60ba      	str	r2, [r7, #8]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ffb9 	bl	80028c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	3301      	adds	r3, #1
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	429a      	cmp	r2, r3
 8002962:	dbf1      	blt.n	8002948 <_write+0x12>
	}
    return len;
 8002964:	687b      	ldr	r3, [r7, #4]
//        }
//    }
//    errno = EBADF;
//    return -1;

}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <_close>:

int _close(int file)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
	return -1;
 8002976:	f04f 33ff 	mov.w	r3, #4294967295
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002996:	605a      	str	r2, [r3, #4]
	return 0;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <_isatty>:

int _isatty(int file)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
	return 1;
 80029ae:	2301      	movs	r3, #1
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
	return 0;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029e0:	4a14      	ldr	r2, [pc, #80]	; (8002a34 <_sbrk+0x5c>)
 80029e2:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <_sbrk+0x60>)
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029ec:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <_sbrk+0x64>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d102      	bne.n	80029fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029f4:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <_sbrk+0x64>)
 80029f6:	4a12      	ldr	r2, [pc, #72]	; (8002a40 <_sbrk+0x68>)
 80029f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029fa:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <_sbrk+0x64>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d207      	bcs.n	8002a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a08:	f002 f84a 	bl	8004aa0 <__errno>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	220c      	movs	r2, #12
 8002a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a12:	f04f 33ff 	mov.w	r3, #4294967295
 8002a16:	e009      	b.n	8002a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a18:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <_sbrk+0x64>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a1e:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <_sbrk+0x64>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	4a05      	ldr	r2, [pc, #20]	; (8002a3c <_sbrk+0x64>)
 8002a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20020000 	.word	0x20020000
 8002a38:	00000400 	.word	0x00000400
 8002a3c:	200001f0 	.word	0x200001f0
 8002a40:	20000508 	.word	0x20000508

08002a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <SystemInit+0x20>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4e:	4a05      	ldr	r2, [pc, #20]	; (8002a64 <SystemInit+0x20>)
 8002a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a6c:	480d      	ldr	r0, [pc, #52]	; (8002aa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a6e:	490e      	ldr	r1, [pc, #56]	; (8002aa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a70:	4a0e      	ldr	r2, [pc, #56]	; (8002aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a74:	e002      	b.n	8002a7c <LoopCopyDataInit>

08002a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a7a:	3304      	adds	r3, #4

08002a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a80:	d3f9      	bcc.n	8002a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a82:	4a0b      	ldr	r2, [pc, #44]	; (8002ab0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a84:	4c0b      	ldr	r4, [pc, #44]	; (8002ab4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a88:	e001      	b.n	8002a8e <LoopFillZerobss>

08002a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a8c:	3204      	adds	r2, #4

08002a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a90:	d3fb      	bcc.n	8002a8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a92:	f7ff ffd7 	bl	8002a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a96:	f002 f809 	bl	8004aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a9a:	f7ff fc29 	bl	80022f0 <main>
  bx  lr    
 8002a9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aa8:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8002aac:	080065a0 	.word	0x080065a0
  ldr r2, =_sbss
 8002ab0:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8002ab4:	20000508 	.word	0x20000508

08002ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ab8:	e7fe      	b.n	8002ab8 <ADC_IRQHandler>
	...

08002abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ac0:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <HAL_Init+0x40>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0d      	ldr	r2, [pc, #52]	; (8002afc <HAL_Init+0x40>)
 8002ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_Init+0x40>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <HAL_Init+0x40>)
 8002ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ad8:	4b08      	ldr	r3, [pc, #32]	; (8002afc <HAL_Init+0x40>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a07      	ldr	r2, [pc, #28]	; (8002afc <HAL_Init+0x40>)
 8002ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae4:	2003      	movs	r0, #3
 8002ae6:	f000 f94f 	bl	8002d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aea:	2000      	movs	r0, #0
 8002aec:	f000 f808 	bl	8002b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002af0:	f7ff fdd4 	bl	800269c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40023c00 	.word	0x40023c00

08002b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b08:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_InitTick+0x54>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_InitTick+0x58>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	4619      	mov	r1, r3
 8002b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f967 	bl	8002df2 <HAL_SYSTICK_Config>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e00e      	b.n	8002b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b0f      	cmp	r3, #15
 8002b32:	d80a      	bhi.n	8002b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b34:	2200      	movs	r2, #0
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	f04f 30ff 	mov.w	r0, #4294967295
 8002b3c:	f000 f92f 	bl	8002d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b40:	4a06      	ldr	r2, [pc, #24]	; (8002b5c <HAL_InitTick+0x5c>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	e000      	b.n	8002b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000044 	.word	0x20000044
 8002b58:	2000004c 	.word	0x2000004c
 8002b5c:	20000048 	.word	0x20000048

08002b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_IncTick+0x20>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_IncTick+0x24>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4413      	add	r3, r2
 8002b70:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <HAL_IncTick+0x24>)
 8002b72:	6013      	str	r3, [r2, #0]
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	2000004c 	.word	0x2000004c
 8002b84:	200004f4 	.word	0x200004f4

08002b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <HAL_GetTick+0x14>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	200004f4 	.word	0x200004f4

08002ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ba8:	f7ff ffee 	bl	8002b88 <HAL_GetTick>
 8002bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb8:	d005      	beq.n	8002bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <HAL_Delay+0x44>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bc6:	bf00      	nop
 8002bc8:	f7ff ffde 	bl	8002b88 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d8f7      	bhi.n	8002bc8 <HAL_Delay+0x28>
  {
  }
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	2000004c 	.word	0x2000004c

08002be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c04:	4013      	ands	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1a:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	60d3      	str	r3, [r2, #12]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <__NVIC_GetPriorityGrouping+0x18>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	0a1b      	lsrs	r3, r3, #8
 8002c3a:	f003 0307 	and.w	r3, r3, #7
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	db0b      	blt.n	8002c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	4907      	ldr	r1, [pc, #28]	; (8002c84 <__NVIC_EnableIRQ+0x38>)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	e000e100 	.word	0xe000e100

08002c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	6039      	str	r1, [r7, #0]
 8002c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	db0a      	blt.n	8002cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	490c      	ldr	r1, [pc, #48]	; (8002cd4 <__NVIC_SetPriority+0x4c>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	0112      	lsls	r2, r2, #4
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	440b      	add	r3, r1
 8002cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb0:	e00a      	b.n	8002cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	4908      	ldr	r1, [pc, #32]	; (8002cd8 <__NVIC_SetPriority+0x50>)
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	3b04      	subs	r3, #4
 8002cc0:	0112      	lsls	r2, r2, #4
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	761a      	strb	r2, [r3, #24]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000e100 	.word	0xe000e100
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b089      	sub	sp, #36	; 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f1c3 0307 	rsb	r3, r3, #7
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	bf28      	it	cs
 8002cfa:	2304      	movcs	r3, #4
 8002cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3304      	adds	r3, #4
 8002d02:	2b06      	cmp	r3, #6
 8002d04:	d902      	bls.n	8002d0c <NVIC_EncodePriority+0x30>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3b03      	subs	r3, #3
 8002d0a:	e000      	b.n	8002d0e <NVIC_EncodePriority+0x32>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d10:	f04f 32ff 	mov.w	r2, #4294967295
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	401a      	ands	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d24:	f04f 31ff 	mov.w	r1, #4294967295
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	43d9      	mvns	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d34:	4313      	orrs	r3, r2
         );
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3724      	adds	r7, #36	; 0x24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d54:	d301      	bcc.n	8002d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d56:	2301      	movs	r3, #1
 8002d58:	e00f      	b.n	8002d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <SysTick_Config+0x40>)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d62:	210f      	movs	r1, #15
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295
 8002d68:	f7ff ff8e 	bl	8002c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <SysTick_Config+0x40>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d72:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <SysTick_Config+0x40>)
 8002d74:	2207      	movs	r2, #7
 8002d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	e000e010 	.word	0xe000e010

08002d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ff29 	bl	8002be8 <__NVIC_SetPriorityGrouping>
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002db0:	f7ff ff3e 	bl	8002c30 <__NVIC_GetPriorityGrouping>
 8002db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	6978      	ldr	r0, [r7, #20]
 8002dbc:	f7ff ff8e 	bl	8002cdc <NVIC_EncodePriority>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff5d 	bl	8002c88 <__NVIC_SetPriority>
}
 8002dce:	bf00      	nop
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	4603      	mov	r3, r0
 8002dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff31 	bl	8002c4c <__NVIC_EnableIRQ>
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff ffa2 	bl	8002d44 <SysTick_Config>
 8002e00:	4603      	mov	r3, r0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e16:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e18:	f7ff feb6 	bl	8002b88 <HAL_GetTick>
 8002e1c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d008      	beq.n	8002e3c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2280      	movs	r2, #128	; 0x80
 8002e2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e052      	b.n	8002ee2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0216 	bic.w	r2, r2, #22
 8002e4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695a      	ldr	r2, [r3, #20]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e5a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d103      	bne.n	8002e6c <HAL_DMA_Abort+0x62>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d007      	beq.n	8002e7c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0208 	bic.w	r2, r2, #8
 8002e7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e8c:	e013      	b.n	8002eb6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e8e:	f7ff fe7b 	bl	8002b88 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b05      	cmp	r3, #5
 8002e9a:	d90c      	bls.n	8002eb6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2203      	movs	r2, #3
 8002eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e015      	b.n	8002ee2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1e4      	bne.n	8002e8e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec8:	223f      	movs	r2, #63	; 0x3f
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d004      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2280      	movs	r2, #128	; 0x80
 8002f02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e00c      	b.n	8002f22 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2205      	movs	r2, #5
 8002f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b089      	sub	sp, #36	; 0x24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	e16b      	b.n	8003224 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	f040 815a 	bne.w	800321e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d005      	beq.n	8002f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d130      	bne.n	8002fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb8:	2201      	movs	r2, #1
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 0201 	and.w	r2, r3, #1
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d017      	beq.n	8003020 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d123      	bne.n	8003074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	08da      	lsrs	r2, r3, #3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3208      	adds	r2, #8
 8003034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	220f      	movs	r2, #15
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	08da      	lsrs	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3208      	adds	r2, #8
 800306e:	69b9      	ldr	r1, [r7, #24]
 8003070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	2203      	movs	r2, #3
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0203 	and.w	r2, r3, #3
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80b4 	beq.w	800321e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	4b60      	ldr	r3, [pc, #384]	; (800323c <HAL_GPIO_Init+0x30c>)
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	4a5f      	ldr	r2, [pc, #380]	; (800323c <HAL_GPIO_Init+0x30c>)
 80030c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c4:	6453      	str	r3, [r2, #68]	; 0x44
 80030c6:	4b5d      	ldr	r3, [pc, #372]	; (800323c <HAL_GPIO_Init+0x30c>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030d2:	4a5b      	ldr	r2, [pc, #364]	; (8003240 <HAL_GPIO_Init+0x310>)
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	089b      	lsrs	r3, r3, #2
 80030d8:	3302      	adds	r3, #2
 80030da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	220f      	movs	r2, #15
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4013      	ands	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a52      	ldr	r2, [pc, #328]	; (8003244 <HAL_GPIO_Init+0x314>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d02b      	beq.n	8003156 <HAL_GPIO_Init+0x226>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a51      	ldr	r2, [pc, #324]	; (8003248 <HAL_GPIO_Init+0x318>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d025      	beq.n	8003152 <HAL_GPIO_Init+0x222>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a50      	ldr	r2, [pc, #320]	; (800324c <HAL_GPIO_Init+0x31c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01f      	beq.n	800314e <HAL_GPIO_Init+0x21e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a4f      	ldr	r2, [pc, #316]	; (8003250 <HAL_GPIO_Init+0x320>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d019      	beq.n	800314a <HAL_GPIO_Init+0x21a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a4e      	ldr	r2, [pc, #312]	; (8003254 <HAL_GPIO_Init+0x324>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <HAL_GPIO_Init+0x216>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a4d      	ldr	r2, [pc, #308]	; (8003258 <HAL_GPIO_Init+0x328>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00d      	beq.n	8003142 <HAL_GPIO_Init+0x212>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a4c      	ldr	r2, [pc, #304]	; (800325c <HAL_GPIO_Init+0x32c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d007      	beq.n	800313e <HAL_GPIO_Init+0x20e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a4b      	ldr	r2, [pc, #300]	; (8003260 <HAL_GPIO_Init+0x330>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d101      	bne.n	800313a <HAL_GPIO_Init+0x20a>
 8003136:	2307      	movs	r3, #7
 8003138:	e00e      	b.n	8003158 <HAL_GPIO_Init+0x228>
 800313a:	2308      	movs	r3, #8
 800313c:	e00c      	b.n	8003158 <HAL_GPIO_Init+0x228>
 800313e:	2306      	movs	r3, #6
 8003140:	e00a      	b.n	8003158 <HAL_GPIO_Init+0x228>
 8003142:	2305      	movs	r3, #5
 8003144:	e008      	b.n	8003158 <HAL_GPIO_Init+0x228>
 8003146:	2304      	movs	r3, #4
 8003148:	e006      	b.n	8003158 <HAL_GPIO_Init+0x228>
 800314a:	2303      	movs	r3, #3
 800314c:	e004      	b.n	8003158 <HAL_GPIO_Init+0x228>
 800314e:	2302      	movs	r3, #2
 8003150:	e002      	b.n	8003158 <HAL_GPIO_Init+0x228>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <HAL_GPIO_Init+0x228>
 8003156:	2300      	movs	r3, #0
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	f002 0203 	and.w	r2, r2, #3
 800315e:	0092      	lsls	r2, r2, #2
 8003160:	4093      	lsls	r3, r2
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003168:	4935      	ldr	r1, [pc, #212]	; (8003240 <HAL_GPIO_Init+0x310>)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	089b      	lsrs	r3, r3, #2
 800316e:	3302      	adds	r3, #2
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003176:	4b3b      	ldr	r3, [pc, #236]	; (8003264 <HAL_GPIO_Init+0x334>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800319a:	4a32      	ldr	r2, [pc, #200]	; (8003264 <HAL_GPIO_Init+0x334>)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031a0:	4b30      	ldr	r3, [pc, #192]	; (8003264 <HAL_GPIO_Init+0x334>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031c4:	4a27      	ldr	r2, [pc, #156]	; (8003264 <HAL_GPIO_Init+0x334>)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ca:	4b26      	ldr	r3, [pc, #152]	; (8003264 <HAL_GPIO_Init+0x334>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ee:	4a1d      	ldr	r2, [pc, #116]	; (8003264 <HAL_GPIO_Init+0x334>)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f4:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <HAL_GPIO_Init+0x334>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003218:	4a12      	ldr	r2, [pc, #72]	; (8003264 <HAL_GPIO_Init+0x334>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3301      	adds	r3, #1
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2b0f      	cmp	r3, #15
 8003228:	f67f ae90 	bls.w	8002f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	3724      	adds	r7, #36	; 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800
 8003240:	40013800 	.word	0x40013800
 8003244:	40020000 	.word	0x40020000
 8003248:	40020400 	.word	0x40020400
 800324c:	40020800 	.word	0x40020800
 8003250:	40020c00 	.word	0x40020c00
 8003254:	40021000 	.word	0x40021000
 8003258:	40021400 	.word	0x40021400
 800325c:	40021800 	.word	0x40021800
 8003260:	40021c00 	.word	0x40021c00
 8003264:	40013c00 	.word	0x40013c00

08003268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e264      	b.n	8003744 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d075      	beq.n	8003372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003286:	4ba3      	ldr	r3, [pc, #652]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
 800328e:	2b04      	cmp	r3, #4
 8003290:	d00c      	beq.n	80032ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003292:	4ba0      	ldr	r3, [pc, #640]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800329a:	2b08      	cmp	r3, #8
 800329c:	d112      	bne.n	80032c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800329e:	4b9d      	ldr	r3, [pc, #628]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032aa:	d10b      	bne.n	80032c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ac:	4b99      	ldr	r3, [pc, #612]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d05b      	beq.n	8003370 <HAL_RCC_OscConfig+0x108>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d157      	bne.n	8003370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e23f      	b.n	8003744 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032cc:	d106      	bne.n	80032dc <HAL_RCC_OscConfig+0x74>
 80032ce:	4b91      	ldr	r3, [pc, #580]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a90      	ldr	r2, [pc, #576]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e01d      	b.n	8003318 <HAL_RCC_OscConfig+0xb0>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032e4:	d10c      	bne.n	8003300 <HAL_RCC_OscConfig+0x98>
 80032e6:	4b8b      	ldr	r3, [pc, #556]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a8a      	ldr	r2, [pc, #552]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80032ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	4b88      	ldr	r3, [pc, #544]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a87      	ldr	r2, [pc, #540]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80032f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	e00b      	b.n	8003318 <HAL_RCC_OscConfig+0xb0>
 8003300:	4b84      	ldr	r3, [pc, #528]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a83      	ldr	r2, [pc, #524]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 8003306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	4b81      	ldr	r3, [pc, #516]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a80      	ldr	r2, [pc, #512]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 8003312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d013      	beq.n	8003348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7ff fc32 	bl	8002b88 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003328:	f7ff fc2e 	bl	8002b88 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	; 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e204      	b.n	8003744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333a:	4b76      	ldr	r3, [pc, #472]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0xc0>
 8003346:	e014      	b.n	8003372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7ff fc1e 	bl	8002b88 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003350:	f7ff fc1a 	bl	8002b88 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	; 0x64
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e1f0      	b.n	8003744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003362:	4b6c      	ldr	r3, [pc, #432]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0xe8>
 800336e:	e000      	b.n	8003372 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d063      	beq.n	8003446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800337e:	4b65      	ldr	r3, [pc, #404]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00b      	beq.n	80033a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800338a:	4b62      	ldr	r3, [pc, #392]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003392:	2b08      	cmp	r3, #8
 8003394:	d11c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003396:	4b5f      	ldr	r3, [pc, #380]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d116      	bne.n	80033d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033a2:	4b5c      	ldr	r3, [pc, #368]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_RCC_OscConfig+0x152>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d001      	beq.n	80033ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e1c4      	b.n	8003744 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ba:	4b56      	ldr	r3, [pc, #344]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4952      	ldr	r1, [pc, #328]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ce:	e03a      	b.n	8003446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d020      	beq.n	800341a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d8:	4b4f      	ldr	r3, [pc, #316]	; (8003518 <HAL_RCC_OscConfig+0x2b0>)
 80033da:	2201      	movs	r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033de:	f7ff fbd3 	bl	8002b88 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e6:	f7ff fbcf 	bl	8002b88 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e1a5      	b.n	8003744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f8:	4b46      	ldr	r3, [pc, #280]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003404:	4b43      	ldr	r3, [pc, #268]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4940      	ldr	r1, [pc, #256]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 8003414:	4313      	orrs	r3, r2
 8003416:	600b      	str	r3, [r1, #0]
 8003418:	e015      	b.n	8003446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800341a:	4b3f      	ldr	r3, [pc, #252]	; (8003518 <HAL_RCC_OscConfig+0x2b0>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7ff fbb2 	bl	8002b88 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003428:	f7ff fbae 	bl	8002b88 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e184      	b.n	8003744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343a:	4b36      	ldr	r3, [pc, #216]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d030      	beq.n	80034b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d016      	beq.n	8003488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800345a:	4b30      	ldr	r3, [pc, #192]	; (800351c <HAL_RCC_OscConfig+0x2b4>)
 800345c:	2201      	movs	r2, #1
 800345e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003460:	f7ff fb92 	bl	8002b88 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003468:	f7ff fb8e 	bl	8002b88 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e164      	b.n	8003744 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800347a:	4b26      	ldr	r3, [pc, #152]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 800347c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x200>
 8003486:	e015      	b.n	80034b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003488:	4b24      	ldr	r3, [pc, #144]	; (800351c <HAL_RCC_OscConfig+0x2b4>)
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348e:	f7ff fb7b 	bl	8002b88 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003496:	f7ff fb77 	bl	8002b88 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e14d      	b.n	8003744 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a8:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80034aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f0      	bne.n	8003496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80a0 	beq.w	8003602 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c2:	2300      	movs	r3, #0
 80034c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c6:	4b13      	ldr	r3, [pc, #76]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10f      	bne.n	80034f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	4a0e      	ldr	r2, [pc, #56]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e0:	6413      	str	r3, [r2, #64]	; 0x40
 80034e2:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ea:	60bb      	str	r3, [r7, #8]
 80034ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ee:	2301      	movs	r3, #1
 80034f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f2:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <HAL_RCC_OscConfig+0x2b8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d121      	bne.n	8003542 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fe:	4b08      	ldr	r3, [pc, #32]	; (8003520 <HAL_RCC_OscConfig+0x2b8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a07      	ldr	r2, [pc, #28]	; (8003520 <HAL_RCC_OscConfig+0x2b8>)
 8003504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800350a:	f7ff fb3d 	bl	8002b88 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003510:	e011      	b.n	8003536 <HAL_RCC_OscConfig+0x2ce>
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800
 8003518:	42470000 	.word	0x42470000
 800351c:	42470e80 	.word	0x42470e80
 8003520:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003524:	f7ff fb30 	bl	8002b88 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e106      	b.n	8003744 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003536:	4b85      	ldr	r3, [pc, #532]	; (800374c <HAL_RCC_OscConfig+0x4e4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d106      	bne.n	8003558 <HAL_RCC_OscConfig+0x2f0>
 800354a:	4b81      	ldr	r3, [pc, #516]	; (8003750 <HAL_RCC_OscConfig+0x4e8>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	4a80      	ldr	r2, [pc, #512]	; (8003750 <HAL_RCC_OscConfig+0x4e8>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	6713      	str	r3, [r2, #112]	; 0x70
 8003556:	e01c      	b.n	8003592 <HAL_RCC_OscConfig+0x32a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2b05      	cmp	r3, #5
 800355e:	d10c      	bne.n	800357a <HAL_RCC_OscConfig+0x312>
 8003560:	4b7b      	ldr	r3, [pc, #492]	; (8003750 <HAL_RCC_OscConfig+0x4e8>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003564:	4a7a      	ldr	r2, [pc, #488]	; (8003750 <HAL_RCC_OscConfig+0x4e8>)
 8003566:	f043 0304 	orr.w	r3, r3, #4
 800356a:	6713      	str	r3, [r2, #112]	; 0x70
 800356c:	4b78      	ldr	r3, [pc, #480]	; (8003750 <HAL_RCC_OscConfig+0x4e8>)
 800356e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003570:	4a77      	ldr	r2, [pc, #476]	; (8003750 <HAL_RCC_OscConfig+0x4e8>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6713      	str	r3, [r2, #112]	; 0x70
 8003578:	e00b      	b.n	8003592 <HAL_RCC_OscConfig+0x32a>
 800357a:	4b75      	ldr	r3, [pc, #468]	; (8003750 <HAL_RCC_OscConfig+0x4e8>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	4a74      	ldr	r2, [pc, #464]	; (8003750 <HAL_RCC_OscConfig+0x4e8>)
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	6713      	str	r3, [r2, #112]	; 0x70
 8003586:	4b72      	ldr	r3, [pc, #456]	; (8003750 <HAL_RCC_OscConfig+0x4e8>)
 8003588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358a:	4a71      	ldr	r2, [pc, #452]	; (8003750 <HAL_RCC_OscConfig+0x4e8>)
 800358c:	f023 0304 	bic.w	r3, r3, #4
 8003590:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d015      	beq.n	80035c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359a:	f7ff faf5 	bl	8002b88 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a0:	e00a      	b.n	80035b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a2:	f7ff faf1 	bl	8002b88 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e0c5      	b.n	8003744 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b8:	4b65      	ldr	r3, [pc, #404]	; (8003750 <HAL_RCC_OscConfig+0x4e8>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0ee      	beq.n	80035a2 <HAL_RCC_OscConfig+0x33a>
 80035c4:	e014      	b.n	80035f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c6:	f7ff fadf 	bl	8002b88 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035cc:	e00a      	b.n	80035e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7ff fadb 	bl	8002b88 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e0af      	b.n	8003744 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e4:	4b5a      	ldr	r3, [pc, #360]	; (8003750 <HAL_RCC_OscConfig+0x4e8>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1ee      	bne.n	80035ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d105      	bne.n	8003602 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f6:	4b56      	ldr	r3, [pc, #344]	; (8003750 <HAL_RCC_OscConfig+0x4e8>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	4a55      	ldr	r2, [pc, #340]	; (8003750 <HAL_RCC_OscConfig+0x4e8>)
 80035fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003600:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 809b 	beq.w	8003742 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800360c:	4b50      	ldr	r3, [pc, #320]	; (8003750 <HAL_RCC_OscConfig+0x4e8>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b08      	cmp	r3, #8
 8003616:	d05c      	beq.n	80036d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d141      	bne.n	80036a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003620:	4b4c      	ldr	r3, [pc, #304]	; (8003754 <HAL_RCC_OscConfig+0x4ec>)
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003626:	f7ff faaf 	bl	8002b88 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800362e:	f7ff faab 	bl	8002b88 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e081      	b.n	8003744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003640:	4b43      	ldr	r3, [pc, #268]	; (8003750 <HAL_RCC_OscConfig+0x4e8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f0      	bne.n	800362e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	019b      	lsls	r3, r3, #6
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	3b01      	subs	r3, #1
 8003666:	041b      	lsls	r3, r3, #16
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	061b      	lsls	r3, r3, #24
 8003670:	4937      	ldr	r1, [pc, #220]	; (8003750 <HAL_RCC_OscConfig+0x4e8>)
 8003672:	4313      	orrs	r3, r2
 8003674:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003676:	4b37      	ldr	r3, [pc, #220]	; (8003754 <HAL_RCC_OscConfig+0x4ec>)
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7ff fa84 	bl	8002b88 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003684:	f7ff fa80 	bl	8002b88 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e056      	b.n	8003744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003696:	4b2e      	ldr	r3, [pc, #184]	; (8003750 <HAL_RCC_OscConfig+0x4e8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0x41c>
 80036a2:	e04e      	b.n	8003742 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a4:	4b2b      	ldr	r3, [pc, #172]	; (8003754 <HAL_RCC_OscConfig+0x4ec>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7ff fa6d 	bl	8002b88 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b2:	f7ff fa69 	bl	8002b88 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e03f      	b.n	8003744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c4:	4b22      	ldr	r3, [pc, #136]	; (8003750 <HAL_RCC_OscConfig+0x4e8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f0      	bne.n	80036b2 <HAL_RCC_OscConfig+0x44a>
 80036d0:	e037      	b.n	8003742 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e032      	b.n	8003744 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036de:	4b1c      	ldr	r3, [pc, #112]	; (8003750 <HAL_RCC_OscConfig+0x4e8>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d028      	beq.n	800373e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d121      	bne.n	800373e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003704:	429a      	cmp	r2, r3
 8003706:	d11a      	bne.n	800373e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800370e:	4013      	ands	r3, r2
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003714:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003716:	4293      	cmp	r3, r2
 8003718:	d111      	bne.n	800373e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	3b01      	subs	r3, #1
 8003728:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800372a:	429a      	cmp	r2, r3
 800372c:	d107      	bne.n	800373e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003738:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800373a:	429a      	cmp	r2, r3
 800373c:	d001      	beq.n	8003742 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40007000 	.word	0x40007000
 8003750:	40023800 	.word	0x40023800
 8003754:	42470060 	.word	0x42470060

08003758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0cc      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800376c:	4b68      	ldr	r3, [pc, #416]	; (8003910 <HAL_RCC_ClockConfig+0x1b8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d90c      	bls.n	8003794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377a:	4b65      	ldr	r3, [pc, #404]	; (8003910 <HAL_RCC_ClockConfig+0x1b8>)
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003782:	4b63      	ldr	r3, [pc, #396]	; (8003910 <HAL_RCC_ClockConfig+0x1b8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d001      	beq.n	8003794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0b8      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d020      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037ac:	4b59      	ldr	r3, [pc, #356]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	4a58      	ldr	r2, [pc, #352]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037c4:	4b53      	ldr	r3, [pc, #332]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	4a52      	ldr	r2, [pc, #328]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d0:	4b50      	ldr	r3, [pc, #320]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	494d      	ldr	r1, [pc, #308]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d044      	beq.n	8003878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f6:	4b47      	ldr	r3, [pc, #284]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d119      	bne.n	8003836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e07f      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d003      	beq.n	8003816 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003812:	2b03      	cmp	r3, #3
 8003814:	d107      	bne.n	8003826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003816:	4b3f      	ldr	r3, [pc, #252]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d109      	bne.n	8003836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e06f      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003826:	4b3b      	ldr	r3, [pc, #236]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e067      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003836:	4b37      	ldr	r3, [pc, #220]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f023 0203 	bic.w	r2, r3, #3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	4934      	ldr	r1, [pc, #208]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	4313      	orrs	r3, r2
 8003846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003848:	f7ff f99e 	bl	8002b88 <HAL_GetTick>
 800384c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384e:	e00a      	b.n	8003866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003850:	f7ff f99a 	bl	8002b88 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	; 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e04f      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003866:	4b2b      	ldr	r3, [pc, #172]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 020c 	and.w	r2, r3, #12
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	429a      	cmp	r2, r3
 8003876:	d1eb      	bne.n	8003850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003878:	4b25      	ldr	r3, [pc, #148]	; (8003910 <HAL_RCC_ClockConfig+0x1b8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d20c      	bcs.n	80038a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003886:	4b22      	ldr	r3, [pc, #136]	; (8003910 <HAL_RCC_ClockConfig+0x1b8>)
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800388e:	4b20      	ldr	r3, [pc, #128]	; (8003910 <HAL_RCC_ClockConfig+0x1b8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d001      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e032      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ac:	4b19      	ldr	r3, [pc, #100]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4916      	ldr	r1, [pc, #88]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ca:	4b12      	ldr	r3, [pc, #72]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	490e      	ldr	r1, [pc, #56]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038de:	f000 f821 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 80038e2:	4602      	mov	r2, r0
 80038e4:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	490a      	ldr	r1, [pc, #40]	; (8003918 <HAL_RCC_ClockConfig+0x1c0>)
 80038f0:	5ccb      	ldrb	r3, [r1, r3]
 80038f2:	fa22 f303 	lsr.w	r3, r2, r3
 80038f6:	4a09      	ldr	r2, [pc, #36]	; (800391c <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038fa:	4b09      	ldr	r3, [pc, #36]	; (8003920 <HAL_RCC_ClockConfig+0x1c8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff f8fe 	bl	8002b00 <HAL_InitTick>

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40023c00 	.word	0x40023c00
 8003914:	40023800 	.word	0x40023800
 8003918:	080064e0 	.word	0x080064e0
 800391c:	20000044 	.word	0x20000044
 8003920:	20000048 	.word	0x20000048

08003924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003924:	b5b0      	push	{r4, r5, r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800392a:	2100      	movs	r1, #0
 800392c:	6079      	str	r1, [r7, #4]
 800392e:	2100      	movs	r1, #0
 8003930:	60f9      	str	r1, [r7, #12]
 8003932:	2100      	movs	r1, #0
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003936:	2100      	movs	r1, #0
 8003938:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800393a:	4952      	ldr	r1, [pc, #328]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x160>)
 800393c:	6889      	ldr	r1, [r1, #8]
 800393e:	f001 010c 	and.w	r1, r1, #12
 8003942:	2908      	cmp	r1, #8
 8003944:	d00d      	beq.n	8003962 <HAL_RCC_GetSysClockFreq+0x3e>
 8003946:	2908      	cmp	r1, #8
 8003948:	f200 8094 	bhi.w	8003a74 <HAL_RCC_GetSysClockFreq+0x150>
 800394c:	2900      	cmp	r1, #0
 800394e:	d002      	beq.n	8003956 <HAL_RCC_GetSysClockFreq+0x32>
 8003950:	2904      	cmp	r1, #4
 8003952:	d003      	beq.n	800395c <HAL_RCC_GetSysClockFreq+0x38>
 8003954:	e08e      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003956:	4b4c      	ldr	r3, [pc, #304]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x164>)
 8003958:	60bb      	str	r3, [r7, #8]
       break;
 800395a:	e08e      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800395c:	4b4b      	ldr	r3, [pc, #300]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x168>)
 800395e:	60bb      	str	r3, [r7, #8]
      break;
 8003960:	e08b      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003962:	4948      	ldr	r1, [pc, #288]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x160>)
 8003964:	6849      	ldr	r1, [r1, #4]
 8003966:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800396a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800396c:	4945      	ldr	r1, [pc, #276]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x160>)
 800396e:	6849      	ldr	r1, [r1, #4]
 8003970:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003974:	2900      	cmp	r1, #0
 8003976:	d024      	beq.n	80039c2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003978:	4942      	ldr	r1, [pc, #264]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x160>)
 800397a:	6849      	ldr	r1, [r1, #4]
 800397c:	0989      	lsrs	r1, r1, #6
 800397e:	4608      	mov	r0, r1
 8003980:	f04f 0100 	mov.w	r1, #0
 8003984:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003988:	f04f 0500 	mov.w	r5, #0
 800398c:	ea00 0204 	and.w	r2, r0, r4
 8003990:	ea01 0305 	and.w	r3, r1, r5
 8003994:	493d      	ldr	r1, [pc, #244]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x168>)
 8003996:	fb01 f003 	mul.w	r0, r1, r3
 800399a:	2100      	movs	r1, #0
 800399c:	fb01 f102 	mul.w	r1, r1, r2
 80039a0:	1844      	adds	r4, r0, r1
 80039a2:	493a      	ldr	r1, [pc, #232]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x168>)
 80039a4:	fba2 0101 	umull	r0, r1, r2, r1
 80039a8:	1863      	adds	r3, r4, r1
 80039aa:	4619      	mov	r1, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	461a      	mov	r2, r3
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	f7fc fc5c 	bl	8000270 <__aeabi_uldivmod>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4613      	mov	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	e04a      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c2:	4b30      	ldr	r3, [pc, #192]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x160>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	099b      	lsrs	r3, r3, #6
 80039c8:	461a      	mov	r2, r3
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039d2:	f04f 0100 	mov.w	r1, #0
 80039d6:	ea02 0400 	and.w	r4, r2, r0
 80039da:	ea03 0501 	and.w	r5, r3, r1
 80039de:	4620      	mov	r0, r4
 80039e0:	4629      	mov	r1, r5
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	014b      	lsls	r3, r1, #5
 80039ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039f0:	0142      	lsls	r2, r0, #5
 80039f2:	4610      	mov	r0, r2
 80039f4:	4619      	mov	r1, r3
 80039f6:	1b00      	subs	r0, r0, r4
 80039f8:	eb61 0105 	sbc.w	r1, r1, r5
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	018b      	lsls	r3, r1, #6
 8003a06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a0a:	0182      	lsls	r2, r0, #6
 8003a0c:	1a12      	subs	r2, r2, r0
 8003a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a12:	f04f 0000 	mov.w	r0, #0
 8003a16:	f04f 0100 	mov.w	r1, #0
 8003a1a:	00d9      	lsls	r1, r3, #3
 8003a1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a20:	00d0      	lsls	r0, r2, #3
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	1912      	adds	r2, r2, r4
 8003a28:	eb45 0303 	adc.w	r3, r5, r3
 8003a2c:	f04f 0000 	mov.w	r0, #0
 8003a30:	f04f 0100 	mov.w	r1, #0
 8003a34:	0299      	lsls	r1, r3, #10
 8003a36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a3a:	0290      	lsls	r0, r2, #10
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4610      	mov	r0, r2
 8003a42:	4619      	mov	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	461a      	mov	r2, r3
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	f7fc fc10 	bl	8000270 <__aeabi_uldivmod>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4613      	mov	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a58:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	0c1b      	lsrs	r3, r3, #16
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	3301      	adds	r3, #1
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a70:	60bb      	str	r3, [r7, #8]
      break;
 8003a72:	e002      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a74:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a76:	60bb      	str	r3, [r7, #8]
      break;
 8003a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bdb0      	pop	{r4, r5, r7, pc}
 8003a84:	40023800 	.word	0x40023800
 8003a88:	00f42400 	.word	0x00f42400
 8003a8c:	017d7840 	.word	0x017d7840

08003a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a94:	4b03      	ldr	r3, [pc, #12]	; (8003aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a96:	681b      	ldr	r3, [r3, #0]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000044 	.word	0x20000044

08003aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003aac:	f7ff fff0 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	0a9b      	lsrs	r3, r3, #10
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	4903      	ldr	r1, [pc, #12]	; (8003acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003abe:	5ccb      	ldrb	r3, [r1, r3]
 8003ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	080064f0 	.word	0x080064f0

08003ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ad4:	f7ff ffdc 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	0b5b      	lsrs	r3, r3, #13
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	4903      	ldr	r1, [pc, #12]	; (8003af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ae6:	5ccb      	ldrb	r3, [r1, r3]
 8003ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40023800 	.word	0x40023800
 8003af4:	080064f0 	.word	0x080064f0

08003af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e041      	b.n	8003b8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fe fde4 	bl	80026ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3304      	adds	r3, #4
 8003b34:	4619      	mov	r1, r3
 8003b36:	4610      	mov	r0, r2
 8003b38:	f000 f82e 	bl	8003b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a40      	ldr	r2, [pc, #256]	; (8003cac <TIM_Base_SetConfig+0x114>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d013      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb6:	d00f      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a3d      	ldr	r2, [pc, #244]	; (8003cb0 <TIM_Base_SetConfig+0x118>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00b      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a3c      	ldr	r2, [pc, #240]	; (8003cb4 <TIM_Base_SetConfig+0x11c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d007      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a3b      	ldr	r2, [pc, #236]	; (8003cb8 <TIM_Base_SetConfig+0x120>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a3a      	ldr	r2, [pc, #232]	; (8003cbc <TIM_Base_SetConfig+0x124>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d108      	bne.n	8003bea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a2f      	ldr	r2, [pc, #188]	; (8003cac <TIM_Base_SetConfig+0x114>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d02b      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf8:	d027      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a2c      	ldr	r2, [pc, #176]	; (8003cb0 <TIM_Base_SetConfig+0x118>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d023      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a2b      	ldr	r2, [pc, #172]	; (8003cb4 <TIM_Base_SetConfig+0x11c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01f      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a2a      	ldr	r2, [pc, #168]	; (8003cb8 <TIM_Base_SetConfig+0x120>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d01b      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a29      	ldr	r2, [pc, #164]	; (8003cbc <TIM_Base_SetConfig+0x124>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d017      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a28      	ldr	r2, [pc, #160]	; (8003cc0 <TIM_Base_SetConfig+0x128>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d013      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a27      	ldr	r2, [pc, #156]	; (8003cc4 <TIM_Base_SetConfig+0x12c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00f      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a26      	ldr	r2, [pc, #152]	; (8003cc8 <TIM_Base_SetConfig+0x130>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00b      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a25      	ldr	r2, [pc, #148]	; (8003ccc <TIM_Base_SetConfig+0x134>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a24      	ldr	r2, [pc, #144]	; (8003cd0 <TIM_Base_SetConfig+0x138>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d003      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a23      	ldr	r2, [pc, #140]	; (8003cd4 <TIM_Base_SetConfig+0x13c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d108      	bne.n	8003c5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a0a      	ldr	r2, [pc, #40]	; (8003cac <TIM_Base_SetConfig+0x114>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d003      	beq.n	8003c90 <TIM_Base_SetConfig+0xf8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a0c      	ldr	r2, [pc, #48]	; (8003cbc <TIM_Base_SetConfig+0x124>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d103      	bne.n	8003c98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	615a      	str	r2, [r3, #20]
}
 8003c9e:	bf00      	nop
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40010000 	.word	0x40010000
 8003cb0:	40000400 	.word	0x40000400
 8003cb4:	40000800 	.word	0x40000800
 8003cb8:	40000c00 	.word	0x40000c00
 8003cbc:	40010400 	.word	0x40010400
 8003cc0:	40014000 	.word	0x40014000
 8003cc4:	40014400 	.word	0x40014400
 8003cc8:	40014800 	.word	0x40014800
 8003ccc:	40001800 	.word	0x40001800
 8003cd0:	40001c00 	.word	0x40001c00
 8003cd4:	40002000 	.word	0x40002000

08003cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e05a      	b.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a21      	ldr	r2, [pc, #132]	; (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d022      	beq.n	8003d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3c:	d01d      	beq.n	8003d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a1d      	ldr	r2, [pc, #116]	; (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d018      	beq.n	8003d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a1b      	ldr	r2, [pc, #108]	; (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d013      	beq.n	8003d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1a      	ldr	r2, [pc, #104]	; (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00e      	beq.n	8003d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a18      	ldr	r2, [pc, #96]	; (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d009      	beq.n	8003d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a17      	ldr	r2, [pc, #92]	; (8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d004      	beq.n	8003d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a15      	ldr	r2, [pc, #84]	; (8003dcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d10c      	bne.n	8003d94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40010000 	.word	0x40010000
 8003db8:	40000400 	.word	0x40000400
 8003dbc:	40000800 	.word	0x40000800
 8003dc0:	40000c00 	.word	0x40000c00
 8003dc4:	40010400 	.word	0x40010400
 8003dc8:	40014000 	.word	0x40014000
 8003dcc:	40001800 	.word	0x40001800

08003dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e03f      	b.n	8003e62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fe fc9a 	bl	8002730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2224      	movs	r2, #36	; 0x24
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fc7b 	bl	8004710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	691a      	ldr	r2, [r3, #16]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695a      	ldr	r2, [r3, #20]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b08a      	sub	sp, #40	; 0x28
 8003e6e:	af02      	add	r7, sp, #8
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	603b      	str	r3, [r7, #0]
 8003e76:	4613      	mov	r3, r2
 8003e78:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d17c      	bne.n	8003f84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <HAL_UART_Transmit+0x2c>
 8003e90:	88fb      	ldrh	r3, [r7, #6]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e075      	b.n	8003f86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_UART_Transmit+0x3e>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e06e      	b.n	8003f86 <HAL_UART_Transmit+0x11c>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2221      	movs	r2, #33	; 0x21
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ebe:	f7fe fe63 	bl	8002b88 <HAL_GetTick>
 8003ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	88fa      	ldrh	r2, [r7, #6]
 8003ec8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	88fa      	ldrh	r2, [r7, #6]
 8003ece:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed8:	d108      	bne.n	8003eec <HAL_UART_Transmit+0x82>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d104      	bne.n	8003eec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	e003      	b.n	8003ef4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003efc:	e02a      	b.n	8003f54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2200      	movs	r2, #0
 8003f06:	2180      	movs	r1, #128	; 0x80
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fa3d 	bl	8004388 <UART_WaitOnFlagUntilTimeout>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e036      	b.n	8003f86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10b      	bne.n	8003f36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	3302      	adds	r3, #2
 8003f32:	61bb      	str	r3, [r7, #24]
 8003f34:	e007      	b.n	8003f46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	781a      	ldrb	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	3301      	adds	r3, #1
 8003f44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1cf      	bne.n	8003efe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2200      	movs	r2, #0
 8003f66:	2140      	movs	r1, #64	; 0x40
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fa0d 	bl	8004388 <UART_WaitOnFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e006      	b.n	8003f86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	e000      	b.n	8003f86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f84:	2302      	movs	r3, #2
  }
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b084      	sub	sp, #16
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	d11d      	bne.n	8003fe4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_UART_Receive_IT+0x26>
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e016      	b.n	8003fe6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_UART_Receive_IT+0x38>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e00f      	b.n	8003fe6 <HAL_UART_Receive_IT+0x58>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 fa1e 	bl	800441c <UART_Start_Receive_IT>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	e000      	b.n	8003fe6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003fe4:	2302      	movs	r3, #2
  }
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08a      	sub	sp, #40	; 0x28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004010:	2300      	movs	r3, #0
 8004012:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10d      	bne.n	8004042 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <HAL_UART_IRQHandler+0x52>
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fad1 	bl	80045e2 <UART_Receive_IT>
      return;
 8004040:	e17c      	b.n	800433c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 80b1 	beq.w	80041ac <HAL_UART_IRQHandler+0x1bc>
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d105      	bne.n	8004060 <HAL_UART_IRQHandler+0x70>
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 80a6 	beq.w	80041ac <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <HAL_UART_IRQHandler+0x90>
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	f043 0201 	orr.w	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <HAL_UART_IRQHandler+0xb0>
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	f043 0202 	orr.w	r2, r3, #2
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_UART_IRQHandler+0xd0>
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	f043 0204 	orr.w	r2, r3, #4
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00f      	beq.n	80040ea <HAL_UART_IRQHandler+0xfa>
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d104      	bne.n	80040de <HAL_UART_IRQHandler+0xee>
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d005      	beq.n	80040ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f043 0208 	orr.w	r2, r3, #8
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 811f 	beq.w	8004332 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d007      	beq.n	800410e <HAL_UART_IRQHandler+0x11e>
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 fa6a 	bl	80045e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004118:	2b40      	cmp	r3, #64	; 0x40
 800411a:	bf0c      	ite	eq
 800411c:	2301      	moveq	r3, #1
 800411e:	2300      	movne	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d102      	bne.n	8004136 <HAL_UART_IRQHandler+0x146>
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d031      	beq.n	800419a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f9aa 	bl	8004490 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004146:	2b40      	cmp	r3, #64	; 0x40
 8004148:	d123      	bne.n	8004192 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695a      	ldr	r2, [r3, #20]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004158:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415e:	2b00      	cmp	r3, #0
 8004160:	d013      	beq.n	800418a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	4a77      	ldr	r2, [pc, #476]	; (8004344 <HAL_UART_IRQHandler+0x354>)
 8004168:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe febb 	bl	8002eea <HAL_DMA_Abort_IT>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d016      	beq.n	80041a8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004184:	4610      	mov	r0, r2
 8004186:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004188:	e00e      	b.n	80041a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f8e6 	bl	800435c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004190:	e00a      	b.n	80041a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f8e2 	bl	800435c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004198:	e006      	b.n	80041a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f8de 	bl	800435c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80041a6:	e0c4      	b.n	8004332 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a8:	bf00      	nop
    return;
 80041aa:	e0c2      	b.n	8004332 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	f040 80a2 	bne.w	80042fa <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 809c 	beq.w	80042fa <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	f003 0310 	and.w	r3, r3, #16
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 8096 	beq.w	80042fa <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ee:	2b40      	cmp	r3, #64	; 0x40
 80041f0:	d14f      	bne.n	8004292 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80041fc:	8a3b      	ldrh	r3, [r7, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 8099 	beq.w	8004336 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004208:	8a3a      	ldrh	r2, [r7, #16]
 800420a:	429a      	cmp	r2, r3
 800420c:	f080 8093 	bcs.w	8004336 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8a3a      	ldrh	r2, [r7, #16]
 8004214:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004220:	d02b      	beq.n	800427a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004230:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0201 	bic.w	r2, r2, #1
 8004240:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695a      	ldr	r2, [r3, #20]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004250:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0210 	bic.w	r2, r2, #16
 800426e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	4618      	mov	r0, r3
 8004276:	f7fe fdc8 	bl	8002e0a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004282:	b29b      	uxth	r3, r3
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	b29b      	uxth	r3, r3
 8004288:	4619      	mov	r1, r3
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f870 	bl	8004370 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004290:	e051      	b.n	8004336 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800429a:	b29b      	uxth	r3, r3
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d047      	beq.n	800433a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80042aa:	8a7b      	ldrh	r3, [r7, #18]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d044      	beq.n	800433a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042be:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0201 	bic.w	r2, r2, #1
 80042ce:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0210 	bic.w	r2, r2, #16
 80042ec:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042ee:	8a7b      	ldrh	r3, [r7, #18]
 80042f0:	4619      	mov	r1, r3
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f83c 	bl	8004370 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80042f8:	e01f      	b.n	800433a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004300:	2b00      	cmp	r3, #0
 8004302:	d008      	beq.n	8004316 <HAL_UART_IRQHandler+0x326>
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f8ff 	bl	8004512 <UART_Transmit_IT>
    return;
 8004314:	e012      	b.n	800433c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00d      	beq.n	800433c <HAL_UART_IRQHandler+0x34c>
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d008      	beq.n	800433c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f941 	bl	80045b2 <UART_EndTransmit_IT>
    return;
 8004330:	e004      	b.n	800433c <HAL_UART_IRQHandler+0x34c>
    return;
 8004332:	bf00      	nop
 8004334:	e002      	b.n	800433c <HAL_UART_IRQHandler+0x34c>
      return;
 8004336:	bf00      	nop
 8004338:	e000      	b.n	800433c <HAL_UART_IRQHandler+0x34c>
      return;
 800433a:	bf00      	nop
  }
}
 800433c:	3728      	adds	r7, #40	; 0x28
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	080044eb 	.word	0x080044eb

08004348 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	4613      	mov	r3, r2
 8004396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004398:	e02c      	b.n	80043f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d028      	beq.n	80043f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d007      	beq.n	80043b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80043a8:	f7fe fbee 	bl	8002b88 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d21d      	bcs.n	80043f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695a      	ldr	r2, [r3, #20]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e00f      	b.n	8004414 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4013      	ands	r3, r2
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	429a      	cmp	r2, r3
 8004402:	bf0c      	ite	eq
 8004404:	2301      	moveq	r3, #1
 8004406:	2300      	movne	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	429a      	cmp	r2, r3
 8004410:	d0c3      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	4613      	mov	r3, r2
 8004428:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	88fa      	ldrh	r2, [r7, #6]
 8004434:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	88fa      	ldrh	r2, [r7, #6]
 800443a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2222      	movs	r2, #34	; 0x22
 8004446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004460:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695a      	ldr	r2, [r3, #20]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0201 	orr.w	r2, r2, #1
 8004470:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0220 	orr.w	r2, r2, #32
 8004480:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0201 	bic.w	r2, r2, #1
 80044b6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d107      	bne.n	80044d0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0210 	bic.w	r2, r2, #16
 80044ce:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7ff ff29 	bl	800435c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800450a:	bf00      	nop
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004512:	b480      	push	{r7}
 8004514:	b085      	sub	sp, #20
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b21      	cmp	r3, #33	; 0x21
 8004524:	d13e      	bne.n	80045a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800452e:	d114      	bne.n	800455a <UART_Transmit_IT+0x48>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d110      	bne.n	800455a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800454c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	1c9a      	adds	r2, r3, #2
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	621a      	str	r2, [r3, #32]
 8004558:	e008      	b.n	800456c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	1c59      	adds	r1, r3, #1
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6211      	str	r1, [r2, #32]
 8004564:	781a      	ldrb	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004570:	b29b      	uxth	r3, r3
 8004572:	3b01      	subs	r3, #1
 8004574:	b29b      	uxth	r3, r3
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	4619      	mov	r1, r3
 800457a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10f      	bne.n	80045a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800458e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800459e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	e000      	b.n	80045a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045a4:	2302      	movs	r3, #2
  }
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7ff feb8 	bl	8004348 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b22      	cmp	r3, #34	; 0x22
 80045f4:	f040 8087 	bne.w	8004706 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004600:	d117      	bne.n	8004632 <UART_Receive_IT+0x50>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d113      	bne.n	8004632 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004612:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	b29b      	uxth	r3, r3
 800461c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004620:	b29a      	uxth	r2, r3
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	1c9a      	adds	r2, r3, #2
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	629a      	str	r2, [r3, #40]	; 0x28
 8004630:	e026      	b.n	8004680 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004638:	2300      	movs	r3, #0
 800463a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004644:	d007      	beq.n	8004656 <UART_Receive_IT+0x74>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10a      	bne.n	8004664 <UART_Receive_IT+0x82>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	b2da      	uxtb	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	e008      	b.n	8004676 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004670:	b2da      	uxtb	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b01      	subs	r3, #1
 8004688:	b29b      	uxth	r3, r3
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	4619      	mov	r1, r3
 800468e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004690:	2b00      	cmp	r3, #0
 8004692:	d136      	bne.n	8004702 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0220 	bic.w	r2, r2, #32
 80046a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695a      	ldr	r2, [r3, #20]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d10e      	bne.n	80046f2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0210 	bic.w	r2, r2, #16
 80046e2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046e8:	4619      	mov	r1, r3
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff fe40 	bl	8004370 <HAL_UARTEx_RxEventCallback>
 80046f0:	e002      	b.n	80046f8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fc f874 	bl	80007e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	e002      	b.n	8004708 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	e000      	b.n	8004708 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004706:	2302      	movs	r3, #2
  }
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004714:	b09f      	sub	sp, #124	; 0x7c
 8004716:	af00      	add	r7, sp, #0
 8004718:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800471a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004726:	68d9      	ldr	r1, [r3, #12]
 8004728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	ea40 0301 	orr.w	r3, r0, r1
 8004730:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	431a      	orrs	r2, r3
 800473c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	431a      	orrs	r2, r3
 8004742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	4313      	orrs	r3, r2
 8004748:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800474a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004754:	f021 010c 	bic.w	r1, r1, #12
 8004758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800475e:	430b      	orrs	r3, r1
 8004760:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800476c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800476e:	6999      	ldr	r1, [r3, #24]
 8004770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	ea40 0301 	orr.w	r3, r0, r1
 8004778:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800477a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	4bc5      	ldr	r3, [pc, #788]	; (8004a94 <UART_SetConfig+0x384>)
 8004780:	429a      	cmp	r2, r3
 8004782:	d004      	beq.n	800478e <UART_SetConfig+0x7e>
 8004784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	4bc3      	ldr	r3, [pc, #780]	; (8004a98 <UART_SetConfig+0x388>)
 800478a:	429a      	cmp	r2, r3
 800478c:	d103      	bne.n	8004796 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800478e:	f7ff f99f 	bl	8003ad0 <HAL_RCC_GetPCLK2Freq>
 8004792:	6778      	str	r0, [r7, #116]	; 0x74
 8004794:	e002      	b.n	800479c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004796:	f7ff f987 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 800479a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800479c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a4:	f040 80b6 	bne.w	8004914 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047aa:	461c      	mov	r4, r3
 80047ac:	f04f 0500 	mov.w	r5, #0
 80047b0:	4622      	mov	r2, r4
 80047b2:	462b      	mov	r3, r5
 80047b4:	1891      	adds	r1, r2, r2
 80047b6:	6439      	str	r1, [r7, #64]	; 0x40
 80047b8:	415b      	adcs	r3, r3
 80047ba:	647b      	str	r3, [r7, #68]	; 0x44
 80047bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047c0:	1912      	adds	r2, r2, r4
 80047c2:	eb45 0303 	adc.w	r3, r5, r3
 80047c6:	f04f 0000 	mov.w	r0, #0
 80047ca:	f04f 0100 	mov.w	r1, #0
 80047ce:	00d9      	lsls	r1, r3, #3
 80047d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047d4:	00d0      	lsls	r0, r2, #3
 80047d6:	4602      	mov	r2, r0
 80047d8:	460b      	mov	r3, r1
 80047da:	1911      	adds	r1, r2, r4
 80047dc:	6639      	str	r1, [r7, #96]	; 0x60
 80047de:	416b      	adcs	r3, r5
 80047e0:	667b      	str	r3, [r7, #100]	; 0x64
 80047e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	461a      	mov	r2, r3
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	1891      	adds	r1, r2, r2
 80047ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80047f0:	415b      	adcs	r3, r3
 80047f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80047fc:	f7fb fd38 	bl	8000270 <__aeabi_uldivmod>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4ba5      	ldr	r3, [pc, #660]	; (8004a9c <UART_SetConfig+0x38c>)
 8004806:	fba3 2302 	umull	r2, r3, r3, r2
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	011e      	lsls	r6, r3, #4
 800480e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004810:	461c      	mov	r4, r3
 8004812:	f04f 0500 	mov.w	r5, #0
 8004816:	4622      	mov	r2, r4
 8004818:	462b      	mov	r3, r5
 800481a:	1891      	adds	r1, r2, r2
 800481c:	6339      	str	r1, [r7, #48]	; 0x30
 800481e:	415b      	adcs	r3, r3
 8004820:	637b      	str	r3, [r7, #52]	; 0x34
 8004822:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004826:	1912      	adds	r2, r2, r4
 8004828:	eb45 0303 	adc.w	r3, r5, r3
 800482c:	f04f 0000 	mov.w	r0, #0
 8004830:	f04f 0100 	mov.w	r1, #0
 8004834:	00d9      	lsls	r1, r3, #3
 8004836:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800483a:	00d0      	lsls	r0, r2, #3
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	1911      	adds	r1, r2, r4
 8004842:	65b9      	str	r1, [r7, #88]	; 0x58
 8004844:	416b      	adcs	r3, r5
 8004846:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	461a      	mov	r2, r3
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	1891      	adds	r1, r2, r2
 8004854:	62b9      	str	r1, [r7, #40]	; 0x28
 8004856:	415b      	adcs	r3, r3
 8004858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800485a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800485e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004862:	f7fb fd05 	bl	8000270 <__aeabi_uldivmod>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4b8c      	ldr	r3, [pc, #560]	; (8004a9c <UART_SetConfig+0x38c>)
 800486c:	fba3 1302 	umull	r1, r3, r3, r2
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	2164      	movs	r1, #100	; 0x64
 8004874:	fb01 f303 	mul.w	r3, r1, r3
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	3332      	adds	r3, #50	; 0x32
 800487e:	4a87      	ldr	r2, [pc, #540]	; (8004a9c <UART_SetConfig+0x38c>)
 8004880:	fba2 2303 	umull	r2, r3, r2, r3
 8004884:	095b      	lsrs	r3, r3, #5
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800488c:	441e      	add	r6, r3
 800488e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004890:	4618      	mov	r0, r3
 8004892:	f04f 0100 	mov.w	r1, #0
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	1894      	adds	r4, r2, r2
 800489c:	623c      	str	r4, [r7, #32]
 800489e:	415b      	adcs	r3, r3
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
 80048a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048a6:	1812      	adds	r2, r2, r0
 80048a8:	eb41 0303 	adc.w	r3, r1, r3
 80048ac:	f04f 0400 	mov.w	r4, #0
 80048b0:	f04f 0500 	mov.w	r5, #0
 80048b4:	00dd      	lsls	r5, r3, #3
 80048b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80048ba:	00d4      	lsls	r4, r2, #3
 80048bc:	4622      	mov	r2, r4
 80048be:	462b      	mov	r3, r5
 80048c0:	1814      	adds	r4, r2, r0
 80048c2:	653c      	str	r4, [r7, #80]	; 0x50
 80048c4:	414b      	adcs	r3, r1
 80048c6:	657b      	str	r3, [r7, #84]	; 0x54
 80048c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	461a      	mov	r2, r3
 80048ce:	f04f 0300 	mov.w	r3, #0
 80048d2:	1891      	adds	r1, r2, r2
 80048d4:	61b9      	str	r1, [r7, #24]
 80048d6:	415b      	adcs	r3, r3
 80048d8:	61fb      	str	r3, [r7, #28]
 80048da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80048e2:	f7fb fcc5 	bl	8000270 <__aeabi_uldivmod>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4b6c      	ldr	r3, [pc, #432]	; (8004a9c <UART_SetConfig+0x38c>)
 80048ec:	fba3 1302 	umull	r1, r3, r3, r2
 80048f0:	095b      	lsrs	r3, r3, #5
 80048f2:	2164      	movs	r1, #100	; 0x64
 80048f4:	fb01 f303 	mul.w	r3, r1, r3
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	3332      	adds	r3, #50	; 0x32
 80048fe:	4a67      	ldr	r2, [pc, #412]	; (8004a9c <UART_SetConfig+0x38c>)
 8004900:	fba2 2303 	umull	r2, r3, r2, r3
 8004904:	095b      	lsrs	r3, r3, #5
 8004906:	f003 0207 	and.w	r2, r3, #7
 800490a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4432      	add	r2, r6
 8004910:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004912:	e0b9      	b.n	8004a88 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004916:	461c      	mov	r4, r3
 8004918:	f04f 0500 	mov.w	r5, #0
 800491c:	4622      	mov	r2, r4
 800491e:	462b      	mov	r3, r5
 8004920:	1891      	adds	r1, r2, r2
 8004922:	6139      	str	r1, [r7, #16]
 8004924:	415b      	adcs	r3, r3
 8004926:	617b      	str	r3, [r7, #20]
 8004928:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800492c:	1912      	adds	r2, r2, r4
 800492e:	eb45 0303 	adc.w	r3, r5, r3
 8004932:	f04f 0000 	mov.w	r0, #0
 8004936:	f04f 0100 	mov.w	r1, #0
 800493a:	00d9      	lsls	r1, r3, #3
 800493c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004940:	00d0      	lsls	r0, r2, #3
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	eb12 0804 	adds.w	r8, r2, r4
 800494a:	eb43 0905 	adc.w	r9, r3, r5
 800494e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	4618      	mov	r0, r3
 8004954:	f04f 0100 	mov.w	r1, #0
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	008b      	lsls	r3, r1, #2
 8004962:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004966:	0082      	lsls	r2, r0, #2
 8004968:	4640      	mov	r0, r8
 800496a:	4649      	mov	r1, r9
 800496c:	f7fb fc80 	bl	8000270 <__aeabi_uldivmod>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4b49      	ldr	r3, [pc, #292]	; (8004a9c <UART_SetConfig+0x38c>)
 8004976:	fba3 2302 	umull	r2, r3, r3, r2
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	011e      	lsls	r6, r3, #4
 800497e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004980:	4618      	mov	r0, r3
 8004982:	f04f 0100 	mov.w	r1, #0
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	1894      	adds	r4, r2, r2
 800498c:	60bc      	str	r4, [r7, #8]
 800498e:	415b      	adcs	r3, r3
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004996:	1812      	adds	r2, r2, r0
 8004998:	eb41 0303 	adc.w	r3, r1, r3
 800499c:	f04f 0400 	mov.w	r4, #0
 80049a0:	f04f 0500 	mov.w	r5, #0
 80049a4:	00dd      	lsls	r5, r3, #3
 80049a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049aa:	00d4      	lsls	r4, r2, #3
 80049ac:	4622      	mov	r2, r4
 80049ae:	462b      	mov	r3, r5
 80049b0:	1814      	adds	r4, r2, r0
 80049b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80049b4:	414b      	adcs	r3, r1
 80049b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	4618      	mov	r0, r3
 80049be:	f04f 0100 	mov.w	r1, #0
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	008b      	lsls	r3, r1, #2
 80049cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80049d0:	0082      	lsls	r2, r0, #2
 80049d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80049d6:	f7fb fc4b 	bl	8000270 <__aeabi_uldivmod>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	4b2f      	ldr	r3, [pc, #188]	; (8004a9c <UART_SetConfig+0x38c>)
 80049e0:	fba3 1302 	umull	r1, r3, r3, r2
 80049e4:	095b      	lsrs	r3, r3, #5
 80049e6:	2164      	movs	r1, #100	; 0x64
 80049e8:	fb01 f303 	mul.w	r3, r1, r3
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	011b      	lsls	r3, r3, #4
 80049f0:	3332      	adds	r3, #50	; 0x32
 80049f2:	4a2a      	ldr	r2, [pc, #168]	; (8004a9c <UART_SetConfig+0x38c>)
 80049f4:	fba2 2303 	umull	r2, r3, r2, r3
 80049f8:	095b      	lsrs	r3, r3, #5
 80049fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049fe:	441e      	add	r6, r3
 8004a00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a02:	4618      	mov	r0, r3
 8004a04:	f04f 0100 	mov.w	r1, #0
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	1894      	adds	r4, r2, r2
 8004a0e:	603c      	str	r4, [r7, #0]
 8004a10:	415b      	adcs	r3, r3
 8004a12:	607b      	str	r3, [r7, #4]
 8004a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a18:	1812      	adds	r2, r2, r0
 8004a1a:	eb41 0303 	adc.w	r3, r1, r3
 8004a1e:	f04f 0400 	mov.w	r4, #0
 8004a22:	f04f 0500 	mov.w	r5, #0
 8004a26:	00dd      	lsls	r5, r3, #3
 8004a28:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a2c:	00d4      	lsls	r4, r2, #3
 8004a2e:	4622      	mov	r2, r4
 8004a30:	462b      	mov	r3, r5
 8004a32:	eb12 0a00 	adds.w	sl, r2, r0
 8004a36:	eb43 0b01 	adc.w	fp, r3, r1
 8004a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f04f 0100 	mov.w	r1, #0
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	008b      	lsls	r3, r1, #2
 8004a4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a52:	0082      	lsls	r2, r0, #2
 8004a54:	4650      	mov	r0, sl
 8004a56:	4659      	mov	r1, fp
 8004a58:	f7fb fc0a 	bl	8000270 <__aeabi_uldivmod>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4b0e      	ldr	r3, [pc, #56]	; (8004a9c <UART_SetConfig+0x38c>)
 8004a62:	fba3 1302 	umull	r1, r3, r3, r2
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	2164      	movs	r1, #100	; 0x64
 8004a6a:	fb01 f303 	mul.w	r3, r1, r3
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	3332      	adds	r3, #50	; 0x32
 8004a74:	4a09      	ldr	r2, [pc, #36]	; (8004a9c <UART_SetConfig+0x38c>)
 8004a76:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7a:	095b      	lsrs	r3, r3, #5
 8004a7c:	f003 020f 	and.w	r2, r3, #15
 8004a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4432      	add	r2, r6
 8004a86:	609a      	str	r2, [r3, #8]
}
 8004a88:	bf00      	nop
 8004a8a:	377c      	adds	r7, #124	; 0x7c
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a92:	bf00      	nop
 8004a94:	40011000 	.word	0x40011000
 8004a98:	40011400 	.word	0x40011400
 8004a9c:	51eb851f 	.word	0x51eb851f

08004aa0 <__errno>:
 8004aa0:	4b01      	ldr	r3, [pc, #4]	; (8004aa8 <__errno+0x8>)
 8004aa2:	6818      	ldr	r0, [r3, #0]
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	20000050 	.word	0x20000050

08004aac <__libc_init_array>:
 8004aac:	b570      	push	{r4, r5, r6, lr}
 8004aae:	4d0d      	ldr	r5, [pc, #52]	; (8004ae4 <__libc_init_array+0x38>)
 8004ab0:	4c0d      	ldr	r4, [pc, #52]	; (8004ae8 <__libc_init_array+0x3c>)
 8004ab2:	1b64      	subs	r4, r4, r5
 8004ab4:	10a4      	asrs	r4, r4, #2
 8004ab6:	2600      	movs	r6, #0
 8004ab8:	42a6      	cmp	r6, r4
 8004aba:	d109      	bne.n	8004ad0 <__libc_init_array+0x24>
 8004abc:	4d0b      	ldr	r5, [pc, #44]	; (8004aec <__libc_init_array+0x40>)
 8004abe:	4c0c      	ldr	r4, [pc, #48]	; (8004af0 <__libc_init_array+0x44>)
 8004ac0:	f001 f978 	bl	8005db4 <_init>
 8004ac4:	1b64      	subs	r4, r4, r5
 8004ac6:	10a4      	asrs	r4, r4, #2
 8004ac8:	2600      	movs	r6, #0
 8004aca:	42a6      	cmp	r6, r4
 8004acc:	d105      	bne.n	8004ada <__libc_init_array+0x2e>
 8004ace:	bd70      	pop	{r4, r5, r6, pc}
 8004ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad4:	4798      	blx	r3
 8004ad6:	3601      	adds	r6, #1
 8004ad8:	e7ee      	b.n	8004ab8 <__libc_init_array+0xc>
 8004ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ade:	4798      	blx	r3
 8004ae0:	3601      	adds	r6, #1
 8004ae2:	e7f2      	b.n	8004aca <__libc_init_array+0x1e>
 8004ae4:	08006598 	.word	0x08006598
 8004ae8:	08006598 	.word	0x08006598
 8004aec:	08006598 	.word	0x08006598
 8004af0:	0800659c 	.word	0x0800659c

08004af4 <malloc>:
 8004af4:	4b02      	ldr	r3, [pc, #8]	; (8004b00 <malloc+0xc>)
 8004af6:	4601      	mov	r1, r0
 8004af8:	6818      	ldr	r0, [r3, #0]
 8004afa:	f000 b863 	b.w	8004bc4 <_malloc_r>
 8004afe:	bf00      	nop
 8004b00:	20000050 	.word	0x20000050

08004b04 <free>:
 8004b04:	4b02      	ldr	r3, [pc, #8]	; (8004b10 <free+0xc>)
 8004b06:	4601      	mov	r1, r0
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	f000 b80b 	b.w	8004b24 <_free_r>
 8004b0e:	bf00      	nop
 8004b10:	20000050 	.word	0x20000050

08004b14 <memset>:
 8004b14:	4402      	add	r2, r0
 8004b16:	4603      	mov	r3, r0
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d100      	bne.n	8004b1e <memset+0xa>
 8004b1c:	4770      	bx	lr
 8004b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b22:	e7f9      	b.n	8004b18 <memset+0x4>

08004b24 <_free_r>:
 8004b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b26:	2900      	cmp	r1, #0
 8004b28:	d048      	beq.n	8004bbc <_free_r+0x98>
 8004b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b2e:	9001      	str	r0, [sp, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f1a1 0404 	sub.w	r4, r1, #4
 8004b36:	bfb8      	it	lt
 8004b38:	18e4      	addlt	r4, r4, r3
 8004b3a:	f000 f9fd 	bl	8004f38 <__malloc_lock>
 8004b3e:	4a20      	ldr	r2, [pc, #128]	; (8004bc0 <_free_r+0x9c>)
 8004b40:	9801      	ldr	r0, [sp, #4]
 8004b42:	6813      	ldr	r3, [r2, #0]
 8004b44:	4615      	mov	r5, r2
 8004b46:	b933      	cbnz	r3, 8004b56 <_free_r+0x32>
 8004b48:	6063      	str	r3, [r4, #4]
 8004b4a:	6014      	str	r4, [r2, #0]
 8004b4c:	b003      	add	sp, #12
 8004b4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b52:	f000 b9f7 	b.w	8004f44 <__malloc_unlock>
 8004b56:	42a3      	cmp	r3, r4
 8004b58:	d90b      	bls.n	8004b72 <_free_r+0x4e>
 8004b5a:	6821      	ldr	r1, [r4, #0]
 8004b5c:	1862      	adds	r2, r4, r1
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	bf04      	itt	eq
 8004b62:	681a      	ldreq	r2, [r3, #0]
 8004b64:	685b      	ldreq	r3, [r3, #4]
 8004b66:	6063      	str	r3, [r4, #4]
 8004b68:	bf04      	itt	eq
 8004b6a:	1852      	addeq	r2, r2, r1
 8004b6c:	6022      	streq	r2, [r4, #0]
 8004b6e:	602c      	str	r4, [r5, #0]
 8004b70:	e7ec      	b.n	8004b4c <_free_r+0x28>
 8004b72:	461a      	mov	r2, r3
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	b10b      	cbz	r3, 8004b7c <_free_r+0x58>
 8004b78:	42a3      	cmp	r3, r4
 8004b7a:	d9fa      	bls.n	8004b72 <_free_r+0x4e>
 8004b7c:	6811      	ldr	r1, [r2, #0]
 8004b7e:	1855      	adds	r5, r2, r1
 8004b80:	42a5      	cmp	r5, r4
 8004b82:	d10b      	bne.n	8004b9c <_free_r+0x78>
 8004b84:	6824      	ldr	r4, [r4, #0]
 8004b86:	4421      	add	r1, r4
 8004b88:	1854      	adds	r4, r2, r1
 8004b8a:	42a3      	cmp	r3, r4
 8004b8c:	6011      	str	r1, [r2, #0]
 8004b8e:	d1dd      	bne.n	8004b4c <_free_r+0x28>
 8004b90:	681c      	ldr	r4, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	6053      	str	r3, [r2, #4]
 8004b96:	4421      	add	r1, r4
 8004b98:	6011      	str	r1, [r2, #0]
 8004b9a:	e7d7      	b.n	8004b4c <_free_r+0x28>
 8004b9c:	d902      	bls.n	8004ba4 <_free_r+0x80>
 8004b9e:	230c      	movs	r3, #12
 8004ba0:	6003      	str	r3, [r0, #0]
 8004ba2:	e7d3      	b.n	8004b4c <_free_r+0x28>
 8004ba4:	6825      	ldr	r5, [r4, #0]
 8004ba6:	1961      	adds	r1, r4, r5
 8004ba8:	428b      	cmp	r3, r1
 8004baa:	bf04      	itt	eq
 8004bac:	6819      	ldreq	r1, [r3, #0]
 8004bae:	685b      	ldreq	r3, [r3, #4]
 8004bb0:	6063      	str	r3, [r4, #4]
 8004bb2:	bf04      	itt	eq
 8004bb4:	1949      	addeq	r1, r1, r5
 8004bb6:	6021      	streq	r1, [r4, #0]
 8004bb8:	6054      	str	r4, [r2, #4]
 8004bba:	e7c7      	b.n	8004b4c <_free_r+0x28>
 8004bbc:	b003      	add	sp, #12
 8004bbe:	bd30      	pop	{r4, r5, pc}
 8004bc0:	200001f4 	.word	0x200001f4

08004bc4 <_malloc_r>:
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	1ccd      	adds	r5, r1, #3
 8004bc8:	f025 0503 	bic.w	r5, r5, #3
 8004bcc:	3508      	adds	r5, #8
 8004bce:	2d0c      	cmp	r5, #12
 8004bd0:	bf38      	it	cc
 8004bd2:	250c      	movcc	r5, #12
 8004bd4:	2d00      	cmp	r5, #0
 8004bd6:	4606      	mov	r6, r0
 8004bd8:	db01      	blt.n	8004bde <_malloc_r+0x1a>
 8004bda:	42a9      	cmp	r1, r5
 8004bdc:	d903      	bls.n	8004be6 <_malloc_r+0x22>
 8004bde:	230c      	movs	r3, #12
 8004be0:	6033      	str	r3, [r6, #0]
 8004be2:	2000      	movs	r0, #0
 8004be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004be6:	f000 f9a7 	bl	8004f38 <__malloc_lock>
 8004bea:	4921      	ldr	r1, [pc, #132]	; (8004c70 <_malloc_r+0xac>)
 8004bec:	680a      	ldr	r2, [r1, #0]
 8004bee:	4614      	mov	r4, r2
 8004bf0:	b99c      	cbnz	r4, 8004c1a <_malloc_r+0x56>
 8004bf2:	4f20      	ldr	r7, [pc, #128]	; (8004c74 <_malloc_r+0xb0>)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	b923      	cbnz	r3, 8004c02 <_malloc_r+0x3e>
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	f000 f854 	bl	8004ca8 <_sbrk_r>
 8004c00:	6038      	str	r0, [r7, #0]
 8004c02:	4629      	mov	r1, r5
 8004c04:	4630      	mov	r0, r6
 8004c06:	f000 f84f 	bl	8004ca8 <_sbrk_r>
 8004c0a:	1c43      	adds	r3, r0, #1
 8004c0c:	d123      	bne.n	8004c56 <_malloc_r+0x92>
 8004c0e:	230c      	movs	r3, #12
 8004c10:	6033      	str	r3, [r6, #0]
 8004c12:	4630      	mov	r0, r6
 8004c14:	f000 f996 	bl	8004f44 <__malloc_unlock>
 8004c18:	e7e3      	b.n	8004be2 <_malloc_r+0x1e>
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	1b5b      	subs	r3, r3, r5
 8004c1e:	d417      	bmi.n	8004c50 <_malloc_r+0x8c>
 8004c20:	2b0b      	cmp	r3, #11
 8004c22:	d903      	bls.n	8004c2c <_malloc_r+0x68>
 8004c24:	6023      	str	r3, [r4, #0]
 8004c26:	441c      	add	r4, r3
 8004c28:	6025      	str	r5, [r4, #0]
 8004c2a:	e004      	b.n	8004c36 <_malloc_r+0x72>
 8004c2c:	6863      	ldr	r3, [r4, #4]
 8004c2e:	42a2      	cmp	r2, r4
 8004c30:	bf0c      	ite	eq
 8004c32:	600b      	streq	r3, [r1, #0]
 8004c34:	6053      	strne	r3, [r2, #4]
 8004c36:	4630      	mov	r0, r6
 8004c38:	f000 f984 	bl	8004f44 <__malloc_unlock>
 8004c3c:	f104 000b 	add.w	r0, r4, #11
 8004c40:	1d23      	adds	r3, r4, #4
 8004c42:	f020 0007 	bic.w	r0, r0, #7
 8004c46:	1ac2      	subs	r2, r0, r3
 8004c48:	d0cc      	beq.n	8004be4 <_malloc_r+0x20>
 8004c4a:	1a1b      	subs	r3, r3, r0
 8004c4c:	50a3      	str	r3, [r4, r2]
 8004c4e:	e7c9      	b.n	8004be4 <_malloc_r+0x20>
 8004c50:	4622      	mov	r2, r4
 8004c52:	6864      	ldr	r4, [r4, #4]
 8004c54:	e7cc      	b.n	8004bf0 <_malloc_r+0x2c>
 8004c56:	1cc4      	adds	r4, r0, #3
 8004c58:	f024 0403 	bic.w	r4, r4, #3
 8004c5c:	42a0      	cmp	r0, r4
 8004c5e:	d0e3      	beq.n	8004c28 <_malloc_r+0x64>
 8004c60:	1a21      	subs	r1, r4, r0
 8004c62:	4630      	mov	r0, r6
 8004c64:	f000 f820 	bl	8004ca8 <_sbrk_r>
 8004c68:	3001      	adds	r0, #1
 8004c6a:	d1dd      	bne.n	8004c28 <_malloc_r+0x64>
 8004c6c:	e7cf      	b.n	8004c0e <_malloc_r+0x4a>
 8004c6e:	bf00      	nop
 8004c70:	200001f4 	.word	0x200001f4
 8004c74:	200001f8 	.word	0x200001f8

08004c78 <iprintf>:
 8004c78:	b40f      	push	{r0, r1, r2, r3}
 8004c7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <iprintf+0x2c>)
 8004c7c:	b513      	push	{r0, r1, r4, lr}
 8004c7e:	681c      	ldr	r4, [r3, #0]
 8004c80:	b124      	cbz	r4, 8004c8c <iprintf+0x14>
 8004c82:	69a3      	ldr	r3, [r4, #24]
 8004c84:	b913      	cbnz	r3, 8004c8c <iprintf+0x14>
 8004c86:	4620      	mov	r0, r4
 8004c88:	f000 f8b6 	bl	8004df8 <__sinit>
 8004c8c:	ab05      	add	r3, sp, #20
 8004c8e:	9a04      	ldr	r2, [sp, #16]
 8004c90:	68a1      	ldr	r1, [r4, #8]
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	4620      	mov	r0, r4
 8004c96:	f000 fae1 	bl	800525c <_vfiprintf_r>
 8004c9a:	b002      	add	sp, #8
 8004c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ca0:	b004      	add	sp, #16
 8004ca2:	4770      	bx	lr
 8004ca4:	20000050 	.word	0x20000050

08004ca8 <_sbrk_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	4d06      	ldr	r5, [pc, #24]	; (8004cc4 <_sbrk_r+0x1c>)
 8004cac:	2300      	movs	r3, #0
 8004cae:	4604      	mov	r4, r0
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	602b      	str	r3, [r5, #0]
 8004cb4:	f7fd fe90 	bl	80029d8 <_sbrk>
 8004cb8:	1c43      	adds	r3, r0, #1
 8004cba:	d102      	bne.n	8004cc2 <_sbrk_r+0x1a>
 8004cbc:	682b      	ldr	r3, [r5, #0]
 8004cbe:	b103      	cbz	r3, 8004cc2 <_sbrk_r+0x1a>
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	bd38      	pop	{r3, r4, r5, pc}
 8004cc4:	20000504 	.word	0x20000504

08004cc8 <siprintf>:
 8004cc8:	b40e      	push	{r1, r2, r3}
 8004cca:	b500      	push	{lr}
 8004ccc:	b09c      	sub	sp, #112	; 0x70
 8004cce:	ab1d      	add	r3, sp, #116	; 0x74
 8004cd0:	9002      	str	r0, [sp, #8]
 8004cd2:	9006      	str	r0, [sp, #24]
 8004cd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cd8:	4809      	ldr	r0, [pc, #36]	; (8004d00 <siprintf+0x38>)
 8004cda:	9107      	str	r1, [sp, #28]
 8004cdc:	9104      	str	r1, [sp, #16]
 8004cde:	4909      	ldr	r1, [pc, #36]	; (8004d04 <siprintf+0x3c>)
 8004ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ce4:	9105      	str	r1, [sp, #20]
 8004ce6:	6800      	ldr	r0, [r0, #0]
 8004ce8:	9301      	str	r3, [sp, #4]
 8004cea:	a902      	add	r1, sp, #8
 8004cec:	f000 f98c 	bl	8005008 <_svfiprintf_r>
 8004cf0:	9b02      	ldr	r3, [sp, #8]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	b01c      	add	sp, #112	; 0x70
 8004cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cfc:	b003      	add	sp, #12
 8004cfe:	4770      	bx	lr
 8004d00:	20000050 	.word	0x20000050
 8004d04:	ffff0208 	.word	0xffff0208

08004d08 <_vsiprintf_r>:
 8004d08:	b500      	push	{lr}
 8004d0a:	b09b      	sub	sp, #108	; 0x6c
 8004d0c:	9100      	str	r1, [sp, #0]
 8004d0e:	9104      	str	r1, [sp, #16]
 8004d10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d14:	9105      	str	r1, [sp, #20]
 8004d16:	9102      	str	r1, [sp, #8]
 8004d18:	4905      	ldr	r1, [pc, #20]	; (8004d30 <_vsiprintf_r+0x28>)
 8004d1a:	9103      	str	r1, [sp, #12]
 8004d1c:	4669      	mov	r1, sp
 8004d1e:	f000 f973 	bl	8005008 <_svfiprintf_r>
 8004d22:	9b00      	ldr	r3, [sp, #0]
 8004d24:	2200      	movs	r2, #0
 8004d26:	701a      	strb	r2, [r3, #0]
 8004d28:	b01b      	add	sp, #108	; 0x6c
 8004d2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d2e:	bf00      	nop
 8004d30:	ffff0208 	.word	0xffff0208

08004d34 <vsiprintf>:
 8004d34:	4613      	mov	r3, r2
 8004d36:	460a      	mov	r2, r1
 8004d38:	4601      	mov	r1, r0
 8004d3a:	4802      	ldr	r0, [pc, #8]	; (8004d44 <vsiprintf+0x10>)
 8004d3c:	6800      	ldr	r0, [r0, #0]
 8004d3e:	f7ff bfe3 	b.w	8004d08 <_vsiprintf_r>
 8004d42:	bf00      	nop
 8004d44:	20000050 	.word	0x20000050

08004d48 <std>:
 8004d48:	2300      	movs	r3, #0
 8004d4a:	b510      	push	{r4, lr}
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8004d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d56:	6083      	str	r3, [r0, #8]
 8004d58:	8181      	strh	r1, [r0, #12]
 8004d5a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d5c:	81c2      	strh	r2, [r0, #14]
 8004d5e:	6183      	str	r3, [r0, #24]
 8004d60:	4619      	mov	r1, r3
 8004d62:	2208      	movs	r2, #8
 8004d64:	305c      	adds	r0, #92	; 0x5c
 8004d66:	f7ff fed5 	bl	8004b14 <memset>
 8004d6a:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <std+0x38>)
 8004d6c:	6263      	str	r3, [r4, #36]	; 0x24
 8004d6e:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <std+0x3c>)
 8004d70:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d72:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <std+0x40>)
 8004d74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d76:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <std+0x44>)
 8004d78:	6224      	str	r4, [r4, #32]
 8004d7a:	6323      	str	r3, [r4, #48]	; 0x30
 8004d7c:	bd10      	pop	{r4, pc}
 8004d7e:	bf00      	nop
 8004d80:	080057e5 	.word	0x080057e5
 8004d84:	08005807 	.word	0x08005807
 8004d88:	0800583f 	.word	0x0800583f
 8004d8c:	08005863 	.word	0x08005863

08004d90 <_cleanup_r>:
 8004d90:	4901      	ldr	r1, [pc, #4]	; (8004d98 <_cleanup_r+0x8>)
 8004d92:	f000 b8af 	b.w	8004ef4 <_fwalk_reent>
 8004d96:	bf00      	nop
 8004d98:	08005b3d 	.word	0x08005b3d

08004d9c <__sfmoreglue>:
 8004d9c:	b570      	push	{r4, r5, r6, lr}
 8004d9e:	1e4a      	subs	r2, r1, #1
 8004da0:	2568      	movs	r5, #104	; 0x68
 8004da2:	4355      	muls	r5, r2
 8004da4:	460e      	mov	r6, r1
 8004da6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004daa:	f7ff ff0b 	bl	8004bc4 <_malloc_r>
 8004dae:	4604      	mov	r4, r0
 8004db0:	b140      	cbz	r0, 8004dc4 <__sfmoreglue+0x28>
 8004db2:	2100      	movs	r1, #0
 8004db4:	e9c0 1600 	strd	r1, r6, [r0]
 8004db8:	300c      	adds	r0, #12
 8004dba:	60a0      	str	r0, [r4, #8]
 8004dbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004dc0:	f7ff fea8 	bl	8004b14 <memset>
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	bd70      	pop	{r4, r5, r6, pc}

08004dc8 <__sfp_lock_acquire>:
 8004dc8:	4801      	ldr	r0, [pc, #4]	; (8004dd0 <__sfp_lock_acquire+0x8>)
 8004dca:	f000 b8b3 	b.w	8004f34 <__retarget_lock_acquire_recursive>
 8004dce:	bf00      	nop
 8004dd0:	20000500 	.word	0x20000500

08004dd4 <__sfp_lock_release>:
 8004dd4:	4801      	ldr	r0, [pc, #4]	; (8004ddc <__sfp_lock_release+0x8>)
 8004dd6:	f000 b8ae 	b.w	8004f36 <__retarget_lock_release_recursive>
 8004dda:	bf00      	nop
 8004ddc:	20000500 	.word	0x20000500

08004de0 <__sinit_lock_acquire>:
 8004de0:	4801      	ldr	r0, [pc, #4]	; (8004de8 <__sinit_lock_acquire+0x8>)
 8004de2:	f000 b8a7 	b.w	8004f34 <__retarget_lock_acquire_recursive>
 8004de6:	bf00      	nop
 8004de8:	200004fb 	.word	0x200004fb

08004dec <__sinit_lock_release>:
 8004dec:	4801      	ldr	r0, [pc, #4]	; (8004df4 <__sinit_lock_release+0x8>)
 8004dee:	f000 b8a2 	b.w	8004f36 <__retarget_lock_release_recursive>
 8004df2:	bf00      	nop
 8004df4:	200004fb 	.word	0x200004fb

08004df8 <__sinit>:
 8004df8:	b510      	push	{r4, lr}
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	f7ff fff0 	bl	8004de0 <__sinit_lock_acquire>
 8004e00:	69a3      	ldr	r3, [r4, #24]
 8004e02:	b11b      	cbz	r3, 8004e0c <__sinit+0x14>
 8004e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e08:	f7ff bff0 	b.w	8004dec <__sinit_lock_release>
 8004e0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e10:	6523      	str	r3, [r4, #80]	; 0x50
 8004e12:	4b13      	ldr	r3, [pc, #76]	; (8004e60 <__sinit+0x68>)
 8004e14:	4a13      	ldr	r2, [pc, #76]	; (8004e64 <__sinit+0x6c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e1a:	42a3      	cmp	r3, r4
 8004e1c:	bf04      	itt	eq
 8004e1e:	2301      	moveq	r3, #1
 8004e20:	61a3      	streq	r3, [r4, #24]
 8004e22:	4620      	mov	r0, r4
 8004e24:	f000 f820 	bl	8004e68 <__sfp>
 8004e28:	6060      	str	r0, [r4, #4]
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	f000 f81c 	bl	8004e68 <__sfp>
 8004e30:	60a0      	str	r0, [r4, #8]
 8004e32:	4620      	mov	r0, r4
 8004e34:	f000 f818 	bl	8004e68 <__sfp>
 8004e38:	2200      	movs	r2, #0
 8004e3a:	60e0      	str	r0, [r4, #12]
 8004e3c:	2104      	movs	r1, #4
 8004e3e:	6860      	ldr	r0, [r4, #4]
 8004e40:	f7ff ff82 	bl	8004d48 <std>
 8004e44:	68a0      	ldr	r0, [r4, #8]
 8004e46:	2201      	movs	r2, #1
 8004e48:	2109      	movs	r1, #9
 8004e4a:	f7ff ff7d 	bl	8004d48 <std>
 8004e4e:	68e0      	ldr	r0, [r4, #12]
 8004e50:	2202      	movs	r2, #2
 8004e52:	2112      	movs	r1, #18
 8004e54:	f7ff ff78 	bl	8004d48 <std>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	61a3      	str	r3, [r4, #24]
 8004e5c:	e7d2      	b.n	8004e04 <__sinit+0xc>
 8004e5e:	bf00      	nop
 8004e60:	080064f8 	.word	0x080064f8
 8004e64:	08004d91 	.word	0x08004d91

08004e68 <__sfp>:
 8004e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6a:	4607      	mov	r7, r0
 8004e6c:	f7ff ffac 	bl	8004dc8 <__sfp_lock_acquire>
 8004e70:	4b1e      	ldr	r3, [pc, #120]	; (8004eec <__sfp+0x84>)
 8004e72:	681e      	ldr	r6, [r3, #0]
 8004e74:	69b3      	ldr	r3, [r6, #24]
 8004e76:	b913      	cbnz	r3, 8004e7e <__sfp+0x16>
 8004e78:	4630      	mov	r0, r6
 8004e7a:	f7ff ffbd 	bl	8004df8 <__sinit>
 8004e7e:	3648      	adds	r6, #72	; 0x48
 8004e80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e84:	3b01      	subs	r3, #1
 8004e86:	d503      	bpl.n	8004e90 <__sfp+0x28>
 8004e88:	6833      	ldr	r3, [r6, #0]
 8004e8a:	b30b      	cbz	r3, 8004ed0 <__sfp+0x68>
 8004e8c:	6836      	ldr	r6, [r6, #0]
 8004e8e:	e7f7      	b.n	8004e80 <__sfp+0x18>
 8004e90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e94:	b9d5      	cbnz	r5, 8004ecc <__sfp+0x64>
 8004e96:	4b16      	ldr	r3, [pc, #88]	; (8004ef0 <__sfp+0x88>)
 8004e98:	60e3      	str	r3, [r4, #12]
 8004e9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e9e:	6665      	str	r5, [r4, #100]	; 0x64
 8004ea0:	f000 f847 	bl	8004f32 <__retarget_lock_init_recursive>
 8004ea4:	f7ff ff96 	bl	8004dd4 <__sfp_lock_release>
 8004ea8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004eac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004eb0:	6025      	str	r5, [r4, #0]
 8004eb2:	61a5      	str	r5, [r4, #24]
 8004eb4:	2208      	movs	r2, #8
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ebc:	f7ff fe2a 	bl	8004b14 <memset>
 8004ec0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ec4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ec8:	4620      	mov	r0, r4
 8004eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ecc:	3468      	adds	r4, #104	; 0x68
 8004ece:	e7d9      	b.n	8004e84 <__sfp+0x1c>
 8004ed0:	2104      	movs	r1, #4
 8004ed2:	4638      	mov	r0, r7
 8004ed4:	f7ff ff62 	bl	8004d9c <__sfmoreglue>
 8004ed8:	4604      	mov	r4, r0
 8004eda:	6030      	str	r0, [r6, #0]
 8004edc:	2800      	cmp	r0, #0
 8004ede:	d1d5      	bne.n	8004e8c <__sfp+0x24>
 8004ee0:	f7ff ff78 	bl	8004dd4 <__sfp_lock_release>
 8004ee4:	230c      	movs	r3, #12
 8004ee6:	603b      	str	r3, [r7, #0]
 8004ee8:	e7ee      	b.n	8004ec8 <__sfp+0x60>
 8004eea:	bf00      	nop
 8004eec:	080064f8 	.word	0x080064f8
 8004ef0:	ffff0001 	.word	0xffff0001

08004ef4 <_fwalk_reent>:
 8004ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ef8:	4606      	mov	r6, r0
 8004efa:	4688      	mov	r8, r1
 8004efc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f00:	2700      	movs	r7, #0
 8004f02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f06:	f1b9 0901 	subs.w	r9, r9, #1
 8004f0a:	d505      	bpl.n	8004f18 <_fwalk_reent+0x24>
 8004f0c:	6824      	ldr	r4, [r4, #0]
 8004f0e:	2c00      	cmp	r4, #0
 8004f10:	d1f7      	bne.n	8004f02 <_fwalk_reent+0xe>
 8004f12:	4638      	mov	r0, r7
 8004f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f18:	89ab      	ldrh	r3, [r5, #12]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d907      	bls.n	8004f2e <_fwalk_reent+0x3a>
 8004f1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f22:	3301      	adds	r3, #1
 8004f24:	d003      	beq.n	8004f2e <_fwalk_reent+0x3a>
 8004f26:	4629      	mov	r1, r5
 8004f28:	4630      	mov	r0, r6
 8004f2a:	47c0      	blx	r8
 8004f2c:	4307      	orrs	r7, r0
 8004f2e:	3568      	adds	r5, #104	; 0x68
 8004f30:	e7e9      	b.n	8004f06 <_fwalk_reent+0x12>

08004f32 <__retarget_lock_init_recursive>:
 8004f32:	4770      	bx	lr

08004f34 <__retarget_lock_acquire_recursive>:
 8004f34:	4770      	bx	lr

08004f36 <__retarget_lock_release_recursive>:
 8004f36:	4770      	bx	lr

08004f38 <__malloc_lock>:
 8004f38:	4801      	ldr	r0, [pc, #4]	; (8004f40 <__malloc_lock+0x8>)
 8004f3a:	f7ff bffb 	b.w	8004f34 <__retarget_lock_acquire_recursive>
 8004f3e:	bf00      	nop
 8004f40:	200004fc 	.word	0x200004fc

08004f44 <__malloc_unlock>:
 8004f44:	4801      	ldr	r0, [pc, #4]	; (8004f4c <__malloc_unlock+0x8>)
 8004f46:	f7ff bff6 	b.w	8004f36 <__retarget_lock_release_recursive>
 8004f4a:	bf00      	nop
 8004f4c:	200004fc 	.word	0x200004fc

08004f50 <__ssputs_r>:
 8004f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f54:	688e      	ldr	r6, [r1, #8]
 8004f56:	429e      	cmp	r6, r3
 8004f58:	4682      	mov	sl, r0
 8004f5a:	460c      	mov	r4, r1
 8004f5c:	4690      	mov	r8, r2
 8004f5e:	461f      	mov	r7, r3
 8004f60:	d838      	bhi.n	8004fd4 <__ssputs_r+0x84>
 8004f62:	898a      	ldrh	r2, [r1, #12]
 8004f64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f68:	d032      	beq.n	8004fd0 <__ssputs_r+0x80>
 8004f6a:	6825      	ldr	r5, [r4, #0]
 8004f6c:	6909      	ldr	r1, [r1, #16]
 8004f6e:	eba5 0901 	sub.w	r9, r5, r1
 8004f72:	6965      	ldr	r5, [r4, #20]
 8004f74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	444b      	add	r3, r9
 8004f80:	106d      	asrs	r5, r5, #1
 8004f82:	429d      	cmp	r5, r3
 8004f84:	bf38      	it	cc
 8004f86:	461d      	movcc	r5, r3
 8004f88:	0553      	lsls	r3, r2, #21
 8004f8a:	d531      	bpl.n	8004ff0 <__ssputs_r+0xa0>
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	f7ff fe19 	bl	8004bc4 <_malloc_r>
 8004f92:	4606      	mov	r6, r0
 8004f94:	b950      	cbnz	r0, 8004fac <__ssputs_r+0x5c>
 8004f96:	230c      	movs	r3, #12
 8004f98:	f8ca 3000 	str.w	r3, [sl]
 8004f9c:	89a3      	ldrh	r3, [r4, #12]
 8004f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fa2:	81a3      	strh	r3, [r4, #12]
 8004fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fac:	6921      	ldr	r1, [r4, #16]
 8004fae:	464a      	mov	r2, r9
 8004fb0:	f000 fe76 	bl	8005ca0 <memcpy>
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fbe:	81a3      	strh	r3, [r4, #12]
 8004fc0:	6126      	str	r6, [r4, #16]
 8004fc2:	6165      	str	r5, [r4, #20]
 8004fc4:	444e      	add	r6, r9
 8004fc6:	eba5 0509 	sub.w	r5, r5, r9
 8004fca:	6026      	str	r6, [r4, #0]
 8004fcc:	60a5      	str	r5, [r4, #8]
 8004fce:	463e      	mov	r6, r7
 8004fd0:	42be      	cmp	r6, r7
 8004fd2:	d900      	bls.n	8004fd6 <__ssputs_r+0x86>
 8004fd4:	463e      	mov	r6, r7
 8004fd6:	4632      	mov	r2, r6
 8004fd8:	6820      	ldr	r0, [r4, #0]
 8004fda:	4641      	mov	r1, r8
 8004fdc:	f000 fe6e 	bl	8005cbc <memmove>
 8004fe0:	68a3      	ldr	r3, [r4, #8]
 8004fe2:	6822      	ldr	r2, [r4, #0]
 8004fe4:	1b9b      	subs	r3, r3, r6
 8004fe6:	4432      	add	r2, r6
 8004fe8:	60a3      	str	r3, [r4, #8]
 8004fea:	6022      	str	r2, [r4, #0]
 8004fec:	2000      	movs	r0, #0
 8004fee:	e7db      	b.n	8004fa8 <__ssputs_r+0x58>
 8004ff0:	462a      	mov	r2, r5
 8004ff2:	f000 fe7d 	bl	8005cf0 <_realloc_r>
 8004ff6:	4606      	mov	r6, r0
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	d1e1      	bne.n	8004fc0 <__ssputs_r+0x70>
 8004ffc:	6921      	ldr	r1, [r4, #16]
 8004ffe:	4650      	mov	r0, sl
 8005000:	f7ff fd90 	bl	8004b24 <_free_r>
 8005004:	e7c7      	b.n	8004f96 <__ssputs_r+0x46>
	...

08005008 <_svfiprintf_r>:
 8005008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500c:	4698      	mov	r8, r3
 800500e:	898b      	ldrh	r3, [r1, #12]
 8005010:	061b      	lsls	r3, r3, #24
 8005012:	b09d      	sub	sp, #116	; 0x74
 8005014:	4607      	mov	r7, r0
 8005016:	460d      	mov	r5, r1
 8005018:	4614      	mov	r4, r2
 800501a:	d50e      	bpl.n	800503a <_svfiprintf_r+0x32>
 800501c:	690b      	ldr	r3, [r1, #16]
 800501e:	b963      	cbnz	r3, 800503a <_svfiprintf_r+0x32>
 8005020:	2140      	movs	r1, #64	; 0x40
 8005022:	f7ff fdcf 	bl	8004bc4 <_malloc_r>
 8005026:	6028      	str	r0, [r5, #0]
 8005028:	6128      	str	r0, [r5, #16]
 800502a:	b920      	cbnz	r0, 8005036 <_svfiprintf_r+0x2e>
 800502c:	230c      	movs	r3, #12
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	f04f 30ff 	mov.w	r0, #4294967295
 8005034:	e0d1      	b.n	80051da <_svfiprintf_r+0x1d2>
 8005036:	2340      	movs	r3, #64	; 0x40
 8005038:	616b      	str	r3, [r5, #20]
 800503a:	2300      	movs	r3, #0
 800503c:	9309      	str	r3, [sp, #36]	; 0x24
 800503e:	2320      	movs	r3, #32
 8005040:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005044:	f8cd 800c 	str.w	r8, [sp, #12]
 8005048:	2330      	movs	r3, #48	; 0x30
 800504a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80051f4 <_svfiprintf_r+0x1ec>
 800504e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005052:	f04f 0901 	mov.w	r9, #1
 8005056:	4623      	mov	r3, r4
 8005058:	469a      	mov	sl, r3
 800505a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800505e:	b10a      	cbz	r2, 8005064 <_svfiprintf_r+0x5c>
 8005060:	2a25      	cmp	r2, #37	; 0x25
 8005062:	d1f9      	bne.n	8005058 <_svfiprintf_r+0x50>
 8005064:	ebba 0b04 	subs.w	fp, sl, r4
 8005068:	d00b      	beq.n	8005082 <_svfiprintf_r+0x7a>
 800506a:	465b      	mov	r3, fp
 800506c:	4622      	mov	r2, r4
 800506e:	4629      	mov	r1, r5
 8005070:	4638      	mov	r0, r7
 8005072:	f7ff ff6d 	bl	8004f50 <__ssputs_r>
 8005076:	3001      	adds	r0, #1
 8005078:	f000 80aa 	beq.w	80051d0 <_svfiprintf_r+0x1c8>
 800507c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800507e:	445a      	add	r2, fp
 8005080:	9209      	str	r2, [sp, #36]	; 0x24
 8005082:	f89a 3000 	ldrb.w	r3, [sl]
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 80a2 	beq.w	80051d0 <_svfiprintf_r+0x1c8>
 800508c:	2300      	movs	r3, #0
 800508e:	f04f 32ff 	mov.w	r2, #4294967295
 8005092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005096:	f10a 0a01 	add.w	sl, sl, #1
 800509a:	9304      	str	r3, [sp, #16]
 800509c:	9307      	str	r3, [sp, #28]
 800509e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050a2:	931a      	str	r3, [sp, #104]	; 0x68
 80050a4:	4654      	mov	r4, sl
 80050a6:	2205      	movs	r2, #5
 80050a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ac:	4851      	ldr	r0, [pc, #324]	; (80051f4 <_svfiprintf_r+0x1ec>)
 80050ae:	f7fb f88f 	bl	80001d0 <memchr>
 80050b2:	9a04      	ldr	r2, [sp, #16]
 80050b4:	b9d8      	cbnz	r0, 80050ee <_svfiprintf_r+0xe6>
 80050b6:	06d0      	lsls	r0, r2, #27
 80050b8:	bf44      	itt	mi
 80050ba:	2320      	movmi	r3, #32
 80050bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050c0:	0711      	lsls	r1, r2, #28
 80050c2:	bf44      	itt	mi
 80050c4:	232b      	movmi	r3, #43	; 0x2b
 80050c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050ca:	f89a 3000 	ldrb.w	r3, [sl]
 80050ce:	2b2a      	cmp	r3, #42	; 0x2a
 80050d0:	d015      	beq.n	80050fe <_svfiprintf_r+0xf6>
 80050d2:	9a07      	ldr	r2, [sp, #28]
 80050d4:	4654      	mov	r4, sl
 80050d6:	2000      	movs	r0, #0
 80050d8:	f04f 0c0a 	mov.w	ip, #10
 80050dc:	4621      	mov	r1, r4
 80050de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050e2:	3b30      	subs	r3, #48	; 0x30
 80050e4:	2b09      	cmp	r3, #9
 80050e6:	d94e      	bls.n	8005186 <_svfiprintf_r+0x17e>
 80050e8:	b1b0      	cbz	r0, 8005118 <_svfiprintf_r+0x110>
 80050ea:	9207      	str	r2, [sp, #28]
 80050ec:	e014      	b.n	8005118 <_svfiprintf_r+0x110>
 80050ee:	eba0 0308 	sub.w	r3, r0, r8
 80050f2:	fa09 f303 	lsl.w	r3, r9, r3
 80050f6:	4313      	orrs	r3, r2
 80050f8:	9304      	str	r3, [sp, #16]
 80050fa:	46a2      	mov	sl, r4
 80050fc:	e7d2      	b.n	80050a4 <_svfiprintf_r+0x9c>
 80050fe:	9b03      	ldr	r3, [sp, #12]
 8005100:	1d19      	adds	r1, r3, #4
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	9103      	str	r1, [sp, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	bfbb      	ittet	lt
 800510a:	425b      	neglt	r3, r3
 800510c:	f042 0202 	orrlt.w	r2, r2, #2
 8005110:	9307      	strge	r3, [sp, #28]
 8005112:	9307      	strlt	r3, [sp, #28]
 8005114:	bfb8      	it	lt
 8005116:	9204      	strlt	r2, [sp, #16]
 8005118:	7823      	ldrb	r3, [r4, #0]
 800511a:	2b2e      	cmp	r3, #46	; 0x2e
 800511c:	d10c      	bne.n	8005138 <_svfiprintf_r+0x130>
 800511e:	7863      	ldrb	r3, [r4, #1]
 8005120:	2b2a      	cmp	r3, #42	; 0x2a
 8005122:	d135      	bne.n	8005190 <_svfiprintf_r+0x188>
 8005124:	9b03      	ldr	r3, [sp, #12]
 8005126:	1d1a      	adds	r2, r3, #4
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	9203      	str	r2, [sp, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	bfb8      	it	lt
 8005130:	f04f 33ff 	movlt.w	r3, #4294967295
 8005134:	3402      	adds	r4, #2
 8005136:	9305      	str	r3, [sp, #20]
 8005138:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005204 <_svfiprintf_r+0x1fc>
 800513c:	7821      	ldrb	r1, [r4, #0]
 800513e:	2203      	movs	r2, #3
 8005140:	4650      	mov	r0, sl
 8005142:	f7fb f845 	bl	80001d0 <memchr>
 8005146:	b140      	cbz	r0, 800515a <_svfiprintf_r+0x152>
 8005148:	2340      	movs	r3, #64	; 0x40
 800514a:	eba0 000a 	sub.w	r0, r0, sl
 800514e:	fa03 f000 	lsl.w	r0, r3, r0
 8005152:	9b04      	ldr	r3, [sp, #16]
 8005154:	4303      	orrs	r3, r0
 8005156:	3401      	adds	r4, #1
 8005158:	9304      	str	r3, [sp, #16]
 800515a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800515e:	4826      	ldr	r0, [pc, #152]	; (80051f8 <_svfiprintf_r+0x1f0>)
 8005160:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005164:	2206      	movs	r2, #6
 8005166:	f7fb f833 	bl	80001d0 <memchr>
 800516a:	2800      	cmp	r0, #0
 800516c:	d038      	beq.n	80051e0 <_svfiprintf_r+0x1d8>
 800516e:	4b23      	ldr	r3, [pc, #140]	; (80051fc <_svfiprintf_r+0x1f4>)
 8005170:	bb1b      	cbnz	r3, 80051ba <_svfiprintf_r+0x1b2>
 8005172:	9b03      	ldr	r3, [sp, #12]
 8005174:	3307      	adds	r3, #7
 8005176:	f023 0307 	bic.w	r3, r3, #7
 800517a:	3308      	adds	r3, #8
 800517c:	9303      	str	r3, [sp, #12]
 800517e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005180:	4433      	add	r3, r6
 8005182:	9309      	str	r3, [sp, #36]	; 0x24
 8005184:	e767      	b.n	8005056 <_svfiprintf_r+0x4e>
 8005186:	fb0c 3202 	mla	r2, ip, r2, r3
 800518a:	460c      	mov	r4, r1
 800518c:	2001      	movs	r0, #1
 800518e:	e7a5      	b.n	80050dc <_svfiprintf_r+0xd4>
 8005190:	2300      	movs	r3, #0
 8005192:	3401      	adds	r4, #1
 8005194:	9305      	str	r3, [sp, #20]
 8005196:	4619      	mov	r1, r3
 8005198:	f04f 0c0a 	mov.w	ip, #10
 800519c:	4620      	mov	r0, r4
 800519e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051a2:	3a30      	subs	r2, #48	; 0x30
 80051a4:	2a09      	cmp	r2, #9
 80051a6:	d903      	bls.n	80051b0 <_svfiprintf_r+0x1a8>
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0c5      	beq.n	8005138 <_svfiprintf_r+0x130>
 80051ac:	9105      	str	r1, [sp, #20]
 80051ae:	e7c3      	b.n	8005138 <_svfiprintf_r+0x130>
 80051b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80051b4:	4604      	mov	r4, r0
 80051b6:	2301      	movs	r3, #1
 80051b8:	e7f0      	b.n	800519c <_svfiprintf_r+0x194>
 80051ba:	ab03      	add	r3, sp, #12
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	462a      	mov	r2, r5
 80051c0:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <_svfiprintf_r+0x1f8>)
 80051c2:	a904      	add	r1, sp, #16
 80051c4:	4638      	mov	r0, r7
 80051c6:	f3af 8000 	nop.w
 80051ca:	1c42      	adds	r2, r0, #1
 80051cc:	4606      	mov	r6, r0
 80051ce:	d1d6      	bne.n	800517e <_svfiprintf_r+0x176>
 80051d0:	89ab      	ldrh	r3, [r5, #12]
 80051d2:	065b      	lsls	r3, r3, #25
 80051d4:	f53f af2c 	bmi.w	8005030 <_svfiprintf_r+0x28>
 80051d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051da:	b01d      	add	sp, #116	; 0x74
 80051dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e0:	ab03      	add	r3, sp, #12
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	462a      	mov	r2, r5
 80051e6:	4b06      	ldr	r3, [pc, #24]	; (8005200 <_svfiprintf_r+0x1f8>)
 80051e8:	a904      	add	r1, sp, #16
 80051ea:	4638      	mov	r0, r7
 80051ec:	f000 f9d4 	bl	8005598 <_printf_i>
 80051f0:	e7eb      	b.n	80051ca <_svfiprintf_r+0x1c2>
 80051f2:	bf00      	nop
 80051f4:	0800655c 	.word	0x0800655c
 80051f8:	08006566 	.word	0x08006566
 80051fc:	00000000 	.word	0x00000000
 8005200:	08004f51 	.word	0x08004f51
 8005204:	08006562 	.word	0x08006562

08005208 <__sfputc_r>:
 8005208:	6893      	ldr	r3, [r2, #8]
 800520a:	3b01      	subs	r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	b410      	push	{r4}
 8005210:	6093      	str	r3, [r2, #8]
 8005212:	da08      	bge.n	8005226 <__sfputc_r+0x1e>
 8005214:	6994      	ldr	r4, [r2, #24]
 8005216:	42a3      	cmp	r3, r4
 8005218:	db01      	blt.n	800521e <__sfputc_r+0x16>
 800521a:	290a      	cmp	r1, #10
 800521c:	d103      	bne.n	8005226 <__sfputc_r+0x1e>
 800521e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005222:	f000 bb23 	b.w	800586c <__swbuf_r>
 8005226:	6813      	ldr	r3, [r2, #0]
 8005228:	1c58      	adds	r0, r3, #1
 800522a:	6010      	str	r0, [r2, #0]
 800522c:	7019      	strb	r1, [r3, #0]
 800522e:	4608      	mov	r0, r1
 8005230:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005234:	4770      	bx	lr

08005236 <__sfputs_r>:
 8005236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005238:	4606      	mov	r6, r0
 800523a:	460f      	mov	r7, r1
 800523c:	4614      	mov	r4, r2
 800523e:	18d5      	adds	r5, r2, r3
 8005240:	42ac      	cmp	r4, r5
 8005242:	d101      	bne.n	8005248 <__sfputs_r+0x12>
 8005244:	2000      	movs	r0, #0
 8005246:	e007      	b.n	8005258 <__sfputs_r+0x22>
 8005248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800524c:	463a      	mov	r2, r7
 800524e:	4630      	mov	r0, r6
 8005250:	f7ff ffda 	bl	8005208 <__sfputc_r>
 8005254:	1c43      	adds	r3, r0, #1
 8005256:	d1f3      	bne.n	8005240 <__sfputs_r+0xa>
 8005258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800525c <_vfiprintf_r>:
 800525c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005260:	460d      	mov	r5, r1
 8005262:	b09d      	sub	sp, #116	; 0x74
 8005264:	4614      	mov	r4, r2
 8005266:	4698      	mov	r8, r3
 8005268:	4606      	mov	r6, r0
 800526a:	b118      	cbz	r0, 8005274 <_vfiprintf_r+0x18>
 800526c:	6983      	ldr	r3, [r0, #24]
 800526e:	b90b      	cbnz	r3, 8005274 <_vfiprintf_r+0x18>
 8005270:	f7ff fdc2 	bl	8004df8 <__sinit>
 8005274:	4b89      	ldr	r3, [pc, #548]	; (800549c <_vfiprintf_r+0x240>)
 8005276:	429d      	cmp	r5, r3
 8005278:	d11b      	bne.n	80052b2 <_vfiprintf_r+0x56>
 800527a:	6875      	ldr	r5, [r6, #4]
 800527c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800527e:	07d9      	lsls	r1, r3, #31
 8005280:	d405      	bmi.n	800528e <_vfiprintf_r+0x32>
 8005282:	89ab      	ldrh	r3, [r5, #12]
 8005284:	059a      	lsls	r2, r3, #22
 8005286:	d402      	bmi.n	800528e <_vfiprintf_r+0x32>
 8005288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800528a:	f7ff fe53 	bl	8004f34 <__retarget_lock_acquire_recursive>
 800528e:	89ab      	ldrh	r3, [r5, #12]
 8005290:	071b      	lsls	r3, r3, #28
 8005292:	d501      	bpl.n	8005298 <_vfiprintf_r+0x3c>
 8005294:	692b      	ldr	r3, [r5, #16]
 8005296:	b9eb      	cbnz	r3, 80052d4 <_vfiprintf_r+0x78>
 8005298:	4629      	mov	r1, r5
 800529a:	4630      	mov	r0, r6
 800529c:	f000 fb4a 	bl	8005934 <__swsetup_r>
 80052a0:	b1c0      	cbz	r0, 80052d4 <_vfiprintf_r+0x78>
 80052a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052a4:	07dc      	lsls	r4, r3, #31
 80052a6:	d50e      	bpl.n	80052c6 <_vfiprintf_r+0x6a>
 80052a8:	f04f 30ff 	mov.w	r0, #4294967295
 80052ac:	b01d      	add	sp, #116	; 0x74
 80052ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052b2:	4b7b      	ldr	r3, [pc, #492]	; (80054a0 <_vfiprintf_r+0x244>)
 80052b4:	429d      	cmp	r5, r3
 80052b6:	d101      	bne.n	80052bc <_vfiprintf_r+0x60>
 80052b8:	68b5      	ldr	r5, [r6, #8]
 80052ba:	e7df      	b.n	800527c <_vfiprintf_r+0x20>
 80052bc:	4b79      	ldr	r3, [pc, #484]	; (80054a4 <_vfiprintf_r+0x248>)
 80052be:	429d      	cmp	r5, r3
 80052c0:	bf08      	it	eq
 80052c2:	68f5      	ldreq	r5, [r6, #12]
 80052c4:	e7da      	b.n	800527c <_vfiprintf_r+0x20>
 80052c6:	89ab      	ldrh	r3, [r5, #12]
 80052c8:	0598      	lsls	r0, r3, #22
 80052ca:	d4ed      	bmi.n	80052a8 <_vfiprintf_r+0x4c>
 80052cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052ce:	f7ff fe32 	bl	8004f36 <__retarget_lock_release_recursive>
 80052d2:	e7e9      	b.n	80052a8 <_vfiprintf_r+0x4c>
 80052d4:	2300      	movs	r3, #0
 80052d6:	9309      	str	r3, [sp, #36]	; 0x24
 80052d8:	2320      	movs	r3, #32
 80052da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052de:	f8cd 800c 	str.w	r8, [sp, #12]
 80052e2:	2330      	movs	r3, #48	; 0x30
 80052e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80054a8 <_vfiprintf_r+0x24c>
 80052e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052ec:	f04f 0901 	mov.w	r9, #1
 80052f0:	4623      	mov	r3, r4
 80052f2:	469a      	mov	sl, r3
 80052f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052f8:	b10a      	cbz	r2, 80052fe <_vfiprintf_r+0xa2>
 80052fa:	2a25      	cmp	r2, #37	; 0x25
 80052fc:	d1f9      	bne.n	80052f2 <_vfiprintf_r+0x96>
 80052fe:	ebba 0b04 	subs.w	fp, sl, r4
 8005302:	d00b      	beq.n	800531c <_vfiprintf_r+0xc0>
 8005304:	465b      	mov	r3, fp
 8005306:	4622      	mov	r2, r4
 8005308:	4629      	mov	r1, r5
 800530a:	4630      	mov	r0, r6
 800530c:	f7ff ff93 	bl	8005236 <__sfputs_r>
 8005310:	3001      	adds	r0, #1
 8005312:	f000 80aa 	beq.w	800546a <_vfiprintf_r+0x20e>
 8005316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005318:	445a      	add	r2, fp
 800531a:	9209      	str	r2, [sp, #36]	; 0x24
 800531c:	f89a 3000 	ldrb.w	r3, [sl]
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 80a2 	beq.w	800546a <_vfiprintf_r+0x20e>
 8005326:	2300      	movs	r3, #0
 8005328:	f04f 32ff 	mov.w	r2, #4294967295
 800532c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005330:	f10a 0a01 	add.w	sl, sl, #1
 8005334:	9304      	str	r3, [sp, #16]
 8005336:	9307      	str	r3, [sp, #28]
 8005338:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800533c:	931a      	str	r3, [sp, #104]	; 0x68
 800533e:	4654      	mov	r4, sl
 8005340:	2205      	movs	r2, #5
 8005342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005346:	4858      	ldr	r0, [pc, #352]	; (80054a8 <_vfiprintf_r+0x24c>)
 8005348:	f7fa ff42 	bl	80001d0 <memchr>
 800534c:	9a04      	ldr	r2, [sp, #16]
 800534e:	b9d8      	cbnz	r0, 8005388 <_vfiprintf_r+0x12c>
 8005350:	06d1      	lsls	r1, r2, #27
 8005352:	bf44      	itt	mi
 8005354:	2320      	movmi	r3, #32
 8005356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800535a:	0713      	lsls	r3, r2, #28
 800535c:	bf44      	itt	mi
 800535e:	232b      	movmi	r3, #43	; 0x2b
 8005360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005364:	f89a 3000 	ldrb.w	r3, [sl]
 8005368:	2b2a      	cmp	r3, #42	; 0x2a
 800536a:	d015      	beq.n	8005398 <_vfiprintf_r+0x13c>
 800536c:	9a07      	ldr	r2, [sp, #28]
 800536e:	4654      	mov	r4, sl
 8005370:	2000      	movs	r0, #0
 8005372:	f04f 0c0a 	mov.w	ip, #10
 8005376:	4621      	mov	r1, r4
 8005378:	f811 3b01 	ldrb.w	r3, [r1], #1
 800537c:	3b30      	subs	r3, #48	; 0x30
 800537e:	2b09      	cmp	r3, #9
 8005380:	d94e      	bls.n	8005420 <_vfiprintf_r+0x1c4>
 8005382:	b1b0      	cbz	r0, 80053b2 <_vfiprintf_r+0x156>
 8005384:	9207      	str	r2, [sp, #28]
 8005386:	e014      	b.n	80053b2 <_vfiprintf_r+0x156>
 8005388:	eba0 0308 	sub.w	r3, r0, r8
 800538c:	fa09 f303 	lsl.w	r3, r9, r3
 8005390:	4313      	orrs	r3, r2
 8005392:	9304      	str	r3, [sp, #16]
 8005394:	46a2      	mov	sl, r4
 8005396:	e7d2      	b.n	800533e <_vfiprintf_r+0xe2>
 8005398:	9b03      	ldr	r3, [sp, #12]
 800539a:	1d19      	adds	r1, r3, #4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	9103      	str	r1, [sp, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	bfbb      	ittet	lt
 80053a4:	425b      	neglt	r3, r3
 80053a6:	f042 0202 	orrlt.w	r2, r2, #2
 80053aa:	9307      	strge	r3, [sp, #28]
 80053ac:	9307      	strlt	r3, [sp, #28]
 80053ae:	bfb8      	it	lt
 80053b0:	9204      	strlt	r2, [sp, #16]
 80053b2:	7823      	ldrb	r3, [r4, #0]
 80053b4:	2b2e      	cmp	r3, #46	; 0x2e
 80053b6:	d10c      	bne.n	80053d2 <_vfiprintf_r+0x176>
 80053b8:	7863      	ldrb	r3, [r4, #1]
 80053ba:	2b2a      	cmp	r3, #42	; 0x2a
 80053bc:	d135      	bne.n	800542a <_vfiprintf_r+0x1ce>
 80053be:	9b03      	ldr	r3, [sp, #12]
 80053c0:	1d1a      	adds	r2, r3, #4
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	9203      	str	r2, [sp, #12]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	bfb8      	it	lt
 80053ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80053ce:	3402      	adds	r4, #2
 80053d0:	9305      	str	r3, [sp, #20]
 80053d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80054b8 <_vfiprintf_r+0x25c>
 80053d6:	7821      	ldrb	r1, [r4, #0]
 80053d8:	2203      	movs	r2, #3
 80053da:	4650      	mov	r0, sl
 80053dc:	f7fa fef8 	bl	80001d0 <memchr>
 80053e0:	b140      	cbz	r0, 80053f4 <_vfiprintf_r+0x198>
 80053e2:	2340      	movs	r3, #64	; 0x40
 80053e4:	eba0 000a 	sub.w	r0, r0, sl
 80053e8:	fa03 f000 	lsl.w	r0, r3, r0
 80053ec:	9b04      	ldr	r3, [sp, #16]
 80053ee:	4303      	orrs	r3, r0
 80053f0:	3401      	adds	r4, #1
 80053f2:	9304      	str	r3, [sp, #16]
 80053f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053f8:	482c      	ldr	r0, [pc, #176]	; (80054ac <_vfiprintf_r+0x250>)
 80053fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053fe:	2206      	movs	r2, #6
 8005400:	f7fa fee6 	bl	80001d0 <memchr>
 8005404:	2800      	cmp	r0, #0
 8005406:	d03f      	beq.n	8005488 <_vfiprintf_r+0x22c>
 8005408:	4b29      	ldr	r3, [pc, #164]	; (80054b0 <_vfiprintf_r+0x254>)
 800540a:	bb1b      	cbnz	r3, 8005454 <_vfiprintf_r+0x1f8>
 800540c:	9b03      	ldr	r3, [sp, #12]
 800540e:	3307      	adds	r3, #7
 8005410:	f023 0307 	bic.w	r3, r3, #7
 8005414:	3308      	adds	r3, #8
 8005416:	9303      	str	r3, [sp, #12]
 8005418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800541a:	443b      	add	r3, r7
 800541c:	9309      	str	r3, [sp, #36]	; 0x24
 800541e:	e767      	b.n	80052f0 <_vfiprintf_r+0x94>
 8005420:	fb0c 3202 	mla	r2, ip, r2, r3
 8005424:	460c      	mov	r4, r1
 8005426:	2001      	movs	r0, #1
 8005428:	e7a5      	b.n	8005376 <_vfiprintf_r+0x11a>
 800542a:	2300      	movs	r3, #0
 800542c:	3401      	adds	r4, #1
 800542e:	9305      	str	r3, [sp, #20]
 8005430:	4619      	mov	r1, r3
 8005432:	f04f 0c0a 	mov.w	ip, #10
 8005436:	4620      	mov	r0, r4
 8005438:	f810 2b01 	ldrb.w	r2, [r0], #1
 800543c:	3a30      	subs	r2, #48	; 0x30
 800543e:	2a09      	cmp	r2, #9
 8005440:	d903      	bls.n	800544a <_vfiprintf_r+0x1ee>
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0c5      	beq.n	80053d2 <_vfiprintf_r+0x176>
 8005446:	9105      	str	r1, [sp, #20]
 8005448:	e7c3      	b.n	80053d2 <_vfiprintf_r+0x176>
 800544a:	fb0c 2101 	mla	r1, ip, r1, r2
 800544e:	4604      	mov	r4, r0
 8005450:	2301      	movs	r3, #1
 8005452:	e7f0      	b.n	8005436 <_vfiprintf_r+0x1da>
 8005454:	ab03      	add	r3, sp, #12
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	462a      	mov	r2, r5
 800545a:	4b16      	ldr	r3, [pc, #88]	; (80054b4 <_vfiprintf_r+0x258>)
 800545c:	a904      	add	r1, sp, #16
 800545e:	4630      	mov	r0, r6
 8005460:	f3af 8000 	nop.w
 8005464:	4607      	mov	r7, r0
 8005466:	1c78      	adds	r0, r7, #1
 8005468:	d1d6      	bne.n	8005418 <_vfiprintf_r+0x1bc>
 800546a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800546c:	07d9      	lsls	r1, r3, #31
 800546e:	d405      	bmi.n	800547c <_vfiprintf_r+0x220>
 8005470:	89ab      	ldrh	r3, [r5, #12]
 8005472:	059a      	lsls	r2, r3, #22
 8005474:	d402      	bmi.n	800547c <_vfiprintf_r+0x220>
 8005476:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005478:	f7ff fd5d 	bl	8004f36 <__retarget_lock_release_recursive>
 800547c:	89ab      	ldrh	r3, [r5, #12]
 800547e:	065b      	lsls	r3, r3, #25
 8005480:	f53f af12 	bmi.w	80052a8 <_vfiprintf_r+0x4c>
 8005484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005486:	e711      	b.n	80052ac <_vfiprintf_r+0x50>
 8005488:	ab03      	add	r3, sp, #12
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	462a      	mov	r2, r5
 800548e:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <_vfiprintf_r+0x258>)
 8005490:	a904      	add	r1, sp, #16
 8005492:	4630      	mov	r0, r6
 8005494:	f000 f880 	bl	8005598 <_printf_i>
 8005498:	e7e4      	b.n	8005464 <_vfiprintf_r+0x208>
 800549a:	bf00      	nop
 800549c:	0800651c 	.word	0x0800651c
 80054a0:	0800653c 	.word	0x0800653c
 80054a4:	080064fc 	.word	0x080064fc
 80054a8:	0800655c 	.word	0x0800655c
 80054ac:	08006566 	.word	0x08006566
 80054b0:	00000000 	.word	0x00000000
 80054b4:	08005237 	.word	0x08005237
 80054b8:	08006562 	.word	0x08006562

080054bc <_printf_common>:
 80054bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c0:	4616      	mov	r6, r2
 80054c2:	4699      	mov	r9, r3
 80054c4:	688a      	ldr	r2, [r1, #8]
 80054c6:	690b      	ldr	r3, [r1, #16]
 80054c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054cc:	4293      	cmp	r3, r2
 80054ce:	bfb8      	it	lt
 80054d0:	4613      	movlt	r3, r2
 80054d2:	6033      	str	r3, [r6, #0]
 80054d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054d8:	4607      	mov	r7, r0
 80054da:	460c      	mov	r4, r1
 80054dc:	b10a      	cbz	r2, 80054e2 <_printf_common+0x26>
 80054de:	3301      	adds	r3, #1
 80054e0:	6033      	str	r3, [r6, #0]
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	0699      	lsls	r1, r3, #26
 80054e6:	bf42      	ittt	mi
 80054e8:	6833      	ldrmi	r3, [r6, #0]
 80054ea:	3302      	addmi	r3, #2
 80054ec:	6033      	strmi	r3, [r6, #0]
 80054ee:	6825      	ldr	r5, [r4, #0]
 80054f0:	f015 0506 	ands.w	r5, r5, #6
 80054f4:	d106      	bne.n	8005504 <_printf_common+0x48>
 80054f6:	f104 0a19 	add.w	sl, r4, #25
 80054fa:	68e3      	ldr	r3, [r4, #12]
 80054fc:	6832      	ldr	r2, [r6, #0]
 80054fe:	1a9b      	subs	r3, r3, r2
 8005500:	42ab      	cmp	r3, r5
 8005502:	dc26      	bgt.n	8005552 <_printf_common+0x96>
 8005504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005508:	1e13      	subs	r3, r2, #0
 800550a:	6822      	ldr	r2, [r4, #0]
 800550c:	bf18      	it	ne
 800550e:	2301      	movne	r3, #1
 8005510:	0692      	lsls	r2, r2, #26
 8005512:	d42b      	bmi.n	800556c <_printf_common+0xb0>
 8005514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005518:	4649      	mov	r1, r9
 800551a:	4638      	mov	r0, r7
 800551c:	47c0      	blx	r8
 800551e:	3001      	adds	r0, #1
 8005520:	d01e      	beq.n	8005560 <_printf_common+0xa4>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	68e5      	ldr	r5, [r4, #12]
 8005526:	6832      	ldr	r2, [r6, #0]
 8005528:	f003 0306 	and.w	r3, r3, #6
 800552c:	2b04      	cmp	r3, #4
 800552e:	bf08      	it	eq
 8005530:	1aad      	subeq	r5, r5, r2
 8005532:	68a3      	ldr	r3, [r4, #8]
 8005534:	6922      	ldr	r2, [r4, #16]
 8005536:	bf0c      	ite	eq
 8005538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800553c:	2500      	movne	r5, #0
 800553e:	4293      	cmp	r3, r2
 8005540:	bfc4      	itt	gt
 8005542:	1a9b      	subgt	r3, r3, r2
 8005544:	18ed      	addgt	r5, r5, r3
 8005546:	2600      	movs	r6, #0
 8005548:	341a      	adds	r4, #26
 800554a:	42b5      	cmp	r5, r6
 800554c:	d11a      	bne.n	8005584 <_printf_common+0xc8>
 800554e:	2000      	movs	r0, #0
 8005550:	e008      	b.n	8005564 <_printf_common+0xa8>
 8005552:	2301      	movs	r3, #1
 8005554:	4652      	mov	r2, sl
 8005556:	4649      	mov	r1, r9
 8005558:	4638      	mov	r0, r7
 800555a:	47c0      	blx	r8
 800555c:	3001      	adds	r0, #1
 800555e:	d103      	bne.n	8005568 <_printf_common+0xac>
 8005560:	f04f 30ff 	mov.w	r0, #4294967295
 8005564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005568:	3501      	adds	r5, #1
 800556a:	e7c6      	b.n	80054fa <_printf_common+0x3e>
 800556c:	18e1      	adds	r1, r4, r3
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	2030      	movs	r0, #48	; 0x30
 8005572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005576:	4422      	add	r2, r4
 8005578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800557c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005580:	3302      	adds	r3, #2
 8005582:	e7c7      	b.n	8005514 <_printf_common+0x58>
 8005584:	2301      	movs	r3, #1
 8005586:	4622      	mov	r2, r4
 8005588:	4649      	mov	r1, r9
 800558a:	4638      	mov	r0, r7
 800558c:	47c0      	blx	r8
 800558e:	3001      	adds	r0, #1
 8005590:	d0e6      	beq.n	8005560 <_printf_common+0xa4>
 8005592:	3601      	adds	r6, #1
 8005594:	e7d9      	b.n	800554a <_printf_common+0x8e>
	...

08005598 <_printf_i>:
 8005598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800559c:	460c      	mov	r4, r1
 800559e:	4691      	mov	r9, r2
 80055a0:	7e27      	ldrb	r7, [r4, #24]
 80055a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80055a4:	2f78      	cmp	r7, #120	; 0x78
 80055a6:	4680      	mov	r8, r0
 80055a8:	469a      	mov	sl, r3
 80055aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055ae:	d807      	bhi.n	80055c0 <_printf_i+0x28>
 80055b0:	2f62      	cmp	r7, #98	; 0x62
 80055b2:	d80a      	bhi.n	80055ca <_printf_i+0x32>
 80055b4:	2f00      	cmp	r7, #0
 80055b6:	f000 80d8 	beq.w	800576a <_printf_i+0x1d2>
 80055ba:	2f58      	cmp	r7, #88	; 0x58
 80055bc:	f000 80a3 	beq.w	8005706 <_printf_i+0x16e>
 80055c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055c8:	e03a      	b.n	8005640 <_printf_i+0xa8>
 80055ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055ce:	2b15      	cmp	r3, #21
 80055d0:	d8f6      	bhi.n	80055c0 <_printf_i+0x28>
 80055d2:	a001      	add	r0, pc, #4	; (adr r0, 80055d8 <_printf_i+0x40>)
 80055d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80055d8:	08005631 	.word	0x08005631
 80055dc:	08005645 	.word	0x08005645
 80055e0:	080055c1 	.word	0x080055c1
 80055e4:	080055c1 	.word	0x080055c1
 80055e8:	080055c1 	.word	0x080055c1
 80055ec:	080055c1 	.word	0x080055c1
 80055f0:	08005645 	.word	0x08005645
 80055f4:	080055c1 	.word	0x080055c1
 80055f8:	080055c1 	.word	0x080055c1
 80055fc:	080055c1 	.word	0x080055c1
 8005600:	080055c1 	.word	0x080055c1
 8005604:	08005751 	.word	0x08005751
 8005608:	08005675 	.word	0x08005675
 800560c:	08005733 	.word	0x08005733
 8005610:	080055c1 	.word	0x080055c1
 8005614:	080055c1 	.word	0x080055c1
 8005618:	08005773 	.word	0x08005773
 800561c:	080055c1 	.word	0x080055c1
 8005620:	08005675 	.word	0x08005675
 8005624:	080055c1 	.word	0x080055c1
 8005628:	080055c1 	.word	0x080055c1
 800562c:	0800573b 	.word	0x0800573b
 8005630:	680b      	ldr	r3, [r1, #0]
 8005632:	1d1a      	adds	r2, r3, #4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	600a      	str	r2, [r1, #0]
 8005638:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800563c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005640:	2301      	movs	r3, #1
 8005642:	e0a3      	b.n	800578c <_printf_i+0x1f4>
 8005644:	6825      	ldr	r5, [r4, #0]
 8005646:	6808      	ldr	r0, [r1, #0]
 8005648:	062e      	lsls	r6, r5, #24
 800564a:	f100 0304 	add.w	r3, r0, #4
 800564e:	d50a      	bpl.n	8005666 <_printf_i+0xce>
 8005650:	6805      	ldr	r5, [r0, #0]
 8005652:	600b      	str	r3, [r1, #0]
 8005654:	2d00      	cmp	r5, #0
 8005656:	da03      	bge.n	8005660 <_printf_i+0xc8>
 8005658:	232d      	movs	r3, #45	; 0x2d
 800565a:	426d      	negs	r5, r5
 800565c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005660:	485e      	ldr	r0, [pc, #376]	; (80057dc <_printf_i+0x244>)
 8005662:	230a      	movs	r3, #10
 8005664:	e019      	b.n	800569a <_printf_i+0x102>
 8005666:	f015 0f40 	tst.w	r5, #64	; 0x40
 800566a:	6805      	ldr	r5, [r0, #0]
 800566c:	600b      	str	r3, [r1, #0]
 800566e:	bf18      	it	ne
 8005670:	b22d      	sxthne	r5, r5
 8005672:	e7ef      	b.n	8005654 <_printf_i+0xbc>
 8005674:	680b      	ldr	r3, [r1, #0]
 8005676:	6825      	ldr	r5, [r4, #0]
 8005678:	1d18      	adds	r0, r3, #4
 800567a:	6008      	str	r0, [r1, #0]
 800567c:	0628      	lsls	r0, r5, #24
 800567e:	d501      	bpl.n	8005684 <_printf_i+0xec>
 8005680:	681d      	ldr	r5, [r3, #0]
 8005682:	e002      	b.n	800568a <_printf_i+0xf2>
 8005684:	0669      	lsls	r1, r5, #25
 8005686:	d5fb      	bpl.n	8005680 <_printf_i+0xe8>
 8005688:	881d      	ldrh	r5, [r3, #0]
 800568a:	4854      	ldr	r0, [pc, #336]	; (80057dc <_printf_i+0x244>)
 800568c:	2f6f      	cmp	r7, #111	; 0x6f
 800568e:	bf0c      	ite	eq
 8005690:	2308      	moveq	r3, #8
 8005692:	230a      	movne	r3, #10
 8005694:	2100      	movs	r1, #0
 8005696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800569a:	6866      	ldr	r6, [r4, #4]
 800569c:	60a6      	str	r6, [r4, #8]
 800569e:	2e00      	cmp	r6, #0
 80056a0:	bfa2      	ittt	ge
 80056a2:	6821      	ldrge	r1, [r4, #0]
 80056a4:	f021 0104 	bicge.w	r1, r1, #4
 80056a8:	6021      	strge	r1, [r4, #0]
 80056aa:	b90d      	cbnz	r5, 80056b0 <_printf_i+0x118>
 80056ac:	2e00      	cmp	r6, #0
 80056ae:	d04d      	beq.n	800574c <_printf_i+0x1b4>
 80056b0:	4616      	mov	r6, r2
 80056b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80056b6:	fb03 5711 	mls	r7, r3, r1, r5
 80056ba:	5dc7      	ldrb	r7, [r0, r7]
 80056bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056c0:	462f      	mov	r7, r5
 80056c2:	42bb      	cmp	r3, r7
 80056c4:	460d      	mov	r5, r1
 80056c6:	d9f4      	bls.n	80056b2 <_printf_i+0x11a>
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d10b      	bne.n	80056e4 <_printf_i+0x14c>
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	07df      	lsls	r7, r3, #31
 80056d0:	d508      	bpl.n	80056e4 <_printf_i+0x14c>
 80056d2:	6923      	ldr	r3, [r4, #16]
 80056d4:	6861      	ldr	r1, [r4, #4]
 80056d6:	4299      	cmp	r1, r3
 80056d8:	bfde      	ittt	le
 80056da:	2330      	movle	r3, #48	; 0x30
 80056dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056e4:	1b92      	subs	r2, r2, r6
 80056e6:	6122      	str	r2, [r4, #16]
 80056e8:	f8cd a000 	str.w	sl, [sp]
 80056ec:	464b      	mov	r3, r9
 80056ee:	aa03      	add	r2, sp, #12
 80056f0:	4621      	mov	r1, r4
 80056f2:	4640      	mov	r0, r8
 80056f4:	f7ff fee2 	bl	80054bc <_printf_common>
 80056f8:	3001      	adds	r0, #1
 80056fa:	d14c      	bne.n	8005796 <_printf_i+0x1fe>
 80056fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005700:	b004      	add	sp, #16
 8005702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005706:	4835      	ldr	r0, [pc, #212]	; (80057dc <_printf_i+0x244>)
 8005708:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	680e      	ldr	r6, [r1, #0]
 8005710:	061f      	lsls	r7, r3, #24
 8005712:	f856 5b04 	ldr.w	r5, [r6], #4
 8005716:	600e      	str	r6, [r1, #0]
 8005718:	d514      	bpl.n	8005744 <_printf_i+0x1ac>
 800571a:	07d9      	lsls	r1, r3, #31
 800571c:	bf44      	itt	mi
 800571e:	f043 0320 	orrmi.w	r3, r3, #32
 8005722:	6023      	strmi	r3, [r4, #0]
 8005724:	b91d      	cbnz	r5, 800572e <_printf_i+0x196>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	f023 0320 	bic.w	r3, r3, #32
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	2310      	movs	r3, #16
 8005730:	e7b0      	b.n	8005694 <_printf_i+0xfc>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	f043 0320 	orr.w	r3, r3, #32
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	2378      	movs	r3, #120	; 0x78
 800573c:	4828      	ldr	r0, [pc, #160]	; (80057e0 <_printf_i+0x248>)
 800573e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005742:	e7e3      	b.n	800570c <_printf_i+0x174>
 8005744:	065e      	lsls	r6, r3, #25
 8005746:	bf48      	it	mi
 8005748:	b2ad      	uxthmi	r5, r5
 800574a:	e7e6      	b.n	800571a <_printf_i+0x182>
 800574c:	4616      	mov	r6, r2
 800574e:	e7bb      	b.n	80056c8 <_printf_i+0x130>
 8005750:	680b      	ldr	r3, [r1, #0]
 8005752:	6826      	ldr	r6, [r4, #0]
 8005754:	6960      	ldr	r0, [r4, #20]
 8005756:	1d1d      	adds	r5, r3, #4
 8005758:	600d      	str	r5, [r1, #0]
 800575a:	0635      	lsls	r5, r6, #24
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	d501      	bpl.n	8005764 <_printf_i+0x1cc>
 8005760:	6018      	str	r0, [r3, #0]
 8005762:	e002      	b.n	800576a <_printf_i+0x1d2>
 8005764:	0671      	lsls	r1, r6, #25
 8005766:	d5fb      	bpl.n	8005760 <_printf_i+0x1c8>
 8005768:	8018      	strh	r0, [r3, #0]
 800576a:	2300      	movs	r3, #0
 800576c:	6123      	str	r3, [r4, #16]
 800576e:	4616      	mov	r6, r2
 8005770:	e7ba      	b.n	80056e8 <_printf_i+0x150>
 8005772:	680b      	ldr	r3, [r1, #0]
 8005774:	1d1a      	adds	r2, r3, #4
 8005776:	600a      	str	r2, [r1, #0]
 8005778:	681e      	ldr	r6, [r3, #0]
 800577a:	6862      	ldr	r2, [r4, #4]
 800577c:	2100      	movs	r1, #0
 800577e:	4630      	mov	r0, r6
 8005780:	f7fa fd26 	bl	80001d0 <memchr>
 8005784:	b108      	cbz	r0, 800578a <_printf_i+0x1f2>
 8005786:	1b80      	subs	r0, r0, r6
 8005788:	6060      	str	r0, [r4, #4]
 800578a:	6863      	ldr	r3, [r4, #4]
 800578c:	6123      	str	r3, [r4, #16]
 800578e:	2300      	movs	r3, #0
 8005790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005794:	e7a8      	b.n	80056e8 <_printf_i+0x150>
 8005796:	6923      	ldr	r3, [r4, #16]
 8005798:	4632      	mov	r2, r6
 800579a:	4649      	mov	r1, r9
 800579c:	4640      	mov	r0, r8
 800579e:	47d0      	blx	sl
 80057a0:	3001      	adds	r0, #1
 80057a2:	d0ab      	beq.n	80056fc <_printf_i+0x164>
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	079b      	lsls	r3, r3, #30
 80057a8:	d413      	bmi.n	80057d2 <_printf_i+0x23a>
 80057aa:	68e0      	ldr	r0, [r4, #12]
 80057ac:	9b03      	ldr	r3, [sp, #12]
 80057ae:	4298      	cmp	r0, r3
 80057b0:	bfb8      	it	lt
 80057b2:	4618      	movlt	r0, r3
 80057b4:	e7a4      	b.n	8005700 <_printf_i+0x168>
 80057b6:	2301      	movs	r3, #1
 80057b8:	4632      	mov	r2, r6
 80057ba:	4649      	mov	r1, r9
 80057bc:	4640      	mov	r0, r8
 80057be:	47d0      	blx	sl
 80057c0:	3001      	adds	r0, #1
 80057c2:	d09b      	beq.n	80056fc <_printf_i+0x164>
 80057c4:	3501      	adds	r5, #1
 80057c6:	68e3      	ldr	r3, [r4, #12]
 80057c8:	9903      	ldr	r1, [sp, #12]
 80057ca:	1a5b      	subs	r3, r3, r1
 80057cc:	42ab      	cmp	r3, r5
 80057ce:	dcf2      	bgt.n	80057b6 <_printf_i+0x21e>
 80057d0:	e7eb      	b.n	80057aa <_printf_i+0x212>
 80057d2:	2500      	movs	r5, #0
 80057d4:	f104 0619 	add.w	r6, r4, #25
 80057d8:	e7f5      	b.n	80057c6 <_printf_i+0x22e>
 80057da:	bf00      	nop
 80057dc:	0800656d 	.word	0x0800656d
 80057e0:	0800657e 	.word	0x0800657e

080057e4 <__sread>:
 80057e4:	b510      	push	{r4, lr}
 80057e6:	460c      	mov	r4, r1
 80057e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ec:	f000 faa6 	bl	8005d3c <_read_r>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	bfab      	itete	ge
 80057f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057f6:	89a3      	ldrhlt	r3, [r4, #12]
 80057f8:	181b      	addge	r3, r3, r0
 80057fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057fe:	bfac      	ite	ge
 8005800:	6563      	strge	r3, [r4, #84]	; 0x54
 8005802:	81a3      	strhlt	r3, [r4, #12]
 8005804:	bd10      	pop	{r4, pc}

08005806 <__swrite>:
 8005806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800580a:	461f      	mov	r7, r3
 800580c:	898b      	ldrh	r3, [r1, #12]
 800580e:	05db      	lsls	r3, r3, #23
 8005810:	4605      	mov	r5, r0
 8005812:	460c      	mov	r4, r1
 8005814:	4616      	mov	r6, r2
 8005816:	d505      	bpl.n	8005824 <__swrite+0x1e>
 8005818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800581c:	2302      	movs	r3, #2
 800581e:	2200      	movs	r2, #0
 8005820:	f000 f9c8 	bl	8005bb4 <_lseek_r>
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800582a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800582e:	81a3      	strh	r3, [r4, #12]
 8005830:	4632      	mov	r2, r6
 8005832:	463b      	mov	r3, r7
 8005834:	4628      	mov	r0, r5
 8005836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800583a:	f000 b869 	b.w	8005910 <_write_r>

0800583e <__sseek>:
 800583e:	b510      	push	{r4, lr}
 8005840:	460c      	mov	r4, r1
 8005842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005846:	f000 f9b5 	bl	8005bb4 <_lseek_r>
 800584a:	1c43      	adds	r3, r0, #1
 800584c:	89a3      	ldrh	r3, [r4, #12]
 800584e:	bf15      	itete	ne
 8005850:	6560      	strne	r0, [r4, #84]	; 0x54
 8005852:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005856:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800585a:	81a3      	strheq	r3, [r4, #12]
 800585c:	bf18      	it	ne
 800585e:	81a3      	strhne	r3, [r4, #12]
 8005860:	bd10      	pop	{r4, pc}

08005862 <__sclose>:
 8005862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005866:	f000 b8d3 	b.w	8005a10 <_close_r>
	...

0800586c <__swbuf_r>:
 800586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586e:	460e      	mov	r6, r1
 8005870:	4614      	mov	r4, r2
 8005872:	4605      	mov	r5, r0
 8005874:	b118      	cbz	r0, 800587e <__swbuf_r+0x12>
 8005876:	6983      	ldr	r3, [r0, #24]
 8005878:	b90b      	cbnz	r3, 800587e <__swbuf_r+0x12>
 800587a:	f7ff fabd 	bl	8004df8 <__sinit>
 800587e:	4b21      	ldr	r3, [pc, #132]	; (8005904 <__swbuf_r+0x98>)
 8005880:	429c      	cmp	r4, r3
 8005882:	d12b      	bne.n	80058dc <__swbuf_r+0x70>
 8005884:	686c      	ldr	r4, [r5, #4]
 8005886:	69a3      	ldr	r3, [r4, #24]
 8005888:	60a3      	str	r3, [r4, #8]
 800588a:	89a3      	ldrh	r3, [r4, #12]
 800588c:	071a      	lsls	r2, r3, #28
 800588e:	d52f      	bpl.n	80058f0 <__swbuf_r+0x84>
 8005890:	6923      	ldr	r3, [r4, #16]
 8005892:	b36b      	cbz	r3, 80058f0 <__swbuf_r+0x84>
 8005894:	6923      	ldr	r3, [r4, #16]
 8005896:	6820      	ldr	r0, [r4, #0]
 8005898:	1ac0      	subs	r0, r0, r3
 800589a:	6963      	ldr	r3, [r4, #20]
 800589c:	b2f6      	uxtb	r6, r6
 800589e:	4283      	cmp	r3, r0
 80058a0:	4637      	mov	r7, r6
 80058a2:	dc04      	bgt.n	80058ae <__swbuf_r+0x42>
 80058a4:	4621      	mov	r1, r4
 80058a6:	4628      	mov	r0, r5
 80058a8:	f000 f948 	bl	8005b3c <_fflush_r>
 80058ac:	bb30      	cbnz	r0, 80058fc <__swbuf_r+0x90>
 80058ae:	68a3      	ldr	r3, [r4, #8]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	60a3      	str	r3, [r4, #8]
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	6022      	str	r2, [r4, #0]
 80058ba:	701e      	strb	r6, [r3, #0]
 80058bc:	6963      	ldr	r3, [r4, #20]
 80058be:	3001      	adds	r0, #1
 80058c0:	4283      	cmp	r3, r0
 80058c2:	d004      	beq.n	80058ce <__swbuf_r+0x62>
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	07db      	lsls	r3, r3, #31
 80058c8:	d506      	bpl.n	80058d8 <__swbuf_r+0x6c>
 80058ca:	2e0a      	cmp	r6, #10
 80058cc:	d104      	bne.n	80058d8 <__swbuf_r+0x6c>
 80058ce:	4621      	mov	r1, r4
 80058d0:	4628      	mov	r0, r5
 80058d2:	f000 f933 	bl	8005b3c <_fflush_r>
 80058d6:	b988      	cbnz	r0, 80058fc <__swbuf_r+0x90>
 80058d8:	4638      	mov	r0, r7
 80058da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058dc:	4b0a      	ldr	r3, [pc, #40]	; (8005908 <__swbuf_r+0x9c>)
 80058de:	429c      	cmp	r4, r3
 80058e0:	d101      	bne.n	80058e6 <__swbuf_r+0x7a>
 80058e2:	68ac      	ldr	r4, [r5, #8]
 80058e4:	e7cf      	b.n	8005886 <__swbuf_r+0x1a>
 80058e6:	4b09      	ldr	r3, [pc, #36]	; (800590c <__swbuf_r+0xa0>)
 80058e8:	429c      	cmp	r4, r3
 80058ea:	bf08      	it	eq
 80058ec:	68ec      	ldreq	r4, [r5, #12]
 80058ee:	e7ca      	b.n	8005886 <__swbuf_r+0x1a>
 80058f0:	4621      	mov	r1, r4
 80058f2:	4628      	mov	r0, r5
 80058f4:	f000 f81e 	bl	8005934 <__swsetup_r>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	d0cb      	beq.n	8005894 <__swbuf_r+0x28>
 80058fc:	f04f 37ff 	mov.w	r7, #4294967295
 8005900:	e7ea      	b.n	80058d8 <__swbuf_r+0x6c>
 8005902:	bf00      	nop
 8005904:	0800651c 	.word	0x0800651c
 8005908:	0800653c 	.word	0x0800653c
 800590c:	080064fc 	.word	0x080064fc

08005910 <_write_r>:
 8005910:	b538      	push	{r3, r4, r5, lr}
 8005912:	4d07      	ldr	r5, [pc, #28]	; (8005930 <_write_r+0x20>)
 8005914:	4604      	mov	r4, r0
 8005916:	4608      	mov	r0, r1
 8005918:	4611      	mov	r1, r2
 800591a:	2200      	movs	r2, #0
 800591c:	602a      	str	r2, [r5, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	f7fd f809 	bl	8002936 <_write>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d102      	bne.n	800592e <_write_r+0x1e>
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	b103      	cbz	r3, 800592e <_write_r+0x1e>
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	bd38      	pop	{r3, r4, r5, pc}
 8005930:	20000504 	.word	0x20000504

08005934 <__swsetup_r>:
 8005934:	4b32      	ldr	r3, [pc, #200]	; (8005a00 <__swsetup_r+0xcc>)
 8005936:	b570      	push	{r4, r5, r6, lr}
 8005938:	681d      	ldr	r5, [r3, #0]
 800593a:	4606      	mov	r6, r0
 800593c:	460c      	mov	r4, r1
 800593e:	b125      	cbz	r5, 800594a <__swsetup_r+0x16>
 8005940:	69ab      	ldr	r3, [r5, #24]
 8005942:	b913      	cbnz	r3, 800594a <__swsetup_r+0x16>
 8005944:	4628      	mov	r0, r5
 8005946:	f7ff fa57 	bl	8004df8 <__sinit>
 800594a:	4b2e      	ldr	r3, [pc, #184]	; (8005a04 <__swsetup_r+0xd0>)
 800594c:	429c      	cmp	r4, r3
 800594e:	d10f      	bne.n	8005970 <__swsetup_r+0x3c>
 8005950:	686c      	ldr	r4, [r5, #4]
 8005952:	89a3      	ldrh	r3, [r4, #12]
 8005954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005958:	0719      	lsls	r1, r3, #28
 800595a:	d42c      	bmi.n	80059b6 <__swsetup_r+0x82>
 800595c:	06dd      	lsls	r5, r3, #27
 800595e:	d411      	bmi.n	8005984 <__swsetup_r+0x50>
 8005960:	2309      	movs	r3, #9
 8005962:	6033      	str	r3, [r6, #0]
 8005964:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005968:	81a3      	strh	r3, [r4, #12]
 800596a:	f04f 30ff 	mov.w	r0, #4294967295
 800596e:	e03e      	b.n	80059ee <__swsetup_r+0xba>
 8005970:	4b25      	ldr	r3, [pc, #148]	; (8005a08 <__swsetup_r+0xd4>)
 8005972:	429c      	cmp	r4, r3
 8005974:	d101      	bne.n	800597a <__swsetup_r+0x46>
 8005976:	68ac      	ldr	r4, [r5, #8]
 8005978:	e7eb      	b.n	8005952 <__swsetup_r+0x1e>
 800597a:	4b24      	ldr	r3, [pc, #144]	; (8005a0c <__swsetup_r+0xd8>)
 800597c:	429c      	cmp	r4, r3
 800597e:	bf08      	it	eq
 8005980:	68ec      	ldreq	r4, [r5, #12]
 8005982:	e7e6      	b.n	8005952 <__swsetup_r+0x1e>
 8005984:	0758      	lsls	r0, r3, #29
 8005986:	d512      	bpl.n	80059ae <__swsetup_r+0x7a>
 8005988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800598a:	b141      	cbz	r1, 800599e <__swsetup_r+0x6a>
 800598c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005990:	4299      	cmp	r1, r3
 8005992:	d002      	beq.n	800599a <__swsetup_r+0x66>
 8005994:	4630      	mov	r0, r6
 8005996:	f7ff f8c5 	bl	8004b24 <_free_r>
 800599a:	2300      	movs	r3, #0
 800599c:	6363      	str	r3, [r4, #52]	; 0x34
 800599e:	89a3      	ldrh	r3, [r4, #12]
 80059a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059a4:	81a3      	strh	r3, [r4, #12]
 80059a6:	2300      	movs	r3, #0
 80059a8:	6063      	str	r3, [r4, #4]
 80059aa:	6923      	ldr	r3, [r4, #16]
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	89a3      	ldrh	r3, [r4, #12]
 80059b0:	f043 0308 	orr.w	r3, r3, #8
 80059b4:	81a3      	strh	r3, [r4, #12]
 80059b6:	6923      	ldr	r3, [r4, #16]
 80059b8:	b94b      	cbnz	r3, 80059ce <__swsetup_r+0x9a>
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059c4:	d003      	beq.n	80059ce <__swsetup_r+0x9a>
 80059c6:	4621      	mov	r1, r4
 80059c8:	4630      	mov	r0, r6
 80059ca:	f000 f929 	bl	8005c20 <__smakebuf_r>
 80059ce:	89a0      	ldrh	r0, [r4, #12]
 80059d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059d4:	f010 0301 	ands.w	r3, r0, #1
 80059d8:	d00a      	beq.n	80059f0 <__swsetup_r+0xbc>
 80059da:	2300      	movs	r3, #0
 80059dc:	60a3      	str	r3, [r4, #8]
 80059de:	6963      	ldr	r3, [r4, #20]
 80059e0:	425b      	negs	r3, r3
 80059e2:	61a3      	str	r3, [r4, #24]
 80059e4:	6923      	ldr	r3, [r4, #16]
 80059e6:	b943      	cbnz	r3, 80059fa <__swsetup_r+0xc6>
 80059e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059ec:	d1ba      	bne.n	8005964 <__swsetup_r+0x30>
 80059ee:	bd70      	pop	{r4, r5, r6, pc}
 80059f0:	0781      	lsls	r1, r0, #30
 80059f2:	bf58      	it	pl
 80059f4:	6963      	ldrpl	r3, [r4, #20]
 80059f6:	60a3      	str	r3, [r4, #8]
 80059f8:	e7f4      	b.n	80059e4 <__swsetup_r+0xb0>
 80059fa:	2000      	movs	r0, #0
 80059fc:	e7f7      	b.n	80059ee <__swsetup_r+0xba>
 80059fe:	bf00      	nop
 8005a00:	20000050 	.word	0x20000050
 8005a04:	0800651c 	.word	0x0800651c
 8005a08:	0800653c 	.word	0x0800653c
 8005a0c:	080064fc 	.word	0x080064fc

08005a10 <_close_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	4d06      	ldr	r5, [pc, #24]	; (8005a2c <_close_r+0x1c>)
 8005a14:	2300      	movs	r3, #0
 8005a16:	4604      	mov	r4, r0
 8005a18:	4608      	mov	r0, r1
 8005a1a:	602b      	str	r3, [r5, #0]
 8005a1c:	f7fc ffa7 	bl	800296e <_close>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_close_r+0x1a>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_close_r+0x1a>
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	20000504 	.word	0x20000504

08005a30 <__sflush_r>:
 8005a30:	898a      	ldrh	r2, [r1, #12]
 8005a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a36:	4605      	mov	r5, r0
 8005a38:	0710      	lsls	r0, r2, #28
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	d458      	bmi.n	8005af0 <__sflush_r+0xc0>
 8005a3e:	684b      	ldr	r3, [r1, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	dc05      	bgt.n	8005a50 <__sflush_r+0x20>
 8005a44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	dc02      	bgt.n	8005a50 <__sflush_r+0x20>
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a52:	2e00      	cmp	r6, #0
 8005a54:	d0f9      	beq.n	8005a4a <__sflush_r+0x1a>
 8005a56:	2300      	movs	r3, #0
 8005a58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a5c:	682f      	ldr	r7, [r5, #0]
 8005a5e:	602b      	str	r3, [r5, #0]
 8005a60:	d032      	beq.n	8005ac8 <__sflush_r+0x98>
 8005a62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a64:	89a3      	ldrh	r3, [r4, #12]
 8005a66:	075a      	lsls	r2, r3, #29
 8005a68:	d505      	bpl.n	8005a76 <__sflush_r+0x46>
 8005a6a:	6863      	ldr	r3, [r4, #4]
 8005a6c:	1ac0      	subs	r0, r0, r3
 8005a6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a70:	b10b      	cbz	r3, 8005a76 <__sflush_r+0x46>
 8005a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a74:	1ac0      	subs	r0, r0, r3
 8005a76:	2300      	movs	r3, #0
 8005a78:	4602      	mov	r2, r0
 8005a7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a7c:	6a21      	ldr	r1, [r4, #32]
 8005a7e:	4628      	mov	r0, r5
 8005a80:	47b0      	blx	r6
 8005a82:	1c43      	adds	r3, r0, #1
 8005a84:	89a3      	ldrh	r3, [r4, #12]
 8005a86:	d106      	bne.n	8005a96 <__sflush_r+0x66>
 8005a88:	6829      	ldr	r1, [r5, #0]
 8005a8a:	291d      	cmp	r1, #29
 8005a8c:	d82c      	bhi.n	8005ae8 <__sflush_r+0xb8>
 8005a8e:	4a2a      	ldr	r2, [pc, #168]	; (8005b38 <__sflush_r+0x108>)
 8005a90:	40ca      	lsrs	r2, r1
 8005a92:	07d6      	lsls	r6, r2, #31
 8005a94:	d528      	bpl.n	8005ae8 <__sflush_r+0xb8>
 8005a96:	2200      	movs	r2, #0
 8005a98:	6062      	str	r2, [r4, #4]
 8005a9a:	04d9      	lsls	r1, r3, #19
 8005a9c:	6922      	ldr	r2, [r4, #16]
 8005a9e:	6022      	str	r2, [r4, #0]
 8005aa0:	d504      	bpl.n	8005aac <__sflush_r+0x7c>
 8005aa2:	1c42      	adds	r2, r0, #1
 8005aa4:	d101      	bne.n	8005aaa <__sflush_r+0x7a>
 8005aa6:	682b      	ldr	r3, [r5, #0]
 8005aa8:	b903      	cbnz	r3, 8005aac <__sflush_r+0x7c>
 8005aaa:	6560      	str	r0, [r4, #84]	; 0x54
 8005aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aae:	602f      	str	r7, [r5, #0]
 8005ab0:	2900      	cmp	r1, #0
 8005ab2:	d0ca      	beq.n	8005a4a <__sflush_r+0x1a>
 8005ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ab8:	4299      	cmp	r1, r3
 8005aba:	d002      	beq.n	8005ac2 <__sflush_r+0x92>
 8005abc:	4628      	mov	r0, r5
 8005abe:	f7ff f831 	bl	8004b24 <_free_r>
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	6360      	str	r0, [r4, #52]	; 0x34
 8005ac6:	e7c1      	b.n	8005a4c <__sflush_r+0x1c>
 8005ac8:	6a21      	ldr	r1, [r4, #32]
 8005aca:	2301      	movs	r3, #1
 8005acc:	4628      	mov	r0, r5
 8005ace:	47b0      	blx	r6
 8005ad0:	1c41      	adds	r1, r0, #1
 8005ad2:	d1c7      	bne.n	8005a64 <__sflush_r+0x34>
 8005ad4:	682b      	ldr	r3, [r5, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0c4      	beq.n	8005a64 <__sflush_r+0x34>
 8005ada:	2b1d      	cmp	r3, #29
 8005adc:	d001      	beq.n	8005ae2 <__sflush_r+0xb2>
 8005ade:	2b16      	cmp	r3, #22
 8005ae0:	d101      	bne.n	8005ae6 <__sflush_r+0xb6>
 8005ae2:	602f      	str	r7, [r5, #0]
 8005ae4:	e7b1      	b.n	8005a4a <__sflush_r+0x1a>
 8005ae6:	89a3      	ldrh	r3, [r4, #12]
 8005ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aec:	81a3      	strh	r3, [r4, #12]
 8005aee:	e7ad      	b.n	8005a4c <__sflush_r+0x1c>
 8005af0:	690f      	ldr	r7, [r1, #16]
 8005af2:	2f00      	cmp	r7, #0
 8005af4:	d0a9      	beq.n	8005a4a <__sflush_r+0x1a>
 8005af6:	0793      	lsls	r3, r2, #30
 8005af8:	680e      	ldr	r6, [r1, #0]
 8005afa:	bf08      	it	eq
 8005afc:	694b      	ldreq	r3, [r1, #20]
 8005afe:	600f      	str	r7, [r1, #0]
 8005b00:	bf18      	it	ne
 8005b02:	2300      	movne	r3, #0
 8005b04:	eba6 0807 	sub.w	r8, r6, r7
 8005b08:	608b      	str	r3, [r1, #8]
 8005b0a:	f1b8 0f00 	cmp.w	r8, #0
 8005b0e:	dd9c      	ble.n	8005a4a <__sflush_r+0x1a>
 8005b10:	6a21      	ldr	r1, [r4, #32]
 8005b12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b14:	4643      	mov	r3, r8
 8005b16:	463a      	mov	r2, r7
 8005b18:	4628      	mov	r0, r5
 8005b1a:	47b0      	blx	r6
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	dc06      	bgt.n	8005b2e <__sflush_r+0xfe>
 8005b20:	89a3      	ldrh	r3, [r4, #12]
 8005b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b26:	81a3      	strh	r3, [r4, #12]
 8005b28:	f04f 30ff 	mov.w	r0, #4294967295
 8005b2c:	e78e      	b.n	8005a4c <__sflush_r+0x1c>
 8005b2e:	4407      	add	r7, r0
 8005b30:	eba8 0800 	sub.w	r8, r8, r0
 8005b34:	e7e9      	b.n	8005b0a <__sflush_r+0xda>
 8005b36:	bf00      	nop
 8005b38:	20400001 	.word	0x20400001

08005b3c <_fflush_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	690b      	ldr	r3, [r1, #16]
 8005b40:	4605      	mov	r5, r0
 8005b42:	460c      	mov	r4, r1
 8005b44:	b913      	cbnz	r3, 8005b4c <_fflush_r+0x10>
 8005b46:	2500      	movs	r5, #0
 8005b48:	4628      	mov	r0, r5
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	b118      	cbz	r0, 8005b56 <_fflush_r+0x1a>
 8005b4e:	6983      	ldr	r3, [r0, #24]
 8005b50:	b90b      	cbnz	r3, 8005b56 <_fflush_r+0x1a>
 8005b52:	f7ff f951 	bl	8004df8 <__sinit>
 8005b56:	4b14      	ldr	r3, [pc, #80]	; (8005ba8 <_fflush_r+0x6c>)
 8005b58:	429c      	cmp	r4, r3
 8005b5a:	d11b      	bne.n	8005b94 <_fflush_r+0x58>
 8005b5c:	686c      	ldr	r4, [r5, #4]
 8005b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0ef      	beq.n	8005b46 <_fflush_r+0xa>
 8005b66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b68:	07d0      	lsls	r0, r2, #31
 8005b6a:	d404      	bmi.n	8005b76 <_fflush_r+0x3a>
 8005b6c:	0599      	lsls	r1, r3, #22
 8005b6e:	d402      	bmi.n	8005b76 <_fflush_r+0x3a>
 8005b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b72:	f7ff f9df 	bl	8004f34 <__retarget_lock_acquire_recursive>
 8005b76:	4628      	mov	r0, r5
 8005b78:	4621      	mov	r1, r4
 8005b7a:	f7ff ff59 	bl	8005a30 <__sflush_r>
 8005b7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b80:	07da      	lsls	r2, r3, #31
 8005b82:	4605      	mov	r5, r0
 8005b84:	d4e0      	bmi.n	8005b48 <_fflush_r+0xc>
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	059b      	lsls	r3, r3, #22
 8005b8a:	d4dd      	bmi.n	8005b48 <_fflush_r+0xc>
 8005b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b8e:	f7ff f9d2 	bl	8004f36 <__retarget_lock_release_recursive>
 8005b92:	e7d9      	b.n	8005b48 <_fflush_r+0xc>
 8005b94:	4b05      	ldr	r3, [pc, #20]	; (8005bac <_fflush_r+0x70>)
 8005b96:	429c      	cmp	r4, r3
 8005b98:	d101      	bne.n	8005b9e <_fflush_r+0x62>
 8005b9a:	68ac      	ldr	r4, [r5, #8]
 8005b9c:	e7df      	b.n	8005b5e <_fflush_r+0x22>
 8005b9e:	4b04      	ldr	r3, [pc, #16]	; (8005bb0 <_fflush_r+0x74>)
 8005ba0:	429c      	cmp	r4, r3
 8005ba2:	bf08      	it	eq
 8005ba4:	68ec      	ldreq	r4, [r5, #12]
 8005ba6:	e7da      	b.n	8005b5e <_fflush_r+0x22>
 8005ba8:	0800651c 	.word	0x0800651c
 8005bac:	0800653c 	.word	0x0800653c
 8005bb0:	080064fc 	.word	0x080064fc

08005bb4 <_lseek_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	4d07      	ldr	r5, [pc, #28]	; (8005bd4 <_lseek_r+0x20>)
 8005bb8:	4604      	mov	r4, r0
 8005bba:	4608      	mov	r0, r1
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	602a      	str	r2, [r5, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f7fc fefa 	bl	80029bc <_lseek>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <_lseek_r+0x1e>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b103      	cbz	r3, 8005bd2 <_lseek_r+0x1e>
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	20000504 	.word	0x20000504

08005bd8 <__swhatbuf_r>:
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	460e      	mov	r6, r1
 8005bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be0:	2900      	cmp	r1, #0
 8005be2:	b096      	sub	sp, #88	; 0x58
 8005be4:	4614      	mov	r4, r2
 8005be6:	461d      	mov	r5, r3
 8005be8:	da07      	bge.n	8005bfa <__swhatbuf_r+0x22>
 8005bea:	2300      	movs	r3, #0
 8005bec:	602b      	str	r3, [r5, #0]
 8005bee:	89b3      	ldrh	r3, [r6, #12]
 8005bf0:	061a      	lsls	r2, r3, #24
 8005bf2:	d410      	bmi.n	8005c16 <__swhatbuf_r+0x3e>
 8005bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bf8:	e00e      	b.n	8005c18 <__swhatbuf_r+0x40>
 8005bfa:	466a      	mov	r2, sp
 8005bfc:	f000 f8b0 	bl	8005d60 <_fstat_r>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	dbf2      	blt.n	8005bea <__swhatbuf_r+0x12>
 8005c04:	9a01      	ldr	r2, [sp, #4]
 8005c06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c0e:	425a      	negs	r2, r3
 8005c10:	415a      	adcs	r2, r3
 8005c12:	602a      	str	r2, [r5, #0]
 8005c14:	e7ee      	b.n	8005bf4 <__swhatbuf_r+0x1c>
 8005c16:	2340      	movs	r3, #64	; 0x40
 8005c18:	2000      	movs	r0, #0
 8005c1a:	6023      	str	r3, [r4, #0]
 8005c1c:	b016      	add	sp, #88	; 0x58
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}

08005c20 <__smakebuf_r>:
 8005c20:	898b      	ldrh	r3, [r1, #12]
 8005c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c24:	079d      	lsls	r5, r3, #30
 8005c26:	4606      	mov	r6, r0
 8005c28:	460c      	mov	r4, r1
 8005c2a:	d507      	bpl.n	8005c3c <__smakebuf_r+0x1c>
 8005c2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	6123      	str	r3, [r4, #16]
 8005c34:	2301      	movs	r3, #1
 8005c36:	6163      	str	r3, [r4, #20]
 8005c38:	b002      	add	sp, #8
 8005c3a:	bd70      	pop	{r4, r5, r6, pc}
 8005c3c:	ab01      	add	r3, sp, #4
 8005c3e:	466a      	mov	r2, sp
 8005c40:	f7ff ffca 	bl	8005bd8 <__swhatbuf_r>
 8005c44:	9900      	ldr	r1, [sp, #0]
 8005c46:	4605      	mov	r5, r0
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f7fe ffbb 	bl	8004bc4 <_malloc_r>
 8005c4e:	b948      	cbnz	r0, 8005c64 <__smakebuf_r+0x44>
 8005c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c54:	059a      	lsls	r2, r3, #22
 8005c56:	d4ef      	bmi.n	8005c38 <__smakebuf_r+0x18>
 8005c58:	f023 0303 	bic.w	r3, r3, #3
 8005c5c:	f043 0302 	orr.w	r3, r3, #2
 8005c60:	81a3      	strh	r3, [r4, #12]
 8005c62:	e7e3      	b.n	8005c2c <__smakebuf_r+0xc>
 8005c64:	4b0d      	ldr	r3, [pc, #52]	; (8005c9c <__smakebuf_r+0x7c>)
 8005c66:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c68:	89a3      	ldrh	r3, [r4, #12]
 8005c6a:	6020      	str	r0, [r4, #0]
 8005c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c70:	81a3      	strh	r3, [r4, #12]
 8005c72:	9b00      	ldr	r3, [sp, #0]
 8005c74:	6163      	str	r3, [r4, #20]
 8005c76:	9b01      	ldr	r3, [sp, #4]
 8005c78:	6120      	str	r0, [r4, #16]
 8005c7a:	b15b      	cbz	r3, 8005c94 <__smakebuf_r+0x74>
 8005c7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c80:	4630      	mov	r0, r6
 8005c82:	f000 f87f 	bl	8005d84 <_isatty_r>
 8005c86:	b128      	cbz	r0, 8005c94 <__smakebuf_r+0x74>
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	f023 0303 	bic.w	r3, r3, #3
 8005c8e:	f043 0301 	orr.w	r3, r3, #1
 8005c92:	81a3      	strh	r3, [r4, #12]
 8005c94:	89a0      	ldrh	r0, [r4, #12]
 8005c96:	4305      	orrs	r5, r0
 8005c98:	81a5      	strh	r5, [r4, #12]
 8005c9a:	e7cd      	b.n	8005c38 <__smakebuf_r+0x18>
 8005c9c:	08004d91 	.word	0x08004d91

08005ca0 <memcpy>:
 8005ca0:	440a      	add	r2, r1
 8005ca2:	4291      	cmp	r1, r2
 8005ca4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ca8:	d100      	bne.n	8005cac <memcpy+0xc>
 8005caa:	4770      	bx	lr
 8005cac:	b510      	push	{r4, lr}
 8005cae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cb6:	4291      	cmp	r1, r2
 8005cb8:	d1f9      	bne.n	8005cae <memcpy+0xe>
 8005cba:	bd10      	pop	{r4, pc}

08005cbc <memmove>:
 8005cbc:	4288      	cmp	r0, r1
 8005cbe:	b510      	push	{r4, lr}
 8005cc0:	eb01 0402 	add.w	r4, r1, r2
 8005cc4:	d902      	bls.n	8005ccc <memmove+0x10>
 8005cc6:	4284      	cmp	r4, r0
 8005cc8:	4623      	mov	r3, r4
 8005cca:	d807      	bhi.n	8005cdc <memmove+0x20>
 8005ccc:	1e43      	subs	r3, r0, #1
 8005cce:	42a1      	cmp	r1, r4
 8005cd0:	d008      	beq.n	8005ce4 <memmove+0x28>
 8005cd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cda:	e7f8      	b.n	8005cce <memmove+0x12>
 8005cdc:	4402      	add	r2, r0
 8005cde:	4601      	mov	r1, r0
 8005ce0:	428a      	cmp	r2, r1
 8005ce2:	d100      	bne.n	8005ce6 <memmove+0x2a>
 8005ce4:	bd10      	pop	{r4, pc}
 8005ce6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cee:	e7f7      	b.n	8005ce0 <memmove+0x24>

08005cf0 <_realloc_r>:
 8005cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf2:	4607      	mov	r7, r0
 8005cf4:	4614      	mov	r4, r2
 8005cf6:	460e      	mov	r6, r1
 8005cf8:	b921      	cbnz	r1, 8005d04 <_realloc_r+0x14>
 8005cfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005cfe:	4611      	mov	r1, r2
 8005d00:	f7fe bf60 	b.w	8004bc4 <_malloc_r>
 8005d04:	b922      	cbnz	r2, 8005d10 <_realloc_r+0x20>
 8005d06:	f7fe ff0d 	bl	8004b24 <_free_r>
 8005d0a:	4625      	mov	r5, r4
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d10:	f000 f848 	bl	8005da4 <_malloc_usable_size_r>
 8005d14:	42a0      	cmp	r0, r4
 8005d16:	d20f      	bcs.n	8005d38 <_realloc_r+0x48>
 8005d18:	4621      	mov	r1, r4
 8005d1a:	4638      	mov	r0, r7
 8005d1c:	f7fe ff52 	bl	8004bc4 <_malloc_r>
 8005d20:	4605      	mov	r5, r0
 8005d22:	2800      	cmp	r0, #0
 8005d24:	d0f2      	beq.n	8005d0c <_realloc_r+0x1c>
 8005d26:	4631      	mov	r1, r6
 8005d28:	4622      	mov	r2, r4
 8005d2a:	f7ff ffb9 	bl	8005ca0 <memcpy>
 8005d2e:	4631      	mov	r1, r6
 8005d30:	4638      	mov	r0, r7
 8005d32:	f7fe fef7 	bl	8004b24 <_free_r>
 8005d36:	e7e9      	b.n	8005d0c <_realloc_r+0x1c>
 8005d38:	4635      	mov	r5, r6
 8005d3a:	e7e7      	b.n	8005d0c <_realloc_r+0x1c>

08005d3c <_read_r>:
 8005d3c:	b538      	push	{r3, r4, r5, lr}
 8005d3e:	4d07      	ldr	r5, [pc, #28]	; (8005d5c <_read_r+0x20>)
 8005d40:	4604      	mov	r4, r0
 8005d42:	4608      	mov	r0, r1
 8005d44:	4611      	mov	r1, r2
 8005d46:	2200      	movs	r2, #0
 8005d48:	602a      	str	r2, [r5, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f7fc fdd6 	bl	80028fc <_read>
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d102      	bne.n	8005d5a <_read_r+0x1e>
 8005d54:	682b      	ldr	r3, [r5, #0]
 8005d56:	b103      	cbz	r3, 8005d5a <_read_r+0x1e>
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
 8005d5c:	20000504 	.word	0x20000504

08005d60 <_fstat_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	4d07      	ldr	r5, [pc, #28]	; (8005d80 <_fstat_r+0x20>)
 8005d64:	2300      	movs	r3, #0
 8005d66:	4604      	mov	r4, r0
 8005d68:	4608      	mov	r0, r1
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	602b      	str	r3, [r5, #0]
 8005d6e:	f7fc fe0a 	bl	8002986 <_fstat>
 8005d72:	1c43      	adds	r3, r0, #1
 8005d74:	d102      	bne.n	8005d7c <_fstat_r+0x1c>
 8005d76:	682b      	ldr	r3, [r5, #0]
 8005d78:	b103      	cbz	r3, 8005d7c <_fstat_r+0x1c>
 8005d7a:	6023      	str	r3, [r4, #0]
 8005d7c:	bd38      	pop	{r3, r4, r5, pc}
 8005d7e:	bf00      	nop
 8005d80:	20000504 	.word	0x20000504

08005d84 <_isatty_r>:
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	4d06      	ldr	r5, [pc, #24]	; (8005da0 <_isatty_r+0x1c>)
 8005d88:	2300      	movs	r3, #0
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	602b      	str	r3, [r5, #0]
 8005d90:	f7fc fe09 	bl	80029a6 <_isatty>
 8005d94:	1c43      	adds	r3, r0, #1
 8005d96:	d102      	bne.n	8005d9e <_isatty_r+0x1a>
 8005d98:	682b      	ldr	r3, [r5, #0]
 8005d9a:	b103      	cbz	r3, 8005d9e <_isatty_r+0x1a>
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}
 8005da0:	20000504 	.word	0x20000504

08005da4 <_malloc_usable_size_r>:
 8005da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005da8:	1f18      	subs	r0, r3, #4
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	bfbc      	itt	lt
 8005dae:	580b      	ldrlt	r3, [r1, r0]
 8005db0:	18c0      	addlt	r0, r0, r3
 8005db2:	4770      	bx	lr

08005db4 <_init>:
 8005db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db6:	bf00      	nop
 8005db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dba:	bc08      	pop	{r3}
 8005dbc:	469e      	mov	lr, r3
 8005dbe:	4770      	bx	lr

08005dc0 <_fini>:
 8005dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc2:	bf00      	nop
 8005dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc6:	bc08      	pop	{r3}
 8005dc8:	469e      	mov	lr, r3
 8005dca:	4770      	bx	lr
